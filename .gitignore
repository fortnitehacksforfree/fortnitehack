-- Script Hub Initiating
local succ,err = pcall(function()
    if not isfolder("Exceros Hub") then
        makefolder("Exceros Hub")
    end
end)
if not succ then
    game:GetService('Players').LocalPlayer:Kick("Error occured with folder creation, send this to Exceros Hub maintainers [CODE 0XA1]")
end

if LPH_OBFUSCATED == nil then
    LPH_JIT_MAX = function(...) return (...) end
    LPH_NO_VIRTUALIZE = function(...) return (...) end
end


local Games = {
    ["Booga Booga Reborn"] = 4154513353,
}

-- Game Check
local GameToLoad = nil
if game.GameId and typeof(game.GameId) == "number" then
    for name,id in pairs(Games) do
        if game.GameId == id then
            GameToLoad = name
            break
        end
    end
end
--campfire
if GameToLoad == nil then
    game:GetService("Players").LocalPlayer:Kick("Game unsupported, if this game is supported and you are kicked please message maintainers of Exceros Hub [CODE 0XA2]")
    return
end

if not game:IsLoaded() then 
    game.Loaded:Wait()
end

if GameToLoad == "Booga Booga Reborn" then
    if game.PlaceId == 11879754496 then -- void
        do
            local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
            local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
            local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()
            
            local Window = Library:CreateWindow({
                Title = "Exceros Hub || Booga Booga Void || discord.gg/exceros",
                Center = true,
                AutoShow = true,
                TabPadding = 8,
                MenuFadeTime = 0.2
            })
            
            local Tabs = {
                Main = Window:AddTab('Main'),
                ESP = Window:AddTab("ESP"),
                Crafting = Window:AddTab("Crafting"),
                Misc = Window:AddTab("Misc"),
                ['UI Settings'] = Window:AddTab('UI Settings'),
            }
            
            -- Services
            local VirtualUser = game:GetService("VirtualUser")
            local Player = game:GetService("Players").LocalPlayer
            local Players = game:GetService('Players')
            local RunService = game:GetService("RunService")
            local ReplicatedStorage = game:GetService('ReplicatedStorage')
            local Lighting = game:GetService("Lighting")
            local UserInputService = game:GetService("UserInputService")
            local TweenService = game:GetService("TweenService")
            local TeleportService = game:GetService('TeleportService')
            local HttpService = game:GetService("HttpService")
            
            local GC = getconnections or get_signal_cons
            local Character = Player.Character
            local Player = Players.LocalPlayer
            
            -- Connections
            local Connections = {}
            local Hooks = {}
            
            -- groupboxes
            local CraftBox = Tabs.Crafting:AddLeftGroupbox('Crafting')
            local AutoHealBox = Tabs.Main:AddLeftGroupbox('Auto Heal')
            local LocalGroupBox = Tabs.Main:AddLeftGroupbox('Local')
            local KillAuraBox = Tabs.Main:AddRightGroupbox('Kill Aura')
            local CombatBox = Tabs.Main:AddLeftGroupbox("Combat")
            local FarmingBox = Tabs.Main:AddRightGroupbox("Auto")
            local TeleportBox = Tabs.Misc:AddLeftGroupbox("Teleports")
            local BoatModifier = Tabs.Misc:AddRightGroupbox("Boats")

            -- esp groubpxoes
            local OreESPBox = Tabs.ESP:AddLeftGroupbox("Ore ESP")
            local PlayerESPBox = Tabs.ESP:AddRightGroupbox("Player ESP")
            
            -- variables
            local AutoDropItem = "Item Name"
            local AutoDrop = false
            local sets = "Leaf Set"
            local AutoHarvest = false
            local AutoPlant = false
            local WalkSpeedToggled = false
            local WalkSpeedValue = 16
            local JumpPowerToggled = false
            local JumpPowerValue = 50
            local AutoKillCritters = false
            local AutoKillCrittersRange = 12
            local KillAuraPlayers = false
            local KillAuraPlayersRange = 12
            local AutoMineResources = false 
            local AutoMineResourcesRange = 50
            local InfiniteJump = false
            local AutoPickup = false
            local AuotPickupRange = 20
            local AutoPlant = false
            local AutoFarm = false
            local AutoHeal = false
            local SelectedFruit = "Bloodfruit"
            local FruitToEat = "Bloodfruit"
            local AutoHealAt = 75
            local HealAmountMultiplier = 1
            local PlantFruitRange = 100
            local CollectFruitRange = 25
            local OreESPToggle = false
            local ShowOreESPDistance = false
            local ShowOreHealth = false
            local ShownOres = {}
            local HitboxExpander = false
            local HitboxExpanderShown = false
            local HitboxExpanderRange = 12
            local PlayerESPToggle = false
            local PlayerESPColor = Color3.fromRGB(148, 50, 205)
            local HealthESP = false
            local ItemToDrop = ""
            local VoodooBoltNearby = false
            local ShowArmor = false
            local ArmorColor = Color3.fromRGB(202, 131, 25)
            local ArmorPosition = "Down"
            local ArmorSize = 13 
            local ShowTribeColor = false
            local HubNoClip = false
            local HeadSizeToggle = false
            local HeadSizeVariable = 6
            local UseAnimation = false
            local IsAnimationPlaying = false
            local BoatSpeedToggle = false
            local BoatSpeed = 15
            local AntiDock = false
            -- loop breaker
            local BreakPoint = false
            -- anti afk

            task.spawn(function()
                for i,v in pairs(getconnections(Player.Idled)) do
                    v:Disable()
                end
                Player.Idled:Connect(function()
                    local VirtualUser = game:GetService("VirtualUser")
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end)

            AutoHealBox:AddDropdown('Auto Heal Fruits', {
                Values = { 'Bloodfruit', 'Bluefruit', 'Berry', 'Jelly', 'Lemon', 'Pumpkin'},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Fruits',
                Tooltip = 'fruits used to heal', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    FruitToEat = tostring(Value)
                end
            })
            
            AutoHealBox:AddToggle('Auto Heal', {
                Text = 'Auto Heal',
                Default = false,
                Tooltip = 'Toggle on/off Auto Heal', 
                Callback = function(Value)
                    AutoHeal = Value
                end
            })
            
            AutoHealBox:AddSlider('Eat Multiplier', {
                Text = 'Eat Multiplier',
                Default = 1,
                Min = 1,
                Max = 5,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HealAmountMultiplier = Value
                end
            })
            
            AutoHealBox:AddSlider('Heal at health%', {
                Text = 'Heal at health%',
                Default = 75,
                Min = 0,
                Max = 100,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoHealAt = Value
                end
            })
            
            -- walkspeed / local player shit
            LocalGroupBox:AddToggle('Walk Speed', {
                Text = 'Walk Speed',
                Default = false,
                Tooltip = 'Modifies your walkspeed', 
                Callback = function(Value)
                    WalkSpeedToggled = Value
                end
            })
            --packets
            LocalGroupBox:AddSlider('Walk Speed Value', {
                Text = 'Walk Speed Value',
                Default = 16,
                Min = 16,
                Max = 25,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    WalkSpeedValue = Value
                end
            })
            
            LocalGroupBox:AddToggle('Jump Power', {
                Text = 'Jump Power',
                Default = false,
                Tooltip = 'Jump Power', 
                Callback = function(Value)
                    JumpPowerToggled = Value
                end
            })
            
            LocalGroupBox:AddSlider('Jump Power Value', {
                Text = 'Jump Power Value',
                Default = 50,
                Min = 50,
                Max = 150,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    JumpPowerValue = Value
                end
            })
            
            LocalGroupBox:AddToggle('Infinite Jump', {
                Text = 'Infinite Jump',
                Default = false,
                Tooltip = 'infinite jump', 
                Callback = function(Value)
                    InfiniteJump = Value
                end
            })
            
            LocalGroupBox:AddToggle('Hut No-Clip', {
                Text = 'Hut No-Clip',
                Default = false,
                Tooltip = 'infinite jump', 
                Callback = function(Value)
                    HubNoClip = Value
                end
            })
            
            -- boat shit
            BoatModifier:AddToggle('Boat Speed', {
                Text = 'Boat Speed',
                Default = false,
                Tooltip = 'modifies the (raft/sail/boat) speed the user is on', 
                Callback = function(Value)
                    BoatSpeedToggle = Value
                end
            })

            BoatModifier:AddSlider('Boat Speed Strength', {
                Text = 'Boat Speed Strength',
                Default = 15,
                Min = 0,
                Max = 50,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    BoatSpeed = Value
                end
            })

            -- kill auras
            KillAuraBox:AddToggle('Auto-Kill Critters', {
                Text = 'Auto-Kill Critters',
                Default = false,
                Tooltip = 'kills critters around u', 
                Callback = function(Value)
                    AutoKillCritters = Value
                end
            })
            
            KillAuraBox:AddSlider('Critters Range', {
                Text = 'Critters Range',
                Default = 12,
                Min = 0,
                Max = 50,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoKillCrittersRange = Value
                end
            })
            
            -- combat
            CombatBox:AddToggle('Kill Aura Players', {
                Text = 'Kill Aura Players',
                Default = false,
                Tooltip = 'kill auras', 
                Callback = function(Value)
                    KillAuraPlayers = Value
                end
            })
            
            CombatBox:AddSlider('Kill Aura Range', {
                Text = 'Kill Aura Range',
                Default = 12,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    KillAuraPlayersRange = Value
                end
            })
            
            CombatBox:AddToggle('Use Slash Animation', {
                Text = 'Use Slash Animation',
                Default = false,
                Tooltip = 'uses slash animation', 
                Callback = function(Value)
                    UseAnimation = Value
                end
            })

            CombatBox:AddDivider()
            
            CombatBox:AddToggle('Hitbox Expander', {
                Text = 'Hitbox Expander',
                Default = false,
                Tooltip = 'extends htiboxes', 
                Callback = function(Value)
                    HitboxExpander = Value
                end
            })
            
            
            CombatBox:AddSlider('Hitbox Range', {
                Text = 'Hitbox Range',
                Default = 12,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HitboxExpanderRange = Value
                end
            })
            
            CombatBox:AddToggle('Hitbox Expander Visible', {
                Text = 'Hitbox Expander Visible',
                Default = false,
                Tooltip = 'extends htiboxes Visible', 
                Callback = function(Value)
                    HitboxExpanderShown = Value
                end
            })

            CombatBox:AddToggle('Head Size', {
                Text = 'Head Size',
                Default = false,
                Tooltip = 'headsize', 
                Callback = function(Value)
                    HeadSizeToggle = Value
                end
            })
            
            
            CombatBox:AddSlider('Head Size Range', {
                Text = 'Head Size Range',
                Default = 6,
                Min = 0,
                Max = 6,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HeadSizeVariable = Value
                end
            })
            
            
            CombatBox:AddToggle('Auto-Bolt Nearby Player', {
                Text = 'Auto-Bolt Nearby Player',
                Default = false,
                Tooltip = 'if (voodoo bolt) it shoots nearest player', 
                Callback = function(Value)
                    VoodooBoltNearby = Value
                end
            })

            CombatBox:AddToggle('Anti Dock', {
                Text = 'Anti Dock',
                Default = false,
                Tooltip = 'Anti Dock', 
                Callback = function(Value)
                    AntiDock = Value
                end
            })
            
            -- farming
            FarmingBox:AddToggle('Auto-Mine Resource', {
                Text = 'Auto-Mine Resource',
                Default = false,
                Tooltip = 'auto mine resources', 
                Callback = function(Value)
                    AutoMineResources = Value
                end
            })
            
            FarmingBox:AddSlider('Mine Range', {
                Text = 'Mine Range',
                Default = 50,
                Min = 0,
                Max = 100,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoMineResourcesRange = Value
                end
            })
            
            FarmingBox:AddToggle('Auto-Collect Resources', {
                Text = 'Auto-Collect Resources',
                Default = false,
                Tooltip = 'auto collects resources', 
                Callback = function(Value)
                    AutoPickup = Value
                end
            })
            
            FarmingBox:AddSlider('Auto-Collect Range', {
                Text = 'Auto-Collect Range',
                Default = 20,
                Min = 0,
                Max = 25,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AuotPickupRange = Value
                end
            })
            FarmingBox:AddToggle('Auto-Drop Items', {
                Text = 'Auto-Drop Items',
                Default = false,
                Tooltip = 'Automatically drop items', 
                Callback = function(Value)
                    AutoDrop = Value
                end
            })
            FarmingBox:AddInput('Item Name', {
                Default = 'Item Name',
                Numeric = false, -- true / false, only allows numbers
                Finished = false, -- true / false, only calls callback when you press enter
            
                Text = 'Item Name',
                Tooltip = 'Item to automatically drop', -- Information shown when you hover over the textbox
            
                Placeholder = 'Type item name', -- placeholder text when the box is empty
                -- MaxLength is also an option which is the max length of the text
            
                Callback = function(AutoDropItem)
                    ItemToDrop = AutoDropItem
                end
            })
            
            
            -- esp
            OreESPBox:AddToggle('Ore ESP', {
                Text = 'Ore ESP',
                Default = false,
                Tooltip = 'ore esp for ores', 
                Callback = function(Value)
                    OreESPToggle = Value
                end
            })
            
            OreESPBox:AddToggle('Show Ore Distance', {
                Text = 'Show Ore Distance',
                Default = false,
                Tooltip = 'show distance ore esp for ores', 
                Callback = function(Value)
                    ShowOreESPDistance = Value
                end
            })
            
            OreESPBox:AddToggle('Show Ore Health', {
                Text = 'Show Ore Health',
                Default = false,
                Tooltip = 'shows health', 
                Callback = function(Value)
                    ShowOreHealth = Value
                end
            })
            
            local allowedOresforESP = {
                    "Strange God",
                    "Dark God",
                    "Infinity God",
                    "Magical God",
                    "Odd God",
                    "Soulless God",
                    "Strangefruit Cluster",
                    "Uber Goober",
                    "Void Crag",
                    "Magnetite Rock",
                },
            
            OreESPBox:AddDropdown('Shown Ores', {
                Values = {
                    "Strange God",
                    "Dark God",
                    "Infinity God",
                    "Magical God",
                    "Odd God",
                    "Soulless God",
                    "Strangefruit Cluster",
                    "Uber Goober",
                    "Void Crag",
                    "Magnetite Rock",
                },
                Default = 1,
                Multi = true,
            
                Text = 'Shown Ores',
                Tooltip = 'shows selected ores on esp', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    ShownOres = Value
                end
            })
            
            -- player esp
            PlayerESPBox:AddToggle('Player ESP', {
                Text = 'Player ESP',
                Default = false,
                Tooltip = 'shows player esp', 
                Callback = function(Value)
                    PlayerESPToggle = Value
                end
                }):AddColorPicker('Player ESP Color', {
                    Default = Color3.fromRGB(148, 50, 205), 
                    Title = 'Choose Player ESP Color', 
                    Transparency = nil,
            
                    Callback = function(Value)
                        PlayerESPColor = Value
                    end
                })
            
                PlayerESPBox:AddToggle('Show Health', {
                    Text = 'Show Health',
                    Default = false,
                    Tooltip = 'show health fr', 
                    Callback = function(Value)
                        HealthESP = Value
                    end
                })
            
                PlayerESPBox:AddToggle('Use Tribe Color', {
                    Text = 'Use Tribe Color',
                    Default = false,
                    Tooltip = 'showst ribe color instead', 
                    Callback = function(Value)
                        ShowTribeColor = Value
                    end
                })
            
                PlayerESPBox:AddDivider()
            
                PlayerESPBox:AddToggle('Show Armor', {
                    Text = 'Show Armor',
                    Default = false,
                    Tooltip = 'shows player esp', 
                    Callback = function(Value)
                        ShowArmor = Value
                    end
                }):AddColorPicker('Armor Color', {
                    Default = ArmorColor, 
                    Title = 'Armor Color', 
                    Transparency = nil,
            
                    Callback = function(Value)
                        ArmorColor = Value
                    end
                })
                
                PlayerESPBox:AddSlider('Armor ESP Size', {
                    Text = 'Armor ESP Size',
                    Default = 12,
                    Min = 0,
                    Max = 20,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        ArmorSize = Value
                    end
                })
            
                PlayerESPBox:AddDropdown('Armor Position', {
                    Values = {
                        "Left",
                        "Right",
                        "Down"
                    },
                    Default = 3,
                    Multi = false,
                
                    Text = 'Armor Position',
                    Tooltip = 'changes esp location', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        ArmorPosition = Value
                    end
                })
            
            -- functions
            local function getClosestCritter(d)
                local Closest, maxDistance = nil, d
                if (workspace:FindFirstChild("Void Ant") or workspace:FindFirstChild("Lost Soul")) then
                    for i,v in pairs(workspace:GetChildren()) do
                        if v:IsA("Model") and v.PrimaryPart ~= nil and (tostring(v) == "Void Ant" or tostring(v) == "Lost Soul") then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end
            
            local function getClosestPlayer(d)
                local Closest, maxDistance = nil, d
                if Player and Player.Character then
                    for i,v in pairs(game:GetService("Players"):GetPlayers()) do
                        if v and v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.Character.HumanoidRootPart.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end
            
            local function getClosestResource(d)
                local Closest, maxDistance = nil, d
                local p = nil
                if p == nil then
                    for i,v in pairs(workspace:GetChildren()) do
                        if v:IsA("Model") and v:FindFirstChild("Health") and not v:FindFirstChild("Humanoid") and (v.PrimaryPart ~= nil or v:FindFirstChild("Totem") or v:FindFirstChild("Leaves")) then
                            if v.PrimaryPart ~= nil and v.PrimaryPart then
                                p = v.PrimaryPart
                            elseif v:FindFirstChild("Totem") then
                                p = v.Totem
                            elseif v:FindFirstChild("Leaves") then
                                p = v.Leaves
                            end
                            local Distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-p.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, p
            end
            --hook
            local function getClosestDrop(d)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Items") then
                    for i,v in pairs(workspace.Items:GetChildren()) do
                        if v:IsA("BasePart") and v:FindFirstChild("Pickup") then
                            local Distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-v.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end
            
            -- inf jump
            local infJumpDebounce = false
            Connections.infjump = UserInputService.JumpRequest:Connect(function()
                if not infJumpDebounce and InfiniteJump then
                    infJumpDebounce = true
                    Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait()
                    infJumpDebounce = false
                end
            end)
            
            local HarvestDebounce = false
            local PlantDebounce = false
            local MineDebounce = false
            local CollectDebounce = false
            local VoodooDebounce = false
            
            local ConnectedToWalkSpeed = nil
            Connections.MainLoop = RunService.Stepped:Connect(function()
                if Player and Player.Character then
                    if WalkSpeedToggled then
                        Player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = WalkSpeedValue
                        if not ConnectedToWalkSpeed then
                            ConnectedToWalkSpeed = Player.Character:FindFirstChildOfClass("Humanoid"):GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                                Player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = WalkSpeedValue
                            end)
                        end
                    else
                        if ConnectedToWalkSpeed then
                            ConnectedToWalkSpeed:Disconnect()
                            ConnectedToWalkSpeed = nil
                        end
                    end
                    if JumpPowerToggled then
                        Player.Character:FindFirstChildOfClass("Humanoid").JumpPower = JumpPowerValue
                    end
            
                    if BoatSpeedToggle then
                        if Player.Character and Player.Character.Humanoid and Player.Character.Humanoid.SeatPart then
                            if Player.Character.Humanoid.SeatPart:FindFirstChild("BodyVelocity") then
                                Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity = Vector3.new(Player.Character.HumanoidRootPart.CFrame.LookVector.X*BoatSpeed, Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity.Y, Player.Character.HumanoidRootPart.CFrame.LookVector.Z*BoatSpeed)
                            end
                        end
                    end

                    -- kill aura
                    if AutoKillCritters then
                        local crit = getClosestCritter(AutoKillCrittersRange)
                        if crit and crit.PrimaryPart then
                            local args = {
                                [1] = os.clock(),
                                [2] = {
                                    crit.PrimaryPart,
                                    crit.HumanoidRootPart,
                                    crit.Head,
                                }
                            }
                            
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("SwingTool"):FireServer(unpack(args))
                            
                        end
                    end
            
                    -- combat
                    if KillAuraPlayers then
                        local closest_plr = getClosestPlayer(KillAuraPlayersRange)
                        print(closest_plr)
                        if closest_plr and closest_plr.Character and closest_plr.Character.PrimaryPart then
                            print('swing')
                            if UseAnimation then
                                local a = game:GetService("ReplicatedStorage").Animations.Slash
                                if a then 
                                    if not IsAnimationPlaying then
                                        IsAnimationPlaying = true
                                        local anim = Player.Character.Humanoid:LoadAnimation(a)
                                        anim:Play()
                                        local c; c = anim.Ended:Connect(function() IsAnimationPlaying = false c:Disconnect() end)
                                        local c2; c2 = anim.Stopped:Connect(function() IsAnimationPlaying = false c2:Disconnect() end)
                                    end
                                end
                            end
                            local args = {
                                [1] = os.clock(),
                                [2] = {
                                    closest_plr.Character.PrimaryPart,
                                    closest_plr.Character.HumanoidRootPart,
                                    closest_plr.Character.Head,
                                }
                            }
                            
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("SwingTool"):FireServer(unpack(args))
                            
                        end
                    end

            
                    -- farming
                    if AutoMineResources then
                        if not MineDebounce then
                            MineDebounce = true
                            local closest_resource, closest_part = getClosestResource(AutoMineResourcesRange)
                            if closest_resource then
                                print(closest_resource)
                                local args = {
                                    [1] = os.clock(),
                                    [2] = {
                                        closest_part,
                                        closest_resource.PrimaryPart,
                                        closest_resource:FindFirstChildOfClass("BasePart"),
                                        closest_resource:FindFirstChildOfClass("Part"),
                                    },
                                }
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("SwingTool"):FireServer(unpack(args))
                            end
                            task.delay(0.1, function() MineDebounce = false end)
                        end
                    end
            
                    if AutoPickup then
                        if not CollectDebounce then
                            local closest_drop = getClosestDrop(AuotPickupRange)
                            if closest_drop then
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Pickup"):FireServer(
                                    closest_drop,
                                    "Part"
                                )
                            end
                            task.delay(0.1, function() CollectDebounce = false end)
                        end
                    end
            
                    -- auto eat
                    local Inventory = Player.PlayerGui.MainGui.RightPanel.Inventory.List
                    if Inventory then
                        if AutoHeal then
                            if (Player.Character.Humanoid.Health/Player.Character.Humanoid.MaxHealth*100) <= AutoHealAt then 
                                for i = 1, HealAmountMultiplier do 
                                    game:GetService("ReplicatedStorage").Events.UseBagItem:FireServer(FruitToEat)
                                end
                            end
                        end
                    end
            
                    if HubNoClip then
                        for i,v in pairs(workspace.Deployables:GetChildren()) do
                            if v:IsA("Model") and v:FindFirstChild("Door") and v.Door.CanCollide == true then
                                if HubNoClip then
                                    v.Door.CanCollide = false
                                    v.Door.Transparency = 0.7
                                end
                            end
                        end
                    end
                    
                    if AntiDock then
                        local RayParams = RaycastParams.new()
                        RayParams.FilterDescendantsInstances = {Player.Character}
                        RayParams.FilterType = Enum.RaycastFilterType.Exclude
                        local Ray = workspace:Raycast(Player.Character.HumanoidRootPart.Position, Vector3.new(0, 4, 0), RayParams)
                        if Ray and Ray.Instance and tostring(Ray.Instance) == "StructureWood" then
                            Player.Character.HumanoidRootPart.CFrame *= CFrame.new(0, 2, 0)
                        end
                    end

                    if HeadSizeToggle then
                        for _,v in pairs(Players:GetPlayers()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("Head") then
                                v.Character:FindFirstChild("Head").Size = Vector3.new(HeadSizeVariable,HeadSizeVariable,HeadSizeVariable)
                            end
                        end
                    else
                        for _,v in pairs(Players:GetPlayers()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("Head") and v.Character.Head.Size ~= Vector3.new(2, 1, 1) then
                                v.Character:FindFirstChild("Head").Size = Vector3.new(2, 1, 1)
                            end
                        end
                    end

                    if HitboxExpander then
                        for _,v in pairs(Players:GetPlayers()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                                if HitboxExpanderShown then
                                    v.Character:FindFirstChild("HumanoidRootPart").Transparency = 0.7
                                else
                                    if v.Character:FindFirstChild("HumanoidRootPart").Transparency ~= 1 then
                                        v.Character:FindFirstChild("HumanoidRootPart").Transparency = 1
                                    end
                                end
                                v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(HitboxExpanderRange,HitboxExpanderRange,HitboxExpanderRange)
                            end
                        end
                    else
                        for _,v in pairs(Players:GetPlayers()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                                if v.Character:FindFirstChild("HumanoidRootPart").Transparency ~= 1 then
                                    v.Character:FindFirstChild("HumanoidRootPart").Transparency = 1
                                end
                                if v.Character:FindFirstChild("HumanoidRootPart").Size ~= Vector3.new(2, 2, 1) then
                                    v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(2, 2, 1)
                                end
                            end
                        end
                    end
            
                    if AutoDrop then
                        game:GetService("ReplicatedStorage").Events.DropBagItem:FireServer(ItemToDrop)
                    end
            
                    if VoodooBoltNearby then
                        local ClosestPlayer = getClosestPlayer(100)
                        if ClosestPlayer then
                            if not VoodooDebounce then
                                VoodooDebounce = true
                                game:GetService("ReplicatedStorage"):FindFirstChild("Events"):FindFirstChild("VoodooSpell"):FireServer(ClosestPlayer.Character.PrimaryPart.Position)
                                task.delay(0.5, function() VoodooDebounce = false end)
                            end
                        end
                    end
            
                else
                    HarvestDebounce = false
                    PlantDebounce = false
                    VoodooDebounce = false
                    MineDebounce = false
                    CollectDebounce = false
                end -- end of char check
            end)
            
            if Player.Character then
                PlantDebounce = false
                HarvestDebounce = false
                MineDebounce = false
                CollectDebounce = false
                VoodooDebounce = false
                local _; _ = Player.Character:WaitForChild("Humanoid").Died:Connect(function() _:Disconnect() VoodooDebounce = false PlantDebounce = false HarvestDebounce = false end)
            end
            Player.CharacterAdded:Connect(function(c)
                PlantDebounce = false
                HarvestDebounce = false
                MineDebounce = false
                CollectDebounce = false
                VoodooDebounce = false
                local _; _ = c:WaitForChild("Humanoid").Died:Connect(function() _:Disconnect() VoodooDebounce = false PlantDebounce = false HarvestDebounce = false end)
            end)
            
            
                local Ores = {}
            
                local function AddOreToTable(model)
                    local Con1
                    
                    if table.find(allowedOresforESP, tostring(model)) then
                        local totalModelData = {}
                    
                        local TextDrawing = Drawing.new("Text")
                        TextDrawing.Size = 16
                        TextDrawing.Visible = false
                        TextDrawing.Outline = true
                        TextDrawing.Center = true
                        TextDrawing.Text = tostring(model)
                        TextDrawing.Color = Color3.fromRGB(23, 174, 212)
                        
                        totalModelData.Drawing = TextDrawing
                        totalModelData.Model = model
                        totalModelData.Name = tostring(model)
                
                        table.insert(Ores, totalModelData)
                        
                        Con1 = model.AncestryChanged:Connect(function(old,new)
                            if old == nil or new == nil then
                                Con1:Disconnect()
                            end
                        end)
                    end
                end
            
                Connections.MapComponents = RunService.RenderStepped:Connect(function()
                    for i,v in pairs(Ores) do
                        if v.Model ~= nil and v.Drawing ~= nil then
                            if OreESPToggle and ShownOres[tostring(v.Model)] == true then
                                local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:GetModelCFrame().Position + Vector3.new(0, 2, 0))
                                if OnScreen then
                                    if ShowOreESPDistance then
                                        local Distance = (Player.Character.HumanoidRootPart.Position-v.Model:GetModelCFrame().Position).Magnitude
            
                                        if ShowOreHealth then
                                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m] " .. tostring(v.Model:FindFirstChild("Health").Value) .. " HP"
                                        else
                                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m]"
                                        end
                                    else
                                        if ShowOreHealth then
                                            v.Drawing.Text = v.Name .. " " .. tostring(v.Model:FindFirstChild("Health").Value) .. " HP"
                                        else
                                            v.Drawing.Text = v.Name
                                        end
                                    end
                                    v.Drawing.Visible = true
                                    if v.Model:FindFirstChild("Small Rock") then
                                        v.Drawing.Color = v.Model["Small Rock"].BrickColor.Color
                                    elseif v.Model:FindFirstChild("Totem") then
                                        v.Drawing.Color = v.Model.Totem.BrickColor.Color
                                    elseif v.Model:FindFirstChild("Feather Stone") then
                                        v.Drawing.Color = v.Model["Feather Stone"].BrickColor.Color
                                    else
                                        v.Drawing.Color = Color3.fromRGB(0, 162, 255)
                                    end
                                    v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                            end
                        else
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(Ores, i)
                        end
                    end
                end)
            
                    for i,v in pairs(workspace:GetChildren()) do
                        if v:IsA("Model") then
                            AddOreToTable(v)
                        end
                    end
                    workspace.ChildAdded:Connect(LPH_NO_VIRTUALIZE(function(child)
                        if child:IsA("Model") then
                            AddOreToTable(child)
                        end
                    end))
                    workspace.ChildRemoved:Connect(LPH_NO_VIRTUALIZE(function(child)
                        for i,v in pairs(Ores) do
                            if v.Model == child then
                                v.Model = nil
                            end
                        end
                    end))
            
                local PlayerESP = {}
            
                local function AddPlayerToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    for i,v in pairs(PlayerESP) do
                        if tostring(v.Name) == tostring(model) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = PlayerESPColor
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
                    
                    table.insert(PlayerESP, totalModelData)
                end
            
                RunService.RenderStepped:Connect(function()
                    for i,v in pairs(PlayerESP) do
                        if v.Model ~= nil and v.Drawing ~= nil then
                            if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Vector3.new(0,3,0))
                                if OnScreen and PlayerESPToggle then
                                    if HealthESP and v.Model:FindFirstChildOfClass("Humanoid") then
                                        local healthString = tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").Health)) .. "/" .. tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").MaxHealth))
                                        v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)) .. "m]" .. " [" .. healthString .. "]"                         
                                    else
                                        v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)) .. "m]"                         
                                    end
                                    if ShowTribeColor then
                                        v.Drawing.Color = v.Model:FindFirstChild("UpperTorso").Color
                                    else
                                        v.Drawing.Color = PlayerESPColor
                                    end
                                    v.Drawing.Visible = true
                                    v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                            end
                        else
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                end)
            
                for i,v in pairs(Players:GetPlayers()) do
                    if v ~= Player then
                        if v.Character then
                            AddPlayerToTable(v.Character)
                        end
                        v.CharacterAdded:Connect(function(char)
                            AddPlayerToTable(char)
                        end)
                    end
                end
                Players.PlayerAdded:Connect(function(p)
                    p.CharacterAdded:Connect(function(char)
                        AddPlayerToTable(char)
                    end)
                end)
            
                Players.PlayerRemoving:Connect(function(p)
                    for i,v in pairs(PlayerESP) do
                        if tostring(v.Name) == tostring(p) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                end)
            
                -- armor esp fuck u
                local ArmorESP = {}
            
                local function AddPlayerArmorToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    for i,v in pairs(ArmorESP) do
                        if tostring(v.Name) == tostring(model) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(ArmorESP, i)
                        end
                    end
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 12
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = "null"
                    TextDrawing.Color = PlayerESPColor
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
                    
                    table.insert(ArmorESP, totalModelData)
                end
            
                Connections.mainloopforarmoresp = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                    for i,v in pairs(ArmorESP) do
                        if v.Model ~= nil and v.Drawing ~= nil then
                            if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                local Offset = Vector3.new(0,0,0)
                                if ArmorPosition == "Left" then
                                    Offset = Vector3.new(0,0,5)
                                elseif ArmorPosition == "Right" then
                                    Offset = Vector3.new(0,0,-5)
                                elseif ArmorPosition == "Down" then
                                    Offset = Vector3.new(0,-3.5,0)
                                end
                                local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Offset)
                                if OnScreen and ShowArmor then
                                    local equipped = "\n"
                                    for i2,v2 in pairs(v.Model:GetChildren()) do
                                        if v2:IsA("Accessory") and table.find({"torso", "head", "leg", "legs"}, tostring(v2:FindFirstChildOfClass("BoolValue"))) then
                                            equipped = equipped .. tostring(v2) .. "\n"
                                        end
                                    end
                                    v.Drawing.Text = tostring(equipped) or ""
                                    v.Drawing.Color = ArmorColor
                                    v.Drawing.Size = ArmorSize
                                    v.Drawing.Visible = true
                                    v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                            end
                        else
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(ArmorESP, i)
                        end
                    end
                end))
            
                for i,v in pairs(Players:GetPlayers()) do
                    if v ~= Player then
                        if v.Character then
                            AddPlayerArmorToTable(v.Character)
                        end
                        v.CharacterAdded:Connect(function(char)
                            AddPlayerArmorToTable(char)
                        end)
                    end
                end
                Players.PlayerAdded:Connect(function(p)
                    p.CharacterAdded:Connect(function(char)
                        AddPlayerArmorToTable(char)
                    end)
                end)
            
                Players.PlayerRemoving:Connect(function(p)
                    for i,v in pairs(ArmorESP) do
                        if tostring(v.Name) == tostring(p) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(ArmorESP, i)
                        end
                    end
                end)
            
                -- hut noclip stuff
                
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if v:IsA("Model") and v:FindFirstChild("Door") then
                        if HubNoClip then
                            v.Door.CanCollide = false
                            v.Door.Transparency = 0.7
                        end
                    end
                end
                workspace.Deployables.ChildAdded:Connect(LPH_NO_VIRTUALIZE(function(v)
                    if v:IsA("Model") and v:FindFirstChild("Door") then
                        if HubNoClip then
                            v.Door.CanCollide = false
                            v.Door.Transparency = 0.7
                        end
                    end
                end))

            
                CraftBox:AddDropdown('Craft Set', {
                    Values = { 'Leaf Set', 'Hide Set', 'Iron Set', 'Steel Set', 'Adurite Set', 'Crystal Set', 'Magnetite Set','Emerald Set', 'Pink Diamond Set', 'Void Set', 'God Set'},
                    Default = 1, -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Set',
                    Tooltip = 'Set to choose to craft', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        sets = Value
                    end
                })
                CraftBox:AddButton({
                    Text = 'Craft Set',
                    DoubleClick = false,
                    Tooltip = 'Crafts a full set of armor',
                    Func = function()
                if sets == "Leaf Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Leaf Shirt")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Leaf Pants")
                elseif sets == "Hide Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Hide Pants")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Hide Shirt")
                elseif sets == "Iron Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Iron Helmet")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Iron Greaves")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Iron Chestplate")
                elseif sets == "Steel Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Steel Helmet")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Steel Greaves")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Steel Helmet")
                elseif sets == "Adurite Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Adurite Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Adurite Helmet")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Adurite Greaves")
                elseif sets == "Crystal Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Crystal Crown")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Crystal Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Crystal Greaves")
                elseif sets == "Magnetite Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Magnetite Mask")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Magnetite Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Magnetite Greaves")
                elseif sets == "Emerald Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Emerald Helmet")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Emerald Greaves")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Emerald Chestplate")
                elseif sets == "Pink Diamond Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Pink Diamond Hood")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Pink Diamond Greaves")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Pink Diamond Chestplate")
                elseif sets == "Void Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Void Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Void Shroud")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Void Greaves")
                elseif sets == "God Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("God Halo")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("God Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("God Legs")
                end
            end})
            

            -- teleport stuff
            TeleportBox:AddButton({
                Text = "Teleport to OverWorld",
                DoubleClick = false,
                Tooltip = "teleports u to the OverWorld",
                Func = function() 
                    TeleportService:Teleport(11729688377, Player)
                end
            })
                TeleportBox:AddButton({
                    Text = "Void Lower Player Server",
                    DoubleClick = false,
                    Tooltip = "teleports to a lower player void server",
                    Func = function() 
                        -- Lower Player Server Void
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11879754496 
            local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
            function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
            end
            
            local Server, Next; repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
                    end
                })
            
                TeleportBox:AddButton({
                    Text = "Void Higher Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a higher player void server",
                    Func = function() 
                    -- Higher Player Void 
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11879754496 
            local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
            
            function ListServers(cursor)
                local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                return Http:JSONDecode(Raw)
            end
            
            local Server, Next;
            repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
                    end
                })
            
                TeleportBox:AddButton({
                    Text = "Overworld Higher Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a higher player overworld server",
                    Func = function() 
                    -- highest server script overworld
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11729688377
            local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
            
            function ListServers(cursor)
                local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                return Http:JSONDecode(Raw)
            end
            
            local Server, Next;
            repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Overworld Lower Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a lower player overworld server",
                    Func = function() 
                    -- Lower Player Server Overworld
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11729688377
            local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
            function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
            end
            
            local Server, Next; repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Server Hop",
                    DoubleClick = false,
                    Tooltip = "Server hops to another server",
                    Func = function() 
                        local Player = game.Players.LocalPlayer    
                        local Http = game:GetService("HttpService")
                        local TPS = game:GetService("TeleportService")
                        local Api = "https://games.roblox.com/v1/games/"
                        
                        local _place,_id = game.PlaceId, game.JobId
                        local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
                        function ListServers(cursor)
                        local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                        return Http:JSONDecode(Raw)
                        end
                        
                        local Next; repeat
                        local Servers = ListServers(Next)
                        for i,v in next, Servers.data do
                            if v.playing < v.maxPlayers and v.id ~= _id then
                                local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
                                if s then break end
                            end
                        end
                        
                        Next = Servers.nextPageCursor
                        until not Next
                    end
                })
            
            -- library shit
            Library.KeybindFrame.Visible = false; -- todo: add a function for this
            
            Library:OnUnload(function()
                for i,v in pairs(Connections) do v:Disconnect() end
                for i2,v2 in pairs(Ores) do if v2.Drawing then v2.Drawing:Remove() table.remove(Ores, i2) end end
                for i3,v3 in pairs(PlayerESP) do if v3.Drawing then v3.Drawing:Remove() table.remove(PlayerESP, i3) end end
                for i4,v4 in pairs(ArmorESP) do if v4.Drawing then v4.Drawing:Remove() table.remove(ArmorESP, i4) end end
                BreakPoint = true
                Library.Unloaded = true
            end)
            
            local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
            
            MenuGroup:AddButton('Unload', function() Library:Unload() end)
            MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
            
            Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu
            
            ThemeManager:SetLibrary(Library)
            SaveManager:SetLibrary(Library)
            SaveManager:IgnoreThemeSettings()
            SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
            ThemeManager:SetFolder('Exceros Hub')
            SaveManager:SetFolder('Exceros Hub/Booga Booga Reborn')
            SaveManager:BuildConfigSection(Tabs['UI Settings'])
            ThemeManager:ApplyToTab(Tabs['UI Settings'])
            SaveManager:LoadAutoloadConfig()
        end
    else
        do -- overworld
            local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
            local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
            local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()
            
            local Window = Library:CreateWindow({
                Title = "Exceros Hub || Booga Booga Reborn || discord.gg/exceros",
                Center = true,
                AutoShow = true,
                TabPadding = 4,
                MenuFadeTime = 0.2
            })
            
            local Tabs = {
                Main = Window:AddTab('Main'),
                PlayerTab = Window:AddTab("Plr"),
                ESP = Window:AddTab("ESP"),
                Crafting = Window:AddTab("Craft"),
                AutoFarming = Window:AddTab("Important"),
                SharkTab = Window:AddTab("MapGoldFarm"),
                AutoFarming1 = Window:AddTab("Tech"),
                Misc = Window:AddTab("Misc"),
                --Valentines = Window:AddTab("❤️Valentines"),
                ['UI Settings'] = Window:AddTab('Sets'),
            }
            
            -- Services
            local VirtualUser = game:GetService("VirtualUser")
            local Player = game:GetService("Players").LocalPlayer
            local Players = game:GetService('Players')
            local RunService = game:GetService("RunService")
            local ReplicatedStorage = game:GetService('ReplicatedStorage')
            local Lighting = game:GetService("Lighting")
            local UserInputService = game:GetService("UserInputService")
            local TweenService = game:GetService("TweenService")
            local TeleportService = game:GetService('TeleportService')
            local HttpService = game:GetService("HttpService")
            local Stats = game:GetService("Stats")
            local DataPing = Stats.Network.ServerStatsItem["Data Ping"]
            local GC = getconnections or get_signal_cons or function() end
        
            -- Connections
            local Connections = {}
            local Hooks = {}
            
            local CombatBox = Tabs.AutoFarming:AddLeftGroupbox("Combat")
            local goldAutofarmBox = Tabs.Main:AddRightGroupbox("Gold/Coin Farm")
            local CampFireBox = Tabs.Main:AddRightGroupbox("Campfire")
            local AutoPlantBox = Tabs.AutoFarming:AddRightGroupbox('Auto Plant')
        --    local SharkFarm1 = Tabs.SharkTab:AddLeftGroupbox('goldfarm around map')
        
            local AutoHarvestBox = Tabs.AutoFarming:AddRightGroupbox('Auto Harvest')
            local tweenfarmbox = Tabs.AutoFarming:AddRightGroupbox('Auto Harvest')
            local EzBox = Tabs.Crafting:AddRightGroupbox("Ez Structure")
            local CraftBox = Tabs.Crafting:AddLeftGroupbox('Crafting Armor')
            local CraftBox4 = Tabs.Crafting:AddRightGroupbox('Crafting Bags')
            local CraftBox2 = Tabs.Crafting:AddRightGroupbox('Crafting Tools')
            local CraftBox3 = Tabs.Crafting:AddLeftGroupbox('Crafting Weapons')
            local AutoHealBox = Tabs.Main:AddLeftGroupbox('Auto Heal')
            local AutoEatBox = Tabs.Main:AddLeftGroupbox('Auto Eat')
            local PickupBox = Tabs.Main:AddLeftGroupbox('Pickup Specific Item')
            local WasteBox = Tabs.Main:AddLeftGroupbox('Auto Eat at Fruit #')
            local LocalGroupBox = Tabs.PlayerTab:AddLeftGroupbox('Local')
            local KillAuraBox = Tabs.Main:AddRightGroupbox('Kill Aura')
            local CombatBox1 = Tabs.AutoFarming:AddLeftGroupbox("Combat")
            local BowAimbotBox = Tabs.AutoFarming1:AddRightGroupbox("Aimbot")
            local FarmingBox = Tabs.AutoFarming:AddLeftGroupbox("Auto")
            local TeleportBox = Tabs.Misc:AddLeftGroupbox("Teleports")
            local ModBox = Tabs.Misc:AddRightGroupbox('Mod Notifier')
            local AntiBan = Tabs.Misc:AddLeftGroupbox("Script Ban Protection")
            local SphereBox = Tabs.Crafting:AddLeftGroupbox('15x15 Structure')
            local StraightBox = Tabs.PlayerTab:AddRightGroupbox('Look Straight')
            local LBox = Tabs.Crafting:AddLeftGroupbox('L Structure')
            local PenisBox = Tabs.Crafting:AddRightGroupbox('Penis Structure')
            local HutBox = Tabs.Misc:AddLeftGroupbox('Hut Trap Nearest Player')
            local PerformanceBox = Tabs['UI Settings']:AddRightGroupbox("Script Settings")
            local consumeBox = Tabs.Misc:AddRightGroupbox("Eat Dropped Fruit")
            local viewPlayerBox = Tabs.PlayerTab:AddRightGroupbox("Spectate Player")
            local IslandAutoFarm = Tabs.AutoFarming:AddRightGroupbox("Sun Island XP")
            local xrayBox = Tabs.Misc:AddRightGroupbox("X-Ray")
            local equipBox = Tabs.PlayerTab:AddRightGroupbox("Equip Armor")
            local crystalAutofarmBox = Tabs.Main:AddLeftGroupbox("Crystal Farm")
            local autofarmLevelBox = Tabs.AutoFarming:AddRightGroupbox("Auto Level Farm")
            local MacrosBox = Tabs.AutoFarming1:AddLeftGroupbox("Macros")
            local BoatModifier = Tabs.SharkTab:AddRightGroupbox("Boats")
            local PlayerTab = Tabs.PlayerTab:AddRightGroupbox('Cool stuff')
            local WebhookHandler = Tabs.AutoFarming1:AddRightGroupbox("Webhooks")
            local LightingBox = Tabs.PlayerTab:AddLeftGroupbox("Lighting")
            local SharkFarm4 = Tabs.AutoFarming1:AddLeftGroupbox('Tween Teleport #10 Pos')
            local SharkFarm1 = Tabs.SharkTab:AddLeftGroupbox('goldfarm around map')
            local SharkFarm2 = Tabs.SharkTab:AddRightGroupbox('Auto Pickup')
            local SharkFarm3 = Tabs.SharkTab:AddLeftGroupbox('Put this at 5-7 for humanoid')





            --local HeartsGB = Tabs.Valentines:AddLeftGroupbox("Valentine's Update")
            -- local AutoCollectPumpkins = Tabs.Halloween:AddLeftGroupbox("Auto Pumpkin Collect")
            local TreasureESP = Tabs.ESP:AddLeftGroupbox("Treasure Chest ESP")
            -- esp groubpxoes
            local OreESPBox = Tabs.ESP:AddLeftGroupbox("Ore ESP")
            local PlayerESPBox = Tabs.ESP:AddRightGroupbox("Player ESP")
            
            -- variables
            AllFruits = {
                "Cloud Berry",
                "Bloodfruit",
                "Bluefruit",
                "Orange",
                "Apple",
                "Berry",
                "Sun Fruit",
                "Odd Berry",
                "Strawberry",
                "Lemon"
            }
        --auto press coins
            SunIslandFarm = false
            xpfarmtween = 8
            wastefruit = "Bloodfruit"
            WasteEat = false
            wastefruitnumber = 1000
            scriptbanprotection = true
            autoeatfood = "Bloodfruit"
            autoeatpercentage = 0.7
            autoeat = false
            sets1 = "Leaf Set"
            transparent = false
            lookstraight = false
            specificpickup = false
            pickupitem = {}
            coinpress = false
            lockplayerallowed = false
            coinpressrange = 15
            lockrange = 10
            AntiDock = false
            Big_Ol_Hut = "Big Ol' Hut"
            hut = "Big Ol' Hut"
            ModNotify = true
            campfireradius = 15
            CampfireAura = false
            CampfireMaterial = "Wood"
            AutoDropItem = "Bloodfruit"
            AutoDrop = false
            sets = "Leaf Set"
            AutoHarvest = false
            AutoPlant = false
            WalkSpeedToggled = false
            WalkSpeedValue = 16
            JumpPowerToggled = false
            JumpPowerValue = 7.2
            AutoKillCritters = false
            AutoKillCrittersRange = 12
            KillAuraPlayers = false
            KillAuraPlayersRange = 12
            AutoMineResources = false 
            AutoMineResourcesRange = 20
            InfiniteJump = false
            AutoPickup = false
            AuotPickupRange = 25
            AutoFarm = false
            AutoHeal = false
            SelectedFruit = "Bloodfruit"
            OnlyFruit = "Bloodfruit"
            FruitToEat = {["Bloodfruit"]=true}
            AutoHealAt = 75
            PlantFruitRange = 75
            CollectFruitRange = 75
            OreESPToggle = false
            ShowOreESPDistance = false
            ShowOreHealth = false
            ShownOres = {}
            HitboxExpander = false
            HitboxExpanderShown = false
            HitboxExpanderRange = 12
            PlayerESPToggle = false
            ShowArmor = false
            ArmorColor = Color3.fromRGB(202, 131, 25)
            ArmorPosition = "Down"
            ArmorSize = 13 
            PlayerESPColor = Color3.fromRGB(148, 50, 205)
            ShowTribeColor = false
            HealthESP = false
            ItemToDrop = ""
            SpoofPart = "Head"
            SpoofPartToggle = false
            VoodooBoltNearby = false
            AutoVoodooShield = false
            AutoVoodooShieldHealth = 75
            ShowArmorColor = false
            TweenSpeed = 12
            SunIslandFarm = false
            KillAncientTree = false
            SpectatePlayerToggle = false
            CurrentPlayerFindString = ""
            ScriptMode = "Default"
            consume = false
            GoldFarm = false
            BreakIceInstead = false
            AutoCookGold = false
            AutoPressCoins = false
            AutoCollectCoins = false
            MovementMethod = "Tween"
            MacroSelected = ""
            Recording = false
            MacroName = ""
            ShowMacroFrames = false
            MacrosAvailable = {}
            LoopPlayMacro = false
            HeadSizeToggle = false
            HeadSizeVariable = 6
            UseAnimation = false
            IsAnimationPlaying = false
            mountainclimber = false
            HubNoClip = false
            PlayerNoClip = false
            BoatSpeedToggle = false
            BoatSpeed = 15
            FlyToggle = false
            FlySpeed = 1000
            PlantFarmWebhook = ""
            GoldFarmWebhook = ""
            MojoFarmWebhook = ""
            LastGoldFarm = tick()
            TotalGoldFarm = tick()
            LastPlantFarm = tick()
            TotalPlantFarm = tick()
            TotalRebirthFarm = tick()
            LastRebirthFarm = tick()
            CurrentGold = nil
            CurrentFruit = nil
            CurrentMojos = nil
            LogTimePlant = 1800
            LogTimeMojo = 1800
            LogTimeGold = 1800
            FullBright = false
            Ambience = false
            AmbienceColor = Color3.fromRGB(255,255,255)
            ColorShift = false
            ColorShiftColor = Color3.fromRGB(255,255,255)
            OutDoorAmbient = false
            OutDoorAmbienceColor = Color3.fromRGB(255,255,255)
            BowAimbot = false 
            ShowVisualizer = false
            Visualizer = Drawing.new("Circle")
            Visualizer.Visible = false
            VisualizerSides = 64
            VisualizerColor = Color3.fromRGB(255,255,255)
            VisualizerTransparency = 0.5
            VisualizerRadius = 80
            VisualizerFilled = false
            VisualizerThickness = 0
            FuncFoundForAimbot = nil
            YOFFSET = 2
            CrystalAutoFarm = false
            CrystalFarmDistance = 100
            CrystalTweenSpeed = 10
            HealLoop = 1
            NoFog = false
            MacroSpeed = 12
            TreasureChestESPToggle = false
            TreasureChestColor = Color3.fromRGB(245, 158, 66)
            AutoLevelFarm = false
            AutoRebirth = false
        
            -- PACKETS IMPORTANT
            local Packets = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Packets"))
            local ItemIDs = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("ItemIDS"))
        
            -- HALLOWEEN
            --autocollectpumpkins = false
            --autobreakpumpkinpatches = false
        
            -- VALENTINES
            heartesptoggle = false
        
            local getTableSize = LPH_NO_VIRTUALIZE(function(tbl)
                local c = 0
                for i,v in pairs(tbl) do c = c + 1 end
                return c
            end)
--campfire

            local function GetEntityID(model)
                return model:GetAttribute("EntityID")
            end

            
        
            local getTableIndexArrayValue = LPH_NO_VIRTUALIZE(function(tbl)
                local keys = {}
                for key in pairs(tbl) do table.insert(keys, key) end
                local randomIndex = math.random(1, getTableSize(keys))
                local randomKey = keys[randomIndex]
                return randomKey
            end)
        
            local tribeCheck = LPH_NO_VIRTUALIZE(function(p1, p2)
                if p1 and p2 then
                    local upperTorso1, upperTorso2 = p1:FindFirstChild("UpperTorso"), p2:FindFirstChild("UpperTorso")
                    if upperTorso1 and upperTorso2 then
                        if upperTorso1.Color == Color3.fromRGB(108, 88, 75) and upperTorso2.Color == Color3.fromRGB(108, 88, 75) then
                            return false
                        else
                            if upperTorso1.Color == upperTorso2.Color then
                                return true
                            end
                        end
                    end
                end
                return false
            end)
            
            local GetAliveBird = LPH_NO_VIRTUALIZE(function()
                local ClosestBird, MaxDistance = nil, math.huge
                for _,v in pairs(workspace.Critters:GetChildren()) do
                    if v.Name == "Bird" and v:FindFirstChild("Health") and v:FindFirstChild("Beak") then
                        local Distance = (Player.Character.HumanoidRootPart.Position - v.Beak.Position).Magnitude
                        if Distance <= MaxDistance then
                            ClosestBird = v
                            MaxDistance = Distance
                        end
                    end
                end
                return ClosestBird, MaxDistance
            end)
        
            local EquipToolByString = LPH_NO_VIRTUALIZE(function(ToolString)
                if Player.Character and not Player.Character:FindFirstChild(ToolString) then
                    local InventoryUI = Player.PlayerGui.MainGui.RightPanel.Inventory.List
                    local ToolbarUI = Player.PlayerGui.MainGui.Panels.Toolbar.List
                    if InventoryUI and ToolbarUI then
                        if InventoryUI:FindFirstChild(ToolString) then
                            -- print(ToolString, "Located in Inventory, Retooling, INDEX:",InventoryUI:FindFirstChild(ToolString):GetAttribute("Index"))
                            local ToolInInventory = InventoryUI:FindFirstChild(ToolString)
                            Packets["UseBagItem"]["send"](ToolInInventory:GetAttribute("Index"))
                            -- print(ToolString, "Located in Inventory, Retooling...")
                        end
                        for i,v in pairs(ToolbarUI:GetChildren()) do
                            if v:IsA("ImageButton") then
                                local Image = v.Image
                                if Image ~= "" then
                                    local imageId = string.split(Image, "id=")[2]
                                    if imageId == "1450140493" then
                                        Packets['EquipTool']['send'](tonumber(v.Name))
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        
            local getClosestPumpkin = LPH_NO_VIRTUALIZE(function()
                local Closest, Distance = nil, math.huge
                for i,v in pairs(workspace.pumpkins:GetChildren()) do
                    if string.find(v.Name, "Pumpkin") and v:FindFirstChild("Reference") then
                        local Magnitude = (Player.Character.HumanoidRootPart.Position - v.Reference.Position).Magnitude
                        if Magnitude <= Distance then
                            Closest = v.Reference
                            Distance = Magnitude
                        end
                    end        
                end
                return Closest, Distance
            end)
        
            local getClosestPumpkinPatch = LPH_NO_VIRTUALIZE(function()
                local Closest, Distance = nil, math.huge
                for i,v in pairs(workspace:GetChildren()) do
                    if v.Name == "Pumpkin Patch" and v:FindFirstChild("Reference") then
                        local Magnitude = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Reference.Position).Magnitude
                        if Magnitude <= Distance then
                            Closest = v.Reference
                            Distance = Magnitude
                        end
                    end        
                end
                return Closest, Distance
            end)
        
            -- macro folder
            MacroPositionFolder = Instance.new("Folder")
            MacroPositionFolder.Parent = workspace
            MacroPositionFolder.Name = "\000"
        
            -- loop breaker
            BreakPoint = false
            
            -- stuff for auto farm levels
            LastSpawned = tick()
            LastBird = tick()
            SpawnDebounce = false
            MojoClaimDebounce = false
            -- anti afk
            task.spawn(function()
                for i,v in pairs(getconnections(Player.Idled)) do
                    v:Disable()
                end
                Player.Idled:Connect(function()
                    VirtualUser = game:GetService("VirtualUser")
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end)
        
            -- character tick thing
            task.spawn(function()
                if Player.Character then
                    LastSpawned = tick()
                    local Humanoid = Player.Character:WaitForChild("Humanoid")
                    local C; C = Humanoid.Died:Connect(function()
                        LastSpawned = tick()
                        C:Disconnect()
                    end)
                end
                Player.CharacterAdded:Connect(function(Char)
                    LastSpawned = tick()
                    local Humanoid = Char:WaitForChild("Humanoid")
                    local C; C = Humanoid.Died:Connect(function()
                        LastSpawned = tick()
                        C:Disconnect()
                    end)
                end)
            end)
        
            -- chat bar focused
            chatBarFocused = false
            UserInputService.TextBoxFocused:Connect(function(textBox)
                chatBarFocused = true
            end)
            UserInputService.TextBoxFocusReleased:Connect(function(textBox)
                chatBarFocused = false
            end)
        
            local function SendWebhook(Title, Description, Farm)
                local Data = {
                    ["content"] = "",
                    ["embeds"] = {{
                        ["title"] = tostring(Title),
                        ['description'] = tostring(Description),
                        ['color'] = 12134440,
                        ['author'] = {
                        ['name'] = tostring(Farm),
                        ['url'] = "https://discord.gg/sathub",
                        ['icon_url'] = "https://cdn.discordapp.com/attachments/1042591843923283968/1142989424955768913/charizard.png"
                        },
                        ['footer'] = {
                            ['text'] = "Saturn Hub"
                        },
                        ['timestamp'] = DateTime.now():ToIsoDate()
                    }},
            
                }
                local JsonEncode = HttpService:JSONEncode(Data)    
                return JsonEncode
            end
        
            -- hook
            autofarmLevelBox:AddToggle("Auto Level Farm", {
                Text = 'Auto Level Farm',
                Default = false,
                Tooltip = 'Autofarms levels for u', 
                Callback = function(Value)
        
                    LastSpawned = tick()
                    LastBird = tick()
                    SpawnDebounce = false
                    MojoClaimDebounce = false
        
                    AutoLevelFarm = Value
                end
            })
            autofarmLevelBox:AddToggle('Auto Rebirth', {
                Text = 'Auto Rebirth',
                Default = false,
                Tooltip = 'rebirths when you are level 100 (RECOMMENDED TO HAVE ON)', 
                Callback = function(Value)
        
                    TotalRebirthFarm = tick()
                    LastRebirthFarm = tick()
                    LastSpawned = tick()
                    LastBird = tick()
                    SpawnDebounce = false
                    MojoClaimDebounce = false
                    CurrentMojos = tonumber(getrenv()._G.data.mojo)
        
                    AutoRebirth = Value
                end
            })
        
            -- crystal farm
            crystalAutofarmBox:AddToggle('Crystal Autofarm', {
                Text = 'Crystal Autofarm',
                Default = false,
                Tooltip = 'Crystal Autofarm', 
                Callback = function(Value)
                    CrystalAutoFarm = Value
                end
            })
        
            crystalAutofarmBox:AddSlider('Crystal Distance', {
                Text = 'Crystal Distance',
                Default = 100,
                Min = 0,
                Max = 250,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    CrystalFarmDistance = Value
                end
            })
        
            crystalAutofarmBox:AddSlider('Tween Speed', {
                Text = 'Tween Speed',
                Default = 10,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    CrystalTweenSpeed = Value
                end
            })
        
            --
            TreasureESP:AddToggle('Treasure ESP', {
                Text = 'Treasure ESP',
                Default = false,
                Tooltip = 'Treasure ESP', 
                Callback = function(Value)
                    TreasureChestESPToggle = Value
                end
            }):AddColorPicker('Treasure Color', {
                Default = Color3.fromRGB(245, 158, 66), 
                Title = 'Treasure Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    TreasureChestColor = Value
                end
            })
        
            -- aimbot
            BowAimbotBox:AddToggle('Bow Aimbot', {
                Text = 'Bow Aimbot',
                Default = false,
                Tooltip = 'Bow Aimbot', 
                Callback = function(Value)
                    BowAimbot = Value
                end
            })
        




            local D
            SharkFarm4:AddButton({
                Text = "Tp #1",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    D = nil
                    wait()
                    D = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })


            SharkFarm2:AddDropdown('Items', {
                    Values = { 'Gold','Raw Gold','Coin2','Magnetite','Raw Magnetite','Raw Iron', 'Crystal Chunk', 'Emerald', 'Pink Diamond', 'Void Shard', 'Essence', 'Log','Leaves','Wood','Iron','Berry','Bloodfruit','Stone','Egg'},
                    Default = 1, -- number index of the value / string
                    Multi = true, -- true / false, allows multiple choices to be selected
                
                    Text = 'Items',
                    Tooltip = 'Items to pickup', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        pickupitem = Value
                    end
                })
                SharkFarm2:AddToggle('Pick up items', {
                    Text = 'Pickup Items',
                    Default = false,
                    Tooltip = 'Toggle on/off item pickup', 
                    Callback = function(Value)
                        specificpickup = Value
                    end
                })
--coin presses coins
                SharkFarm1:AddSlider('WaitTimeSlider', {
                    Text = 'speed',
                    Default = 15,
                    Min = 0,
                    Max = 30,
                    Rounding = 1,
                    Compact = false,
                    Callback =function(value)
                        speed = value
                    end
                })


                local TweenService = game:GetService("TweenService")
                local speed = 23 -- Initial speed in studs per second                                 18                      26          29  30                       33                                                     56 64          53
                local waitTimes = {1.8, 1.8, 1.8, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 1.8, 0, 0, 0, 0, 1.8, 1.8, 1.8, 1.8, 0, 0, 0, 0, 0, 0, 1.8, 0, 1.8, 1.8, 0, 0, 0, 0, 0, 0, 0, 1.8, 0, 0, 0, 0, 1.8, 0, 0, 0, 1.8, 0, 0, 0, 0, 1.8, 0, 0, 0, 0, 1.8, 1.8, 0, 0, 0, 0, 0, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.8, 1.8, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.8, 1.8, 1.8, 1.8, 0, 0, 0, 0, 1.8, 0, 1.8, 0, 0, 0, 0, 0, 0, 1.8, 0, 1.8, 0, 0, 1.8, 0, 0, 1.8, 0, 1.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} -- Array of wait times corresponding to each tween
                local targetPositions = {
                    -- Spawn at ice nodes (4)
                    -- 4 Gold Nodes
                    CFrame.new(Vector3.new(915.2814331054688, -2.5274174213409424, -1385.6158447265625)), -- 4 Gold Nodes Bottom left
                    CFrame.new(Vector3.new(912.7943115234375, -1.6242637634277344, -1413.04833984375)), -- Bottom right
                    CFrame.new(Vector3.new(944.5631103515625, -1.5960471630096436, -1428.4208984375)), -- Top Left Node
                    CFrame.new(Vector3.new(958.9597778320312, -3.0000007152557373, -1391.968017578125)), -- Top Right
                    -- Going towards 4 nodes at mountain
                    CFrame.new(Vector3.new(893.2815551757812, -7.000373363494873, -969.5551147460938)), -- Adjusted to make it more direct
                    CFrame.new(Vector3.new(786.5398559570312, -3.0000007152557373, -718.9921875)),
                    CFrame.new(Vector3.new(641.176513671875, -3.855578899383545, -539.2426147460938)),
                    CFrame.new(Vector3.new(606.1619873046875, 32.754493713378906, -486.9465026855469)),
                    CFrame.new(Vector3.new(629.888427734375, 51.95648193359375, -433.0956115722656)),
                    CFrame.new(Vector3.new(642.2515258789062, 55.56715393066406, -418.8298645019531)),
                    CFrame.new(Vector3.new(650.3762817382812, 66.8869857788086, -409.7201843261719)),
                    CFrame.new(Vector3.new(666.4571533203125, 81.0921859741211, -393.62176513671875)),
                    -- Single node on mountain
                    CFrame.new(Vector3.new(688.4791870117188, 87.61669921875, -394.652099609375)), -- Node on top of mountain
                    -- Going to the 4 nodes in the mountain
                    CFrame.new(Vector3.new(666.319091796875, 70.99797058105469, -370.13189697265625)),
                    CFrame.new(Vector3.new(642.205810546875, 53.215579986572266, -367.0735168457031)),
                    CFrame.new(Vector3.new(606.570556640625, 28.03556251525879, -357.19976806640625)),
                    CFrame.new(Vector3.new(583.2708129882812, 14.1685791015625, -349.2284851074219)),
                    -- Start of the 4 nodes at the mountain
                    CFrame.new(Vector3.new(608.3096923828125, -5.825555324554443, -352.3447265625)), -- First Node -- Bottom right
                    CFrame.new(Vector3.new(622.8633422851562, -4.749398231506348, -357.05206298828125)), -- Second node -- Top right
                    CFrame.new(Vector3.new(638.2216796875, -1.9700599908828735, -381.2216491699219)), -- Top left gold node
                    CFrame.new(Vector3.new(613.03955078125, -3.3478689193725586, -387.1720886230469)), -- Bottom left gold node -- 21
                    -- Going out of the 4 gold node mountain
                    CFrame.new(Vector3.new(552.1689453125, 10.88880729675293, -391.5129699707031)), -- outside the enterence
                    CFrame.new(Vector3.new(510.2638854980469, -3.4913477897644043, -389.0484924316406)), -- Onto the ground
                    --Heading towards the 3 gold nodes near water fall
                    CFrame.new(Vector3.new(206.7015380859375, -3, -392.4203796386719)), 
                    CFrame.new(Vector3.new(125.72357177734375, -3, -367.7125244140625)),
                    CFrame.new(Vector3.new(11.849638938903809, -3, -273.90325927734375)),
                    CFrame.new(Vector3.new(-104.69710540771484, -3.0002832412719727, -224.1416015625)),
                    -- 3 Gold Nodes near waterfall
                    CFrame.new(Vector3.new(-127.7438735961914, -7.123413562774658, -203.4132843017578)), -- Top Gold node
                    CFrame.new(Vector3.new(-119.87413024902344, -25.971975326538086, -193.47650146484375)), -- Tps down to the second highest gold node at a safe spot
                    CFrame.new(Vector3.new(-109.06890869140625, -23.964372634887695, -187.114501953125)), -- Tps to the second highest gold node to break it
                    CFrame.new(Vector3.new(-146.6690216064453, -29.13951873779297, -166.2297821044922)), -- Third gold node at the bottom -- 31
                    -- Goes down into the underground
                    CFrame.new(Vector3.new(-78.91585540771484, -35.0000114440918, -114.45983123779297)), -- Tps to the ground
                    CFrame.new(Vector3.new(-57.03752136230469, -35.27948760986328, -104.7385025024414)), -- At the enterence of the underground
                    CFrame.new(Vector3.new(24.822755813598633, -35.0000114440918, -61.54426574707031)), -- Near the turning left
                    CFrame.new(Vector3.new(70.70474243164062, -45.68882369995117, -41.72166061401367)), -- At the end wall near the turning left
                    CFrame.new(Vector3.new(78.14912414550781, -72.6690902709961, -119.64269256591797)), -- near the bottom
                    CFrame.new(Vector3.new(76.23568725585938, -75.1935043334961, -143.13555908203125)),
                    CFrame.new(Vector3.new(26.672353744506836, -75.03893280029297, -112.16252899169922)),
                    -- 1 Gold node near enterence of the cave
                    CFrame.new(Vector3.new(6.2319817543029785, -79.60725402832031, -80.90323638916016)), -- Gold node
                    -- Going to other nodes
                    CFrame.new(Vector3.new(-3.0255465507507324, -83.4150619506836, -161.24505615234375)), 
                    CFrame.new(Vector3.new(-46.13719177246094, -84.78394317626953, -210.84336853027344)),
                    CFrame.new(Vector3.new(-171.44276428222656, -87.3593978881836, -258.4068603515625)),
                    CFrame.new(Vector3.new(-230.35887145996094, -83.01371765136719, -254.90994262695312)),
                    -- 1 Gold node near water
                    CFrame.new(Vector3.new(-248.11705017089844, -82.01800537109375, -242.68406677246094)),
                    -- Going to more nodes
                    CFrame.new(Vector3.new(-235.50645446777344, -95.69903564453125, -205.97381591796875)),
                    CFrame.new(Vector3.new(-201.13409423828125, -95.00701141357422, -100.48636627197266)),
                    CFrame.new(Vector3.new(-51.05535125732422, -95.09739685058594, -16.503742218017578)),
                    -- 1 Node
                    CFrame.new(Vector3.new(-18.18035316467285, -88.2457275390625, -4.662241458892822)), -- On top of the node
                    -- Going back for more nodes
                    CFrame.new(Vector3.new(-121.60362243652344, -95.46952819824219, -44.21466064453125)),
                    CFrame.new(Vector3.new(-226.48095703125, -95.75582122802734, -137.62271118164062)), -- 50
                    CFrame.new(Vector3.new(-311.2962341308594, -95.0000228881836, -62.702903747558594)),
                    CFrame.new(Vector3.new(-330.52532958984375, -91.57213592529297, -51.29126739501953)),
                    -- 1 node
                    CFrame.new(Vector3.new(-337.6909484863281, -87.902587890625, -44.36483383178711)), -- On top of node -- 53
                    -- Going away
                    CFrame.new(Vector3.new(-328.63311767578125, -91.01595306396484, -75.27430725097656)), -- 54
                    CFrame.new(Vector3.new(-320.9810791015625, -84.55455017089844, -112.79277038574219)),
                    CFrame.new(Vector3.new(-311.7552185058594, -80.34954071044922, -111.021240234375)),
                    CFrame.new(Vector3.new(-287.1490173339844, -71.30132293701172, -90.15459442138672)),
                    -- 2 Nodes
                    CFrame.new(Vector3.new(-242.28013610839844, -69.51567077636719, -70.7128677368164)),
                    CFrame.new(Vector3.new(-236.10598754882812, -71.55790710449219, -82.93661499023438)),
                    -- Going away
                    CFrame.new(Vector3.new(-262.2549743652344, -71.92373657226562, -78.05333709716797)),
                    CFrame.new(Vector3.new(-281.7058410644531, -95.24771881103516, -62.516048431396484)),
                    CFrame.new(Vector3.new(-204.44337463378906, -95.3782730102539, -215.5300750732422)),
                    CFrame.new(Vector3.new(-191.27264404296875, -87.3593978881836, -241.33700561523438)),
                    CFrame.new(Vector3.new(-227.31439208984375, -82.79011535644531, -262.97674560546875)),
                    -- 1 Node
                    CFrame.new(Vector3.new(-300.4206237792969, -78.71428680419922, -370.5965576171875)),  -- NEW ONE
                    -- Going away
                    CFrame.new(Vector3.new(-248.25885009765625, -78.9493408203125, -325.4560241699219)),
                    CFrame.new(Vector3.new(-201.70730590820312, -71.25202941894531, -387.3911437988281)),
                    CFrame.new(Vector3.new(-192.30209350585938, -67.08699035644531, -418.3362731933594)),
                    CFrame.new(Vector3.new(-177.47344970703125, -66.61293029785156, -420.8051452636719)),
                    CFrame.new(Vector3.new(-168.78817749023438, -73.24115753173828, -420.8697204589844)),
                    CFrame.new(Vector3.new(-147.6465301513672, -103.0000228881836, -420.92999267578125)),
                    CFrame.new(Vector3.new(-126.42853546142578, -103.0000228881836, -417.2859191894531)),
                    CFrame.new(Vector3.new(15.329987525939941, -101.69576263427734, -415.40478515625)),
                    CFrame.new(Vector3.new(20.97073745727539, -98.90089416503906, -390.7903137207031)),
                    -- 3 Gold nodes
                    CFrame.new(Vector3.new(21.28833770751953, -99.0000228881836, -376.1058044433594)), -- Front gold node
                    CFrame.new(Vector3.new(53.055545806884766, -99.05322265625, -355.8440246582031)), -- Far away gold node
                    CFrame.new(Vector3.new(39.688743591308594, -99.01302337646484, -368.5171203613281)), -- Middle Gold node
                    -- Going away
                    CFrame.new(Vector3.new(21.980361938476562, -98.79778289794922, -389.5634460449219)),
                    CFrame.new(Vector3.new(11.502516746520996, -103.0000228881836, -422.4435119628906)),
                    CFrame.new(Vector3.new(-35.83039093017578, -103.0000228881836, -400.1163024902344)),
                    CFrame.new(Vector3.new(-106.4627456665039, -103.0000228881836, -346.4954833984375)),
                    CFrame.new(Vector3.new(-109.88388061523438, -89.20711517333984, -270.5399475097656)),
                    CFrame.new(Vector3.new(-89.2496566772461, -87.23206329345703, -219.29232788085938)),
                    CFrame.new(Vector3.new(-39.856876373291016, -83.04651641845703, -209.97061157226562)),
                    CFrame.new(Vector3.new(7.984494686126709, -83.09564971923828, -155.0764617919922)),
                    CFrame.new(Vector3.new(50.02766418457031, -75.1011734008789, -141.13885498046875)),
                    CFrame.new(Vector3.new(76.44463348388672, -75.08224487304688, -133.29867553710938)),
                    CFrame.new(Vector3.new(82.40676879882812, -51.47822189331055, -54.51678466796875)),
                    CFrame.new(Vector3.new(42.019683837890625, -36.517791748046875, -43.338565826416016)),
                    CFrame.new(Vector3.new(-33.110538482666016, -35.0000114440918, -147.6772918701172)),
                    CFrame.new(Vector3.new(-7.2733049392700195, -3.0000007152557373, -273.6367492675781)),
                    -- Going to the mountain
                    CFrame.new(Vector3.new(215.0220489501953, -3.0000007152557373, -402.2403564453125)),
                    CFrame.new(Vector3.new(482.00433349609375, -7.002034664154053, -397.1016845703125)),
                    CFrame.new(Vector3.new(547.7274169921875, 10.737629890441895, -394.296875)),
                    -- 4 Gold nodes at mountain
                    CFrame.new(Vector3.new(612.3357543945312, -3.338651180267334, -387.5827331542969)),
                    CFrame.new(Vector3.new(636.9877319335938, -2.5574753284454346, -381.1177673339844)),
                    CFrame.new(Vector3.new(623.9852294921875, -4.704492092132568, -357.38800048828125)),
                    CFrame.new(Vector3.new(609.3678588867188, -4.593686103820801, -350.82940673828125)),
                    -- Going away
                    CFrame.new(Vector3.new(569.9754028320312, 10.83140754699707, -401.6435241699219)),
                    CFrame.new(Vector3.new(563.77197265625, 10.257417678833008, -383.3118896484375)),
                    CFrame.new(Vector3.new(545.0091552734375, -4.519443511962891, -356.3315124511719)),
                    CFrame.new(Vector3.new(484.437255859375, -7.081563949584961, 100.89507293701172)),
                    -- 2 Nodes at sand
                    CFrame.new(Vector3.new(465.3414611816406, 18.63529396057129, 148.40216064453125)), -- Node 1 
                    CFrame.new(Vector3.new(484.7383117675781, 14.45421028137207, 180.80996704101562)), -- Goes into the middle
                    CFrame.new(Vector3.new(466.52752685546875, 14.872398376464844, 234.58738708496094)), -- Last gold node
                    -- Going to sand main area
                    CFrame.new(Vector3.new(499.2276306152344, -3.0000007152557373, 244.4260711669922)),
                    CFrame.new(Vector3.new(963.5517578125, -7.754560947418213, 385.99285888671875)),
                    CFrame.new(Vector3.new(1072.6119384765625, -3.0793397426605225, 387.2690734863281)),
                    CFrame.new(Vector3.new(1259.4644775390625, -9.322108268737793, 376.37701416015625)),
                    CFrame.new(Vector3.new(1299.9752197265625, -27.001705169677734, 456.93572998046875)),
                    CFrame.new(Vector3.new(1218.2529296875, -22.022804260253906, 472.0537414550781)),
                    -- Nodes at sand
                    CFrame.new(Vector3.new(1162.9521484375, -14.7279052734375, 482.2242736816406)), -- Node at enterence dead ahead
                    CFrame.new(Vector3.new(1191.15771484375, -15.02241325378418, 476.37835693359375)), -- Goes into middle
                    CFrame.new(Vector3.new(1185.395263671875, -15.00036907196045, 460.208251953125)), -- Node on right
                    CFrame.new(Vector3.new(1216.8890380859375, -12.563868522644043, 528.6837768554688)), 
                    CFrame.new(Vector3.new(1244.1275634765625, -14.952160835266113, 561.5928955078125)),
                    CFrame.new(Vector3.new(1239.200439453125, -15.900298118591309, 570.3939208984375)), -- Another node
                    CFrame.new(Vector3.new(1282.5621337890625, -15.79450798034668, 620.6126708984375)),
                    CFrame.new(Vector3.new(1317.4539794921875, -15.795480728149414, 659.0906372070312)),
                    CFrame.new(Vector3.new(1280.4825439453125, -18.614084243774414, 689.0258178710938)), -- Gold node
                    CFrame.new(Vector3.new(1313.737548828125, -15.797083854675293, 664.5869140625)),
                    CFrame.new(Vector3.new(1360.52783203125, -18.541244506835938, 680.0048828125)), -- Gold node
                    -- Leaving the cave
                    CFrame.new(Vector3.new(1319.6949462890625, -15.950228691101074, 664.529541015625)),
                    CFrame.new(Vector3.new(1246.6015625, -15.611971855163574, 577.9691772460938)),
                    CFrame.new(Vector3.new(1189.4642333984375, -15.01001262664795, 478.0154724121094)),
                    CFrame.new(Vector3.new(1230.731201171875, -25.774398803710938, 466.1694641113281)),
                    CFrame.new(Vector3.new(1256.6689453125, -26.72586441040039, 460.2915344238281)),
                    CFrame.new(Vector3.new(1305.7230224609375, -27.92124366760254, 466.43951416015625)),
                    CFrame.new(Vector3.new(1290.762939453125, -10.434697151184082, 418.146240234375)),
                
                    CFrame.new(Vector3.new(1301.755859375, -3.061819314956665, 360.1845397949219)),
                    CFrame.new(Vector3.new(1298.0111083984375, -7.562569618225098, 323.5762023925781)),
                    CFrame.new(Vector3.new(1217.795166015625, -7.010993003845215, -439.6914978027344)),
                    CFrame.new(Vector3.new(976.1392211914062, -7.000000953674316, -1273.11083984375)),
                    CFrame.new(Vector3.new(957.190185546875, -3.0000007152557373, -1339.2149658203125)),
                
                    --remove
                
                
                
                }
                
                --    CFrame.new(Vector3.new(-107.30204772949219, -14.086453437805176, -187.487548828125)),
                
                local currentIndex = 1 -- Initialize the index for target positions
                local walking = false -- Track if walking is enabled
                local moving = false -- Track if the character is currently moving
                
                -- Define the walkTo function
                -- Define the walkTo function
                local function walkTo(position)
                    local character = game.Players.LocalPlayer.Character
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                
                    if not humanoidRootPart then
                        return
                    end
                
                    moving = true 
                
                    local distance = (position.Position - humanoidRootPart.Position).Magnitude
                    local time = distance / speed 
                
                    local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear)
                
                    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = position})
                    tween:Play()
                
                    tween.Completed:Wait() 
                
                    moving = false
                
                    local waitTime = waitTimes[currentIndex] or 0 -- Retrieve wait time from the array
                    wait(waitTime) -- Wait for the calculated wait time
                end

                
                SharkFarm1:AddToggle('MyToggle', {
                    Text = 'Humanoid GoldFarm',
                    Default = false,
                    Tooltip = 'Toggle to enable auto gold farm',
                    Callback = function(enabled)
                        walking = enabled
                        if enabled and not moving then 
                            spawn(function()
                                while walking do
                                    wait()
                                    pcall(function()
                                        local position = targetPositions[currentIndex]
                                        walkTo(position)
                                        currentIndex = (currentIndex % #targetPositions) + 1
                                    end)
                                end
                            end)
                        end
                    end
                })
                SharkFarm1:AddDivider()
--hipheight
                SharkFarm1:AddToggle('GoldFarm', {
                    Text = 'shark Gold Farm',
                    Default = false,
                    Tooltip = 'Toggle to enable auto gold farm',
                    Callback = function(enabled)
                        if enabled then
                            repeat
                            local object = workspace.Deployables["Domestic Goldy Boi"] -- Replace "Domestic Goldy Boi" with the name of your object
                
                            local waitTimes = {
                                1.6, 1.6, 1.6, 1.6, 0, 0, 0, 0, 0, 0, 0, 0, 1.6, 0, 0, 0, 0, 1.6, 1.6, 1.6, 1.6, 0, 0, 0, 0, 0, 0, 1.6, 0, 1.6, 0, 0, 0, 0, 0, 0, 0, 0, 1.6, 0, 0, 0, 0, 0, 0, 0, 1.6, 0, 0, 0, 0, 1.6, 0, 0, 0, 0, 1.6, 1.6, 0, 0, 0, 0, 0, 1.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.6, 1.6, 1.6, 1.6, 0, 0, 0, 0, 1.6, 0, 1.6, 0, 0, 0, 0, 0, 0, 1.6, 0, 1.6, 0, 0, 1.6, 0, 0, 1.6, 0, 1.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
                
                                        local targetPositions = {
                                -- Spawn at ice nodes (4)
                                -- 4 Gold Nodes
                                Vector3.new(915.2814331054688, -2.5274174213409424, -1385.6158447265625), -- 4 Gold Nodes Bottom left
                                Vector3.new(912.7943115234375, -1.6242637634277344, -1413.04833984375), -- Bottom right
                                Vector3.new(944.5631103515625, -1.5960471630096436, -1428.4208984375), -- Top Left Node
                                Vector3.new(958.9597778320312, -3.0000007152557373, -1391.968017578125), -- Top Right
                                -- Going towards 4 nodes at mountain
                                Vector3.new(893.2815551757812, -7.000373363494873, -969.5551147460938), -- Adjusted to make it more direct
                                Vector3.new(786.5398559570312, -3.0000007152557373, -718.9921875),
                                Vector3.new(641.176513671875, -3.855578899383545, -539.2426147460938),
                                Vector3.new(606.1619873046875, 32.754493713378906, -486.9465026855469),
                                Vector3.new(629.888427734375, 51.95648193359375, -433.0956115722656),
                                Vector3.new(642.2515258789062, 55.56715393066406, -418.8298645019531),
                                Vector3.new(650.3762817382812, 66.8869857788086, -409.7201843261719),
                                Vector3.new(666.4571533203125, 81.0921859741211, -393.62176513671875),
                                -- Single node on mountain
                                Vector3.new(688.4791870117188, 87.61669921875, -394.652099609375), -- Node on top of mountain
                                -- Going to the 4 nodes in the mountain
                                Vector3.new(666.319091796875, 70.99797058105469, -370.13189697265625),
                                Vector3.new(642.205810546875, 53.215579986572266, -367.0735168457031),
                                Vector3.new(606.570556640625, 28.03556251525879, -357.19976806640625),
                                Vector3.new(583.2708129882812, 14.1685791015625, -349.2284851074219),
                                -- Start of the 4 nodes at the mountain
                                Vector3.new(608.3096923828125, -5.825555324554443, -352.3447265625), -- First Node -- Bottom right
                                Vector3.new(622.8633422851562, -4.749398231506348, -357.05206298828125), -- Second node -- Top right
                                Vector3.new(638.2216796875, -1.9700599908828735, -381.2216491699219), -- Top left gold node
                                Vector3.new(613.03955078125, -3.3478689193725586, -387.1720886230469), -- Bottom left gold node -- 21
                                -- Going out of the 4 gold node mountain
                                Vector3.new(552.1689453125, 10.88880729675293, -391.5129699707031), -- outside the entrance
                                Vector3.new(510.2638854980469, -3.4913477897644043, -389.0484924316406), -- Onto the ground
                                --Heading towards the 3 gold nodes near waterfall
                                Vector3.new(206.7015380859375, -3, -392.4203796386719),
                                Vector3.new(125.72357177734375, -3, -367.7125244140625),
                                Vector3.new(11.849638938903809, -3, -273.90325927734375),
                                Vector3.new(-104.69710540771484, -3.0002832412719727, -224.1416015625),
                                -- 3 Gold Nodes near waterfall
                                Vector3.new(-127.7438735961914, -7.123413562774658, -203.4132843017578), -- Top Gold node
                                Vector3.new(-119.87413024902344, -25.971975326538086, -193.47650146484375), -- Tps down to the second highest gold node at a safe spot
                                Vector3.new(-109.06890869140625, -23.964372634887695, -187.114501953125), -- Tps to the second highest gold node to break it
                                Vector3.new(-146.6690216064453, -29.13951873779297, -166.2297821044922), -- Third gold node at the bottom -- 31
                                -- Goes down into the underground
                                Vector3.new(-78.91585540771484, -35.0000114440918, -114.45983123779297), -- Tps to the ground
                                Vector3.new(-57.03752136230469, -35.27948760986328, -104.7385025024414), -- At the entrance of the underground
                                Vector3.new(24.822755813598633, -35.0000114440918, -61.54426574707031), -- Near the turning left
                                Vector3.new(70.70474243164062, -45.68882369995117, -41.72166061401367), -- At the end wall near the turning left
                                Vector3.new(78.14912414550781, -72.6690902709961, -119.64269256591797), -- near the bottom
                                Vector3.new(76.23568725585938, -75.1935043334961, -143.13555908203125),
                                Vector3.new(26.672353744506836, -75.03893280029297, -112.16252899169922),
                                -- 1 Gold node near entrance of the cave
                                Vector3.new(6.2319817543029785, -79.60725402832031, -80.90323638916016), -- Gold node
                                -- Going to other nodes
                                Vector3.new(-3.0255465507507324, -83.4150619506836, -161.24505615234375),
                                Vector3.new(-46.13719177246094, -84.78394317626953, -210.84336853027344),
                                Vector3.new(-171.44276428222656, -87.3593978881836, -258.4068603515625),
                                Vector3.new(-230.35887145996094, -83.01371765136719, -254.90994262695312), --44
                                -- 1 Gold node near water
                                -- Going to more nodes
                                Vector3.new(-235.50645446777344, -95.69903564453125, -205.97381591796875),
                                Vector3.new(-201.13409423828125, -95.00701141357422, -100.48636627197266),
                                Vector3.new(-51.05535125732422, -95.09739685058594, -16.503742218017578),
                                -- 1 Node
                                Vector3.new(-18.18035316467285, -88.2457275390625, -4.662241458892822), -- On top of the node
                                -- Going back for more nodes
                                Vector3.new(-121.60362243652344, -95.46952819824219, -44.21466064453125),
                                Vector3.new(-226.48095703125, -95.75582122802734, -137.62271118164062), -- 50
                                Vector3.new(-311.2962341308594, -95.0000228881836, -62.702903747558594),
                                Vector3.new(-330.52532958984375, -91.57213592529297, -51.29126739501953),
                                -- 1 node
                                Vector3.new(-337.6909484863281, -87.902587890625, -44.36483383178711), -- On top of node -- 53
                                -- Going away
                                Vector3.new(-328.63311767578125, -91.01595306396484, -75.27430725097656), -- 54
                                Vector3.new(-320.9810791015625, -84.55455017089844, -112.79277038574219),
                                Vector3.new(-311.7552185058594, -80.34954071044922, -111.021240234375),
                                Vector3.new(-287.1490173339844, -71.30132293701172, -90.15459442138672),
                                -- 2 Nodes
                                Vector3.new(-242.28013610839844, -69.51567077636719, -70.7128677368164),
                                Vector3.new(-236.10598754882812, -71.55790710449219, -82.93661499023438),
                                -- Going away
                                Vector3.new(-262.2549743652344, -71.92373657226562, -78.05333709716797),
                                Vector3.new(-281.7058410644531, -95.24771881103516, -62.516048431396484),
                                Vector3.new(-204.44337463378906, -95.3782730102539, -215.5300750732422),
                                Vector3.new(-191.27264404296875, -87.3593978881836, -241.33700561523438),
                                Vector3.new(-227.31439208984375, -82.79011535644531, -262.97674560546875),
                                -- 1 Node
                                Vector3.new(-300.4206237792969, -78.71428680419922, -370.5965576171875), -- NEW ONE
                                -- Going away
                                Vector3.new(-248.25885009765625, -78.9493408203125, -325.4560241699219),
                                Vector3.new(-201.70730590820312, -71.25202941894531, -387.3911437988281),
                                Vector3.new(-192.30209350585938, -67.08699035644531, -418.3362731933594),
                                Vector3.new(-177.47344970703125, -66.61293029785156, -420.8051452636719),
                                Vector3.new(-168.78817749023438, -73.24115753173828, -420.8697204589844),
                                Vector3.new(-147.6465301513672, -103.0000228881836, -420.92999267578125),
                                Vector3.new(-126.42853546142578, -103.0000228881836, -417.2859191894531),
                                Vector3.new(15.329987525939941, -101.69576263427734, -415.40478515625),
                                Vector3.new(20.97073745727539, -98.90089416503906, -390.7903137207031),
                
                                Vector3.new(11.502516746520996, -103.0000228881836, -422.4435119628906),
                                Vector3.new(-35.83039093017578, -103.0000228881836, -400.1163024902344),
                                Vector3.new(-106.4627456665039, -103.0000228881836, -346.4954833984375),
                                Vector3.new(-109.88388061523438, -89.20711517333984, -270.5399475097656),
                                Vector3.new(-89.2496566772461, -87.23206329345703, -219.29232788085938),
                                Vector3.new(-39.856876373291016, -83.04651641845703, -209.97061157226562),
                                Vector3.new(7.984494686126709, -83.09564971923828, -155.0764617919922),
                                Vector3.new(50.02766418457031, -75.1011734008789, -141.13885498046875),
                                Vector3.new(76.44463348388672, -75.08224487304688, -133.29867553710938),
                                Vector3.new(82.40676879882812, -51.47822189331055, -54.51678466796875),
                                Vector3.new(42.019683837890625, -36.517791748046875, -43.338565826416016),
                                Vector3.new(-33.110538482666016, -35.0000114440918, -147.6772918701172),
                                Vector3.new(-7.2733049392700195, -3.0000007152557373, -273.6367492675781),
                                -- Going to the mountain
                                Vector3.new(215.0220489501953, -3.0000007152557373, -402.2403564453125),
                                Vector3.new(482.00433349609375, -7.002034664154053, -397.1016845703125),
                                Vector3.new(547.7274169921875, 10.737629890441895, -394.296875),
                                -- 4 Gold nodes at mountain
                                Vector3.new(612.3357543945312, -3.338651180267334, -387.5827331542969),
                                Vector3.new(636.9877319335938, -2.5574753284454346, -381.1177673339844),
                                Vector3.new(623.9852294921875, -4.704492092132568, -357.38800048828125),
                                Vector3.new(609.3678588867188, -4.593686103820801, -350.82940673828125),
                                -- Going away
                                Vector3.new(569.9754028320312, 10.83140754699707, -401.6435241699219),
                                Vector3.new(563.77197265625, 10.257417678833008, -383.3118896484375),
                                Vector3.new(545.0091552734375, -4.519443511962891, -356.3315124511719),
                                Vector3.new(484.437255859375, -7.081563949584961, 100.89507293701172),
                                -- 2 Nodes at sand
                                Vector3.new(465.3414611816406, 18.63529396057129, 148.40216064453125), -- Node 1 
                                Vector3.new(484.7383117675781, 14.45421028137207, 180.80996704101562), -- Goes into the middle
                                Vector3.new(466.52752685546875, 14.872398376464844, 234.58738708496094), -- Last gold node
                                -- Going to sand main area
                                Vector3.new(499.2276306152344, -3.0000007152557373, 244.4260711669922),
                                Vector3.new(963.5517578125, -7.754560947418213, 385.99285888671875),
                                Vector3.new(1072.6119384765625, -3.0793397426605225, 387.2690734863281),
                                Vector3.new(1259.4644775390625, -9.322108268737793, 376.37701416015625),
                                Vector3.new(1299.9752197265625, -27.001705169677734, 456.93572998046875),
                                Vector3.new(1218.2529296875, -22.022804260253906, 472.0537414550781),
                                -- Nodes at sand
                                Vector3.new(1162.9521484375, -14.7279052734375, 482.2242736816406), -- Node at enterence dead ahead
                                Vector3.new(1191.15771484375, -15.02241325378418, 476.37835693359375), -- Goes into middle
                                Vector3.new(1185.395263671875, -15.00036907196045, 460.208251953125), -- Node on right
                                Vector3.new(1216.8890380859375, -12.563868522644043, 528.6837768554688), 
                                Vector3.new(1244.1275634765625, -14.952160835266113, 561.5928955078125),
                                Vector3.new(1239.200439453125, -15.900298118591309, 570.3939208984375), -- Another node
                                Vector3.new(1282.5621337890625, -15.79450798034668, 620.6126708984375),
                                Vector3.new(1317.4539794921875, -15.795480728149414, 659.0906372070312),
                                Vector3.new(1280.4825439453125, -18.614084243774414, 689.0258178710938), -- Gold node
                                Vector3.new(1313.737548828125, -15.797083854675293, 664.5869140625),
                                Vector3.new(1360.52783203125, -18.541244506835938, 680.0048828125), -- Gold node
                                -- Leaving the cave
                                Vector3.new(1319.6949462890625, -15.950228691101074, 664.529541015625),
                                Vector3.new(1246.6015625, -15.611971855163574, 577.9691772460938),
                                Vector3.new(1189.4642333984375, -15.01001262664795, 478.0154724121094),
                                Vector3.new(1230.731201171875, -25.774398803710938, 466.1694641113281),
                                Vector3.new(1256.6689453125, -26.72586441040039, 460.2915344238281),
                                Vector3.new(1305.7230224609375, -27.92124366760254, 466.43951416015625),
                                Vector3.new(1290.762939453125, -10.434697151184082, 418.146240234375),
                                Vector3.new(1301.755859375, -3.061819314956665, 360.1845397949219),
                                Vector3.new(1298.0111083984375, -7.562569618225098, 323.5762023925781),
                                Vector3.new(1217.795166015625, -7.010993003845215, -439.19110107421875),
                                Vector3.new(976.1392211914062, -7.000000953674316, -1273.11083984375),
                                Vector3.new(957.190185546875, -3.0000007152557373, -1339.2149658203125)
                            }
                            local currentIndex = 1 -- Initialize the index for target positions
                            local tolerance = 2 -- Adjust this value to change how close the object needs to get to the target position
                            local speed = 55 -- Adjust this value to change the movement speed
                
                            -- Loop through each target position
                               for _, targetPosition in ipairs(targetPositions) do
                                    while true do
                                        local position = object:IsA("Model") and object.PrimaryPart and object.PrimaryPart.Position or object.Position
                                        if position then
                                            local direction = (targetPosition - position).unit
                                            local distance = (targetPosition - position).magnitude
                
                                            if distance > tolerance then
                                                -- Move the object towards the target position gradually
                                                object:SetPrimaryPartCFrame(object:GetPrimaryPartCFrame() + direction * speed * game:GetService("RunService").Heartbeat:Wait())
                                            else
                                                break -- Exit the loop when the object reaches the target position
                                            end
                                        else
                                            warn("Object does not have a valid position.")
                                            break
                                        end
                
                                        wait() -- Yield to allow other processes to run
                                    end
                
                                    local waitTime = waitTimes[currentIndex] or 0 -- Retrieve wait time from the array
                                    wait(waitTime) -- Wait for the calculated wait time
                                    currentIndex = currentIndex % #waitTimes + 1 -- Move to the next index, looping back to the beginning if necessary
                                end
                            until not Farming:GetToggleState('GoldFarm') -- Check if the toggle is still enabled
                        end
                    end,
                })
                
            local E
            SharkFarm4:AddButton({
                Text = "Tp #2",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    E = nil
                    wait()
                    E = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })
            local F
            SharkFarm4:AddButton({
                Text = "Tp #3",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    F = nil
                    wait()
                    F = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })
            local G
            SharkFarm4:AddButton({
                Text = "Tp #4",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    G = nil
                    wait()
                    G = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })
            local H
            SharkFarm4:AddButton({
                Text = "Tp #5",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    H = nil
                    wait()
                    H = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })
            local I
            SharkFarm4:AddButton({
                Text = "Tp #6",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    I = nil
                    wait()
                    I = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })
            local J
            SharkFarm4:AddButton({
                Text = "Tp #7",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    J = nil
                    wait()
                    J = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })
            local K
            SharkFarm4:AddButton({
                Text = "Tp #8",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    K = nil
                    wait()
                    K = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })
            local L
            SharkFarm4:AddButton({
                Text = "Tp #9",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    L = nil
                    wait()
                    L = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })
            local M
            SharkFarm4:AddButton({
                Text = "Tp #10",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    M = nil
                    wait()
                    M = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
                end
            })
            getgenv().autotpselectedposv3 = false
            SharkFarm4:AddToggle('Tween points', {
                Text = 'Tween to 10 Selected Positions',
                Default = false,
                Tooltip = 'Auto Teleport tp points', 
                Callback = function(m)
                    getgenv().autotpselectedposv3 = m
                    if m then
                        spawn(
                            function()
                                while autotpselectedposv3 do
                                    wait()
                                    pcall(
                                        function()
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = D
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = E
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = F
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = G
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = H
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = I
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = J
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = K
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = L
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                            local n = game.Players.LocalPlayer.Character.HumanoidRootPart
                                            local u = M
                                            local v = 10
                                            local w =
                                                math.round(math.abs((n.Position - u.Position).Magnitude)) / tonumber(v)
                                            local x =
                                                game:GetService("TweenService"):Create(
                                                n,
                                                TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                                                {CFrame = u}
                                            )
                                            x:Play()
                                            wait(w)
                                        end
                                    )
                                end
                            end
                        )
                    end
                end
            })
            SharkFarm4:AddButton({
                Text = "Stop Tp",
                DoubleClick = false,
                Tooltip = "TP",
                Func = function()
                    local p = game:GetService("Players")
                    local n = p.LocalPlayer.Character.HumanoidRootPart
                    local u = n.CFrame
                    local v = 1000
                    local w = math.round(math.abs((n.Position - n.Position).Magnitude)) / tonumber(v)
                    local x =
                        game:GetService("TweenService"):Create(
                        n,
                        TweenInfo.new(tonumber(w), Enum.EasingStyle.Linear),
                        {CFrame = u}
                    )
                    x:Play()
                end
            })






            BowAimbotBox:AddSlider('y offset', {
                Text = 'y offset',
                Default = 2,
                Min = 0,
                Max = 10,
                Rounding = 2,
                Compact = false,
            
                Callback = function(Value)
                    YOFFSET = tonumber(Value)
                end
            })
        
            BowAimbotBox:AddDivider()
        
            BowAimbotBox:AddToggle('FOV Visualizer', {
                Text = 'FOV Visualizer',
                Default = false,
                Tooltip = 'FOV Visualizer', 
                Callback = function(Value)
                    ShowVisualizer = Value
                end
            }):AddColorPicker('FOV Color', {
                Default = Color3.fromRGB(255,255,255), 
                Title = 'FOV Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    VisualizerColor = Value
                end
            })
        
            BowAimbotBox:AddSlider('FOV Radius', {
                Text = 'FOV Radius',
                Default = 80,
                Min = 0,
                Max = 500,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    VisualizerRadius = Value
                end
            })
        
            BowAimbotBox:AddSlider('FOV Transparency', {
                Text = 'FOV Transparency',
                Default = 1,
                Min = 0,
                Max = 1,
                Rounding = 2,
                Compact = false,
            
                Callback = function(Value)
                    VisualizerTransparency = Value
                end
            })
        
            BowAimbotBox:AddSlider('FOV Thickness', {
                Text = 'FOV Thickness',
                Default = 1,
                Min = 0,
                Max = 10,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    VisualizerThickness = Value
                end
            })
        
            BowAimbotBox:AddSlider('FOV Sides', {
                Text = 'FOV Sides',
                Default = 64,
                Min = 0,
                Max = 256,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    VisualizerSides = Value
                end
            })
        
            BowAimbotBox:AddToggle('FOV Filled', {
                Text = 'FOV Filled',
                Default = false,
                Tooltip = 'FOV Filled', 
                Callback = function(Value)
                    VisualizerFilled = Value
                end
            })
        
            -- misc lighting
            LightingBox:AddToggle('Full Bright', {
                Text = 'Full Bright',
                Default = false,
                Tooltip = 'Full Bright for game', 
                Callback = function(Value)
                    FullBright = Value
                end
            })
        
            LightingBox:AddToggle('Ambience', {
                Text = 'Ambience',
                Default = false,
                Tooltip = 'Ambience', 
                Callback = function(Value)
                    Ambience = Value
                end
            }):AddColorPicker('Ambience Color', {
                Default = Color3.fromRGB(255,255,255), 
                Title = 'Ambience Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    AmbienceColor = Value
                end
            })
        
            local Players = game:GetService("Players")
            local Workspace = game:GetService("Workspace")
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            
            -- Require necessary modules
            local Packets = require(ReplicatedStorage.Modules:WaitForChild("Packets"))
            

            local ReplicateAnimation, Animation = Instance.new('Animation'), nil
            ReplicateAnimation.AnimationId = "rbxassetid://10761451679"

            local function GetEntityID(model)
                return model:GetAttribute("EntityID")
            end
            
            local function GetClosestItem()
                local Closest
                
                -- Iterate through Workspace.Resources
                for _, v in ipairs(Workspace.Resources:GetChildren()) do
                    if v.Name and v:IsA("Model") then
                        if v.PrimaryPart then
                            local Distance = (Players.LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                            if Distance <= 25 then
                                Closest = v.PrimaryPart
                            end
                        end
                    elseif v.Name and v:IsA("BasePart") then
                        local Distance = (Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
                        if Distance <= 25 then
                            Closest = v
                        end
                    elseif v.Name and v:IsA("Model") and string.find(v.Name:lower(), "tree") then
                        if v.PrimaryPart then
                            local Distance = (Players.LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                            if Distance <= 25 then
                                Closest = v.PrimaryPart
                            end
                        end
                    elseif v.Name and v:IsA("Model") and string.find(v.Name:lower(), "god") then
                        local Totem = v:FindFirstChild("Totem")
                        if Totem then
                            local Distance = (Players.LocalPlayer.Character.HumanoidRootPart.Position - Totem.Position).Magnitude
                            if Distance <= 25 then
                                Closest = Totem
                            end
                        end
                    end
                end
                
                -- Iterate through Workspace
                for _, v in ipairs(Workspace:GetChildren()) do
                    if v:IsA("Model") and (string.find(v.Name:lower(), 'core') or string.find(v.Name:lower(), 'ice') or string.find(v.Name:lower(), 'rock') or v.Name:lower():find("node")) then
                        if v.PrimaryPart then
                            local Distance = (Players.LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                            if Distance <= 25 then
                                Closest = v.PrimaryPart
                            end
                        end
                    end
                end
                
                return Closest
            end
            --campfire
            local function CheckPlayer()
                local Character = Players.LocalPlayer.Character
                return Character and Character:FindFirstChild("HumanoidRootPart") and Character:FindFirstChild("Humanoid").Health > 0
            end
            
            local function CheckTool()
                for _, v in ipairs(Players.LocalPlayer.Character:GetDescendants()) do
                    local lower = v.Name:lower()
                    if lower:find("axe") or lower:find("pick") or lower:find("rock") then
                        return true
                    end
                end
                return false
            end


            local MineAura = false
            WasteBox:AddToggle('MyToggle', {
                Text = 'mine Aura For Resources',
                Default = false,
                Tooltip = 'Automatically Hits Resources',
                Callback = function(Value)
                    MineAura = Value
                    while MineAura do
                        if CheckPlayer() then
                            local Target = GetClosestItem()
                            local Tool = CheckTool()
                            local PlaceID = game.PlaceId
                            local LocalPlayer = Players.LocalPlayer
                            
                            if Tool then
                                if Target then
                                    if PlaceID == 11729688377 then
                                        Packets.SwingTool.send({GetEntityID(Target.Parent)})
                                    elseif PlaceID == 11879754496 then
                                        Packets.SwingTool.send({Target})
                                    end
                                    
                                    local Loaded = LocalPlayer.Character.Humanoid:LoadAnimation(ReplicateAnimation)
                                    Loaded:Play()
                                end
                            end
                        end
                        wait(0.4)
                    end
                end
            })









            LightingBox:AddToggle('Color Shift', {
                Text = 'Color Shift',
                Default = false,
                Tooltip = 'Ambience', 
                Callback = function(Value)
                    ColorShift = Value
                end
            }):AddColorPicker('Color Shift Color', {
                Default = Color3.fromRGB(255,255,255), 
                Title = 'Color Shift Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    ColorShiftColor = Value
                end
            })
        
            LightingBox:AddToggle('Outdoor Ambient', {
                Text = 'Outdoor Ambient',
                Default = false,
                Tooltip = 'Outdoor Ambient', 
                Callback = function(Value)
                    OutDoorAmbient = Value
                end
            }):AddColorPicker('Outdoor Ambient Color', {
                Default = Color3.fromRGB(255,255,255), 
                Title = 'Outdoor Ambient Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    OutDoorAmbienceColor = Value
                end
            })
            
            LightingBox:AddToggle('No Fog', {
                Text = 'No Fog',
                Default = false,
                Tooltip = 'No Fog', 
                Callback = function(Value)
                    NoFog = Value
                end
            })
        
            -- webhooks
            WebhookHandler:AddInput('Farm Webhook', {
                Default = 'Farm Webhook',
                Numeric = false,
                Finished = false,
            
                Text = 'Farm Webhook',
                Tooltip = 'sets webhook for farm',
            
                Placeholder = 'Farm Webhook', 
        
                Callback = function(Value)
                    PlantFarmWebhook = tostring(Value)
                end
            })
        
            WebhookHandler:AddInput('Log Time', {
                Default = 'Log Plant (seconds)',
                Numeric = false,
                Finished = true,
            
                Text = 'Log Plant (seconds)',
                Tooltip = 'logs every x seconds for plant',
            
                Placeholder = 'Log Plant (seconds)', 
        
                Callback = function(Value)
                    if tonumber(Value) then
                        LogTimePlant = tonumber(Value)
                        Library:Notify("Set log time to " .. tostring(LogTimePlant))
                    else
                        Library:Notify("Please input a number instead of a string value for LogTimePlant")
                    end
                end
            })
        
            WebhookHandler:AddInput('Coin Webhook', {
                Default = 'Coin Webhook',
                Numeric = false,
                Finished = false,
            
                Text = 'Coin Webhook',
                Tooltip = 'sets webhook for coin',
            
                Placeholder = 'Coin Webhook', 
        
                Callback = function(Value)
                    GoldFarmWebhook = tostring(Value)
                end
            })
        
            WebhookHandler:AddInput('Log Time', {
                Default = 'Log Gold (seconds)',
                Numeric = false,
                Finished = true,
            
                Text = 'Log Gold (seconds)',
                Tooltip = 'logs every x seconds for Gold',
            
                Placeholder = 'Log Gold (seconds)', 
        
                Callback = function(Value)
                    if tonumber(Value) then
                        LogTimeGold = tonumber(Value)
                        Library:Notify("Set log time to " .. tostring(LogTimeGold))
                    else
                        Library:Notify("Please input a number instead of a string value for LogTimeGold")
                    end
                end
            })
        
            WebhookHandler:AddInput('Rebirth Webhook', {
                Default = 'Rebirth Webhook',
                Numeric = false,
                Finished = false,
            
                Text = 'Rebirth Webhook',
                Tooltip = 'sets webhook for rebirth/mojo farm',
            
                Placeholder = 'Rebirth Webhook', 
        
                Callback = function(Value)
                    MojoFarmWebhook = tostring(Value)
                end
            })
        
            WebhookHandler:AddInput('Log Time', {
                Default = 'Log Mojo (seconds)',
                Numeric = false,
                Finished = true,
            
                Text = 'Log Mojo (seconds)',
                Tooltip = 'logs every x seconds for Mojo/rebirth farm',
            
                Placeholder = 'Log Mojo (seconds)', 
        
                Callback = function(Value)
                    if tonumber(Value) then
                        LogTimeMojo = tonumber(Value)
                        Library:Notify("Set log time to " .. tostring(LogTimeMojo))
                    else
                        Library:Notify("Please input a number instead of a string value for LogTimeMojo")
                    end
                end
            })
        
            -- Fruit Selection
            AutoPlantBox:AddDropdown('fruit selector', {
                Values = {'Bloodfruit', 'Bluefruit', 'Jelly', 'Berry', 'Lemon', 'Pumpkin', 'Orange', 'Apple','Strangefruit','Oddberry','Prickly Pear','Strawberry','Banana','Coconut',"Corn"},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Fruits',
                Tooltip = 'Fruits used for Auto Plant', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    SelectedFruit = Value
                    CurrentFruit = tostring(Value)
                    Library:Notify("One fruit selected " .. tostring(CurrentFruit))
                end
            })
            
            -- auto gold farm
            goldAutofarmBox:AddToggle('Gold Farm', {
                Text = 'Gold Farm',
                Default = false,
                Tooltip = 'Toggles Gold Farm', 
                Callback = function(Value)
                    GoldFarm = Value
                    LastGoldFarm = tick()
                    TotalGoldFarm = tick()
                end
            })
        
            goldAutofarmBox:AddDropdown('Movement Method', {
                Values = {"Tween", "WalkTo [BROKEN]"},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Movement Method',
                Tooltip = 'how u move ', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    MovementMethod = Value
                end
            })
        
            goldAutofarmBox:AddDivider()
        
            goldAutofarmBox:AddToggle('Break Only Ice', {
                Text = 'Break Only Ice',
                Default = false,
                Tooltip = 'Only breaks the ice instead of the gold [Allows stacking]', 
                Callback = function(Value)
                    BreakIceInstead = Value
                end
            })
        
            goldAutofarmBox:AddToggle('Auto Cook Gold', {
                Text = 'Auto Cook Gold',
                Default = false,
                Tooltip = 'auto cooks gold for u', 
                Callback = function(Value)
                    AutoCookGold = Value
                end
            })
        
--presses coins
        
            -- Auto Plant
            
            local players = game:GetService("Players")
            local replicated_storage = game:GetService("ReplicatedStorage")
            local item_data = require(replicated_storage.Modules:WaitForChild("ItemData"))
            local local_player = players.LocalPlayer
            local Packets = require(replicated_storage.Modules:WaitForChild("Packets"))
            local ItemIDs = require(replicated_storage.Modules:WaitForChild("ItemIDS"))
            local gu = require(replicated_storage.Modules:WaitForChild("GameUtil"))

            local antiAfkEnabled = false

            local autoheal = false
            local autoplant = false
            local autoharvest = false
            local ka = false
            
            local health_threshold = 100
            local health_fruit = "Bloodfruit"
            local health_cps = 22
            
            local plant_range = 25
            local harvest_range = 45
            local plant_fruit = "Bloodfruit"
            
            function get_index(name)
                for index, data in next, gu.GetData().inventory do
                    if data.name == name then
                        return index
                    end
                end
            end
            
            function calc_fruit_for_health(health)
                local data = item_data[health_fruit]
            
                if data and data.nourishment and data.nourishment.health then
                    local hp = data.nourishment.health
            
                    local times = 0
                    local health_healed = 0
            
                    while health_healed < health and task.wait() do
                        times += 1
                        health_healed += hp
                    end
            
                    return times
                end
            
                return 0
            end
            
            function check_for_bush(model)
                return string.find(string.lower(model.Name), "bush") ~= nil or string.find(string.lower(model.Name), "tree") ~= nil or string.find(string.lower(model.Name), "patch") ~= nil or string.find(string.lower(model.Name), "crop") ~= nil
            end
            --autocraft
            function check_box(model)
                return model:FindFirstChild("Seed") ~= nil
            end
            
            function get_nearest_bush()
                local parts = workspace:GetPartBoundsInRadius(local_player.Character:GetPivot().Position, harvest_range)
            
                local closest_bush = nil
                local closest = math.huge
            
                for _, part in next, parts do
                    local is_bush = check_for_bush(part.Parent)
            
                    if is_bush then
                        local bush = part.Parent
            
                        local dist = (bush:GetPivot().Position - local_player.Character:GetPivot().Position).Magnitude
            
                        if closest_bush ~= bush and dist < closest then
                            closest_bush = bush
                            closest = dist
                        end
                    end
                end
            
                return closest_bush
            end
            
            
            function get_nearest_empty_plantbox()
                local parts = workspace:GetPartBoundsInRadius(local_player.Character:GetPivot().Position, plant_range)
            
                local plant_box = nil
                local closest = math.huge
            
                for _, part in next, parts do
                    if part.Parent.Name ~= "Plant Box" then continue end
                    local has_plant = check_box(part.Parent)
            
                    if not has_plant then
                        local box = part.Parent
            
                        local dist = (box:GetPivot().Position - local_player.Character:GetPivot().Position).Magnitude
            
                        if dist < closest then
                            plant_box = box
                            closest = dist
                        end
                    end
                end
            
                return plant_box
            end
            
            function HasFruit(name)
                for index, data in gu.GetData().inventory do
                    if data.name == name then
                        return true
                    end
                end
            
                return false
            end
            
            task.spawn(function()
                while task.wait(0.05) do
                    if autoplant then
                        local box = get_nearest_empty_plantbox()
            
                        if box then
                            Packets.InteractStructure.send({["entityID"] = box:GetAttribute("EntityID"), ["itemID"] = ItemIDs[plant_fruit]})
                        end
                    end
                end
            end)
            -- buffer
            
            task.spawn(function()
                while task.wait(.05) do
                    if autoharvest then
                        local bush = get_nearest_bush()
            
                        if bush then
                            Packets.Pickup.send(bush:GetAttribute("EntityID"))
                        end
                    end
                end
            end)
            
            -- autoheal loop
            
            local last_eat = tick()
            
            task.spawn(function()
                while task.wait() do
                    if tick() - last_eat > 1/health_cps then
                        last_eat = tick()
                        if autoheal then
            
                            if local_player.Character:FindFirstChildOfClass("Humanoid").Health < health_threshold then
                                local ind = get_index(health_fruit)
                            
                                if ind then
                                    Packets.UseBagItem.send(ind)
                                end
                            end
            
                        end
                    end
                end
            end)
            
            -- killaura loop
            
            local last_attack = tick()
            
            task.spawn(function()
                while task.wait(.05) do
                    if ka then
                        for _, player in next, players:GetPlayers() do
                            if player ~= local_player and player.Character and player.Character.PrimaryPart then
                                local dist = (player.Character:GetPivot().Position - local_player.Character:GetPivot().Position).Magnitude
            
                                if dist < 25 and tick() - last_attack > 1/3 then
                                    print("swing")
                                    last_attack = tick()
                                    Packets.SwingTool.send({player.Character.PrimaryPart:GetAttribute("EntityID")})
                                end
                            end
                        end
                    end
                end
            end)
            
            local isRunning = false
            
            
            AutoPlantBox:AddToggle('Auto Plant', {
                Text = 'Auto Plant',
                Default = false,
                Tooltip = 'Toggle on/off Auto Plant',
                Callback = function(v)
                    autoplant = v
                end,
            })
            
            AutoPlantBox:AddSlider('Plant Range', {
                Text = 'Plant Range',
                Default = 25,
                Min = 0,
                Max = 100,
                Rounding = 0,
                Compact = false,
                Callback = function(v)
                    plant_range = v
                end,
            })
            --coin press aura
            AutoPlantBox:AddDropdown('Plant Fruit', {
                Values = {'Bloodfruit', 'Bluefruit', 'Jelly', 'Berry', 'Lemon', 'Pumpkin', 'Orange', 'Apple','Strangefruit','Oddberry','Prickly Pear','Strawberry','Banana','Coconut'},

                Default = "Bloodfruit",
                Multi = false,
            
                Text = 'Plant Fruit',
                Tooltip = 'Select the fruit for planting',
            
                Callback = function(v)
                    plant_fruit = v
                end,
            })
            





            PlayerTab:AddToggle('MyToggle', {
                Text = 'Change Water Color',
                Default = false,
                Tooltip = 'Toggle to Change',
                Callback = function(value)
                    if value then
                        game.Workspace.Terrain.WaterColor = Color3.fromRGB(0, 0, 255)
                    else
                        game.Workspace.Terrain.WaterColor = Color3.fromRGB(87, 129, 131)
                    end
                end
            })




PlayerTab:AddToggle('Fps Boost', {
Text = 'Fps Booster',
Default = false,
Tooltip = 'Start Fps Boost', 
Callback = function(value)
    if value then
        game:GetService("Lighting").GlobalShadows = true
        game:GetService("Lighting").SunRays.Enabled = true
    else
        game:GetService("Lighting").SunRays.Enabled = false
        game:GetService("Lighting").GlobalShadows = false
    end
end
})



local TweenService = game:GetService("TweenService")
local speed = 23 -- Initial speed in studs per second                                 18                      26          29  30                       33                                                     56 64          53
local waitTimes = {1.8, 1.8, 1.8, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 1.8, 0, 0, 0, 0, 1.8, 1.8, 1.8, 1.8, 0, 0, 0, 0, 0, 0, 1.8, 0, 1.8, 1.8, 0, 0, 0, 0, 0, 0, 0, 1.8, 0, 0, 0, 0, 1.8, 0, 0, 0, 1.8, 0, 0, 0, 0, 1.8, 0, 0, 0, 0, 1.8, 1.8, 0, 0, 0, 0, 0, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.8, 1.8, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.8, 1.8, 1.8, 1.8, 0, 0, 0, 0, 1.8, 0, 1.8, 0, 0, 0, 0, 0, 0, 1.8, 0, 1.8, 0, 0, 1.8, 0, 0, 1.8, 0, 1.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} -- Array of wait times corresponding to each tween
local targetPositions = {
    -- Spawn at ice nodes (4)
    -- 4 Gold Nodes
    CFrame.new(Vector3.new(915.2814331054688, -2.5274174213409424, -1385.6158447265625)), -- 4 Gold Nodes Bottom left
    CFrame.new(Vector3.new(912.7943115234375, -1.6242637634277344, -1413.04833984375)), -- Bottom right
    CFrame.new(Vector3.new(944.5631103515625, -1.5960471630096436, -1428.4208984375)), -- Top Left Node
    CFrame.new(Vector3.new(958.9597778320312, -3.0000007152557373, -1391.968017578125)), -- Top Right
    -- Going towards 4 nodes at mountain
    CFrame.new(Vector3.new(893.2815551757812, -7.000373363494873, -969.5551147460938)), -- Adjusted to make it more direct
    CFrame.new(Vector3.new(786.5398559570312, -3.0000007152557373, -718.9921875)),
    CFrame.new(Vector3.new(641.176513671875, -3.855578899383545, -539.2426147460938)),
    CFrame.new(Vector3.new(606.1619873046875, 32.754493713378906, -486.9465026855469)),
    CFrame.new(Vector3.new(629.888427734375, 51.95648193359375, -433.0956115722656)),
    CFrame.new(Vector3.new(642.2515258789062, 55.56715393066406, -418.8298645019531)),
    CFrame.new(Vector3.new(650.3762817382812, 66.8869857788086, -409.7201843261719)),
    CFrame.new(Vector3.new(666.4571533203125, 81.0921859741211, -393.62176513671875)),
    -- Single node on mountain
    CFrame.new(Vector3.new(688.4791870117188, 87.61669921875, -394.652099609375)), -- Node on top of mountain
    -- Going to the 4 nodes in the mountain
    CFrame.new(Vector3.new(666.319091796875, 70.99797058105469, -370.13189697265625)),
    CFrame.new(Vector3.new(642.205810546875, 53.215579986572266, -367.0735168457031)),
    CFrame.new(Vector3.new(606.570556640625, 28.03556251525879, -357.19976806640625)),
    CFrame.new(Vector3.new(583.2708129882812, 14.1685791015625, -349.2284851074219)),
    -- Start of the 4 nodes at the mountain
    CFrame.new(Vector3.new(608.3096923828125, -5.825555324554443, -352.3447265625)), -- First Node -- Bottom right
    CFrame.new(Vector3.new(622.8633422851562, -4.749398231506348, -357.05206298828125)), -- Second node -- Top right
    CFrame.new(Vector3.new(638.2216796875, -1.9700599908828735, -381.2216491699219)), -- Top left gold node
    CFrame.new(Vector3.new(613.03955078125, -3.3478689193725586, -387.1720886230469)), -- Bottom left gold node -- 21
    -- Going out of the 4 gold node mountain
    CFrame.new(Vector3.new(552.1689453125, 10.88880729675293, -391.5129699707031)), -- outside the enterence
    CFrame.new(Vector3.new(510.2638854980469, -3.4913477897644043, -389.0484924316406)), -- Onto the ground
    --Heading towards the 3 gold nodes near water fall
    CFrame.new(Vector3.new(206.7015380859375, -3, -392.4203796386719)), 
    CFrame.new(Vector3.new(125.72357177734375, -3, -367.7125244140625)),
    CFrame.new(Vector3.new(11.849638938903809, -3, -273.90325927734375)),
    CFrame.new(Vector3.new(-104.69710540771484, -3.0002832412719727, -224.1416015625)),
    -- 3 Gold Nodes near waterfall
    CFrame.new(Vector3.new(-127.7438735961914, -7.123413562774658, -203.4132843017578)), -- Top Gold node
    CFrame.new(Vector3.new(-119.87413024902344, -25.971975326538086, -193.47650146484375)), -- Tps down to the second highest gold node at a safe spot
    CFrame.new(Vector3.new(-109.06890869140625, -23.964372634887695, -187.114501953125)), -- Tps to the second highest gold node to break it
    CFrame.new(Vector3.new(-146.6690216064453, -29.13951873779297, -166.2297821044922)), -- Third gold node at the bottom -- 31
    -- Goes down into the underground
    CFrame.new(Vector3.new(-78.91585540771484, -35.0000114440918, -114.45983123779297)), -- Tps to the ground
    CFrame.new(Vector3.new(-57.03752136230469, -35.27948760986328, -104.7385025024414)), -- At the enterence of the underground
    CFrame.new(Vector3.new(24.822755813598633, -35.0000114440918, -61.54426574707031)), -- Near the turning left
    CFrame.new(Vector3.new(70.70474243164062, -45.68882369995117, -41.72166061401367)), -- At the end wall near the turning left
    CFrame.new(Vector3.new(78.14912414550781, -72.6690902709961, -119.64269256591797)), -- near the bottom
    CFrame.new(Vector3.new(76.23568725585938, -75.1935043334961, -143.13555908203125)),
    CFrame.new(Vector3.new(26.672353744506836, -75.03893280029297, -112.16252899169922)),
    -- 1 Gold node near enterence of the cave
    CFrame.new(Vector3.new(6.2319817543029785, -79.60725402832031, -80.90323638916016)), -- Gold node
    -- Going to other nodes
    CFrame.new(Vector3.new(-3.0255465507507324, -83.4150619506836, -161.24505615234375)), 
    CFrame.new(Vector3.new(-46.13719177246094, -84.78394317626953, -210.84336853027344)),
    CFrame.new(Vector3.new(-171.44276428222656, -87.3593978881836, -258.4068603515625)),
    CFrame.new(Vector3.new(-230.35887145996094, -83.01371765136719, -254.90994262695312)),
    -- 1 Gold node near water
    CFrame.new(Vector3.new(-248.11705017089844, -82.01800537109375, -242.68406677246094)),
    -- Going to more nodes
    CFrame.new(Vector3.new(-235.50645446777344, -95.69903564453125, -205.97381591796875)),
    CFrame.new(Vector3.new(-201.13409423828125, -95.00701141357422, -100.48636627197266)),
    CFrame.new(Vector3.new(-51.05535125732422, -95.09739685058594, -16.503742218017578)),
    -- 1 Node
    CFrame.new(Vector3.new(-18.18035316467285, -88.2457275390625, -4.662241458892822)), -- On top of the node
    -- Going back for more nodes
    CFrame.new(Vector3.new(-121.60362243652344, -95.46952819824219, -44.21466064453125)),
    CFrame.new(Vector3.new(-226.48095703125, -95.75582122802734, -137.62271118164062)), -- 50
    CFrame.new(Vector3.new(-311.2962341308594, -95.0000228881836, -62.702903747558594)),
    CFrame.new(Vector3.new(-330.52532958984375, -91.57213592529297, -51.29126739501953)),
    -- 1 node
    CFrame.new(Vector3.new(-337.6909484863281, -87.902587890625, -44.36483383178711)), -- On top of node -- 53
    -- Going away
    CFrame.new(Vector3.new(-328.63311767578125, -91.01595306396484, -75.27430725097656)), -- 54
    CFrame.new(Vector3.new(-320.9810791015625, -84.55455017089844, -112.79277038574219)),
    CFrame.new(Vector3.new(-311.7552185058594, -80.34954071044922, -111.021240234375)),
    CFrame.new(Vector3.new(-287.1490173339844, -71.30132293701172, -90.15459442138672)),
    -- 2 Nodes
    CFrame.new(Vector3.new(-242.28013610839844, -69.51567077636719, -70.7128677368164)),
    CFrame.new(Vector3.new(-236.10598754882812, -71.55790710449219, -82.93661499023438)),
    -- Going away
    CFrame.new(Vector3.new(-262.2549743652344, -71.92373657226562, -78.05333709716797)),
    CFrame.new(Vector3.new(-281.7058410644531, -95.24771881103516, -62.516048431396484)),
    CFrame.new(Vector3.new(-204.44337463378906, -95.3782730102539, -215.5300750732422)),
    CFrame.new(Vector3.new(-191.27264404296875, -87.3593978881836, -241.33700561523438)),
    CFrame.new(Vector3.new(-227.31439208984375, -82.79011535644531, -262.97674560546875)),
    -- 1 Node
    CFrame.new(Vector3.new(-300.4206237792969, -78.71428680419922, -370.5965576171875)),  -- NEW ONE
    -- Going away
    CFrame.new(Vector3.new(-248.25885009765625, -78.9493408203125, -325.4560241699219)),
    CFrame.new(Vector3.new(-201.70730590820312, -71.25202941894531, -387.3911437988281)),
    CFrame.new(Vector3.new(-192.30209350585938, -67.08699035644531, -418.3362731933594)),
    CFrame.new(Vector3.new(-177.47344970703125, -66.61293029785156, -420.8051452636719)),
    CFrame.new(Vector3.new(-168.78817749023438, -73.24115753173828, -420.8697204589844)),
    CFrame.new(Vector3.new(-147.6465301513672, -103.0000228881836, -420.92999267578125)),
    CFrame.new(Vector3.new(-126.42853546142578, -103.0000228881836, -417.2859191894531)),
    CFrame.new(Vector3.new(15.329987525939941, -101.69576263427734, -415.40478515625)),
    CFrame.new(Vector3.new(20.97073745727539, -98.90089416503906, -390.7903137207031)),
    -- 3 Gold nodes
    CFrame.new(Vector3.new(21.28833770751953, -99.0000228881836, -376.1058044433594)), -- Front gold node
    CFrame.new(Vector3.new(53.055545806884766, -99.05322265625, -355.8440246582031)), -- Far away gold node
    CFrame.new(Vector3.new(39.688743591308594, -99.01302337646484, -368.5171203613281)), -- Middle Gold node
    -- Going away
    CFrame.new(Vector3.new(21.980361938476562, -98.79778289794922, -389.5634460449219)),
    CFrame.new(Vector3.new(11.502516746520996, -103.0000228881836, -422.4435119628906)),
    CFrame.new(Vector3.new(-35.83039093017578, -103.0000228881836, -400.1163024902344)),
    CFrame.new(Vector3.new(-106.4627456665039, -103.0000228881836, -346.4954833984375)),
    CFrame.new(Vector3.new(-109.88388061523438, -89.20711517333984, -270.5399475097656)),
    CFrame.new(Vector3.new(-89.2496566772461, -87.23206329345703, -219.29232788085938)),
    CFrame.new(Vector3.new(-39.856876373291016, -83.04651641845703, -209.97061157226562)),
    CFrame.new(Vector3.new(7.984494686126709, -83.09564971923828, -155.0764617919922)),
    CFrame.new(Vector3.new(50.02766418457031, -75.1011734008789, -141.13885498046875)),
    CFrame.new(Vector3.new(76.44463348388672, -75.08224487304688, -133.29867553710938)),
    CFrame.new(Vector3.new(82.40676879882812, -51.47822189331055, -54.51678466796875)),
    CFrame.new(Vector3.new(42.019683837890625, -36.517791748046875, -43.338565826416016)),
    CFrame.new(Vector3.new(-33.110538482666016, -35.0000114440918, -147.6772918701172)),
    CFrame.new(Vector3.new(-7.2733049392700195, -3.0000007152557373, -273.6367492675781)),
    -- Going to the mountain
    CFrame.new(Vector3.new(215.0220489501953, -3.0000007152557373, -402.2403564453125)),
    CFrame.new(Vector3.new(482.00433349609375, -7.002034664154053, -397.1016845703125)),
    CFrame.new(Vector3.new(547.7274169921875, 10.737629890441895, -394.296875)),
    -- 4 Gold nodes at mountain
    CFrame.new(Vector3.new(612.3357543945312, -3.338651180267334, -387.5827331542969)),
    CFrame.new(Vector3.new(636.9877319335938, -2.5574753284454346, -381.1177673339844)),
    CFrame.new(Vector3.new(623.9852294921875, -4.704492092132568, -357.38800048828125)),
    CFrame.new(Vector3.new(609.3678588867188, -4.593686103820801, -350.82940673828125)),
    -- Going away
    CFrame.new(Vector3.new(569.9754028320312, 10.83140754699707, -401.6435241699219)),
    CFrame.new(Vector3.new(563.77197265625, 10.257417678833008, -383.3118896484375)),
    CFrame.new(Vector3.new(545.0091552734375, -4.519443511962891, -356.3315124511719)),
    CFrame.new(Vector3.new(484.437255859375, -7.081563949584961, 100.89507293701172)),
    -- 2 Nodes at sand
    CFrame.new(Vector3.new(465.3414611816406, 18.63529396057129, 148.40216064453125)), -- Node 1 
    CFrame.new(Vector3.new(484.7383117675781, 14.45421028137207, 180.80996704101562)), -- Goes into the middle
    CFrame.new(Vector3.new(466.52752685546875, 14.872398376464844, 234.58738708496094)), -- Last gold node
    -- Going to sand main area
    CFrame.new(Vector3.new(499.2276306152344, -3.0000007152557373, 244.4260711669922)),
    CFrame.new(Vector3.new(963.5517578125, -7.754560947418213, 385.99285888671875)),
    CFrame.new(Vector3.new(1072.6119384765625, -3.0793397426605225, 387.2690734863281)),
    CFrame.new(Vector3.new(1259.4644775390625, -9.322108268737793, 376.37701416015625)),
    CFrame.new(Vector3.new(1299.9752197265625, -27.001705169677734, 456.93572998046875)),
    CFrame.new(Vector3.new(1218.2529296875, -22.022804260253906, 472.0537414550781)),
    -- Nodes at sand
    CFrame.new(Vector3.new(1162.9521484375, -14.7279052734375, 482.2242736816406)), -- Node at enterence dead ahead
    CFrame.new(Vector3.new(1191.15771484375, -15.02241325378418, 476.37835693359375)), -- Goes into middle
    CFrame.new(Vector3.new(1185.395263671875, -15.00036907196045, 460.208251953125)), -- Node on right
    CFrame.new(Vector3.new(1216.8890380859375, -12.563868522644043, 528.6837768554688)), 
    CFrame.new(Vector3.new(1244.1275634765625, -14.952160835266113, 561.5928955078125)),
    CFrame.new(Vector3.new(1239.200439453125, -15.900298118591309, 570.3939208984375)), -- Another node
    CFrame.new(Vector3.new(1282.5621337890625, -15.79450798034668, 620.6126708984375)),
    CFrame.new(Vector3.new(1317.4539794921875, -15.795480728149414, 659.0906372070312)),
    CFrame.new(Vector3.new(1280.4825439453125, -18.614084243774414, 689.0258178710938)), -- Gold node
    CFrame.new(Vector3.new(1313.737548828125, -15.797083854675293, 664.5869140625)),
    CFrame.new(Vector3.new(1360.52783203125, -18.541244506835938, 680.0048828125)), -- Gold node
    -- Leaving the cave
    CFrame.new(Vector3.new(1319.6949462890625, -15.950228691101074, 664.529541015625)),
    CFrame.new(Vector3.new(1246.6015625, -15.611971855163574, 577.9691772460938)),
    CFrame.new(Vector3.new(1189.4642333984375, -15.01001262664795, 478.0154724121094)),
    CFrame.new(Vector3.new(1230.731201171875, -25.774398803710938, 466.1694641113281)),
    CFrame.new(Vector3.new(1256.6689453125, -26.72586441040039, 460.2915344238281)),
    CFrame.new(Vector3.new(1305.7230224609375, -27.92124366760254, 466.43951416015625)),
    CFrame.new(Vector3.new(1290.762939453125, -10.434697151184082, 418.146240234375)),

    CFrame.new(Vector3.new(1301.755859375, -3.061819314956665, 360.1845397949219)),
    CFrame.new(Vector3.new(1298.0111083984375, -7.562569618225098, 323.5762023925781)),
    CFrame.new(Vector3.new(1217.795166015625, -7.010993003845215, -439.6914978027344)),
    CFrame.new(Vector3.new(976.1392211914062, -7.000000953674316, -1273.11083984375)),
    CFrame.new(Vector3.new(957.190185546875, -3.0000007152557373, -1339.2149658203125)),

    --remove



}

--    CFrame.new(Vector3.new(-107.30204772949219, -14.086453437805176, -187.487548828125)),

local currentIndex = 1 -- Initialize the index for target positions
local walking = false -- Track if walking is enabled
local moving = false -- Track if the character is currently moving

-- Define the walkTo function
-- Define the walkTo function
local function walkTo(position)
    local character = game.Players.LocalPlayer.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if not humanoidRootPart then
        return
    end

    moving = true 

    local distance = (position.Position - humanoidRootPart.Position).Magnitude
    local time = distance / speed 

    local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear)

    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = position})
    tween:Play()

    tween.Completed:Wait() 

    moving = false

    local waitTime = waitTimes[currentIndex] or 0 -- Retrieve wait time from the array
    wait(waitTime) -- Wait for the calculated wait time
end

local function setHipHeight(value)
    if character and character:FindFirstChild("Humanoid") then
        character.Humanoid.HipHeight = value
    end
end

SharkFarm3:AddSlider('HipHeightSlider', {
    Text = 'Hip Height 2 is normal',
    Default = 2,
    Min = 2,
    Max = 7,
    Rounding = 1,
    Compact = false,
    Callback = function(value)
        setHipHeight(value)
    end
})

--auto pickup
SharkFarm1:AddToggle('MyToggle', {
    Text = 'mine Aura For Resources',
    Default = false,
    Tooltip = 'Automatically Hits Resources',
    Callback = function(Value)
        MineAura = Value
        while MineAura do
            if CheckPlayer() then
                local Target = GetClosestItem()
                local Tool = CheckTool()
                local PlaceID = game.PlaceId
                local LocalPlayer = Players.LocalPlayer
                
                if Tool then
                    if Target then
                        if PlaceID == 11729688377 then
                            Packets.SwingTool.send({GetEntityID(Target.Parent)})
                        elseif PlaceID == 11879754496 then
                            Packets.SwingTool.send({Target})
                        end
                        
                        local Loaded = LocalPlayer.Character.Humanoid:LoadAnimation(ReplicateAnimation)
                        Loaded:Play()
                    end
                end
            end
            wait(0.4)
        end
    end
})

PlayerTab:AddButton({
Text = "Infinite Yield",
DoubleClick = false,
Tooltip = "Enable IY",
Func = function()
    loadstring(game:HttpGet(("https://raw.githubusercontent.com/HRT9014/open-source/main/infiniteshit"), true))()
end
})
-- Rejoin Server
PlayerTab:AddButton({
Text = "Rejoin Server",
DoubleClick = false,
Tooltip = "RJ",
Func = function()
    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game:GetService("Players").LocalPlayer)
end
})

PlayerTab:AddButton({
Text = "Among Us",
DoubleClick = false,
Tooltip = "Troll Fe",
Func = function()
    game.Players.LocalPlayer.Character.Head.Mesh:Destroy()
    game.Players.LocalPlayer.Character.Head.Face:Destroy()
    game.Players.LocalPlayer.Character.Head.HatAttachment:Destroy()
    game.Players.LocalPlayer.Character.LeftUpperArm:Destroy()
    game.Players.LocalPlayer.Character.RightUpperArm:Destroy()
    game.Players.LocalPlayer.Character["Pants Basic"]:Destroy()
end
})

PlayerTab:AddButton({
Text = "Tp out of hut",
DoubleClick = false,
Tooltip = "TP",
Func = function()
    if game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        local dahrt = game.Players.LocalPlayer.Character.HumanoidRootPart
        dahrt.CFrame = CFrame.new(dahrt.CFrame.X, dahrt.CFrame.Y - 20, dahrt.CFrame.Z)
    end
end
})








local players = game:GetService("Players")
local replicated_storage = game:GetService("ReplicatedStorage")
local item_data = require(replicated_storage.Modules:WaitForChild("ItemData"))
local local_player = players.LocalPlayer
local Packets = require(replicated_storage.Modules:WaitForChild("Packets"))
local ItemIDs = require(replicated_storage.Modules:WaitForChild("ItemIDS"))

local antiAfkEnabled = false

local autoheal = false
local autoplant = false
local autoharvest = false
local ka = false

local health_threshold = 100
local health_fruit = "Bloodfruit"
local health_cps = 22

local plant_range = 25
local harvest_range = 45
local plant_fruit = "Bloodfruit"

function get_index(name)
    for index, data in next, gu.GetData().inventory do
        if data.name == name then
            return index
        end
    end
end

function calc_fruit_for_health(health)
    local data = item_data[health_fruit]

    if data and data.nourishment and data.nourishment.health then
        local hp = data.nourishment.health

        local times = 0
        local health_healed = 0

        while health_healed < health and task.wait() do
            times += 1
            health_healed += hp
        end

        return times
    end

    return 0
end

function check_for_bush(model)
    return string.find(string.lower(model.Name), "bush") ~= nil or string.find(string.lower(model.Name), "tree") ~= nil or string.find(string.lower(model.Name), "patch") ~= nil or string.find(string.lower(model.Name), "crop") ~= nil
end
--autocraft
function check_box(model)
    return model:FindFirstChild("Seed") ~= nil
end

function get_nearest_bush()
    local parts = workspace:GetPartBoundsInRadius(local_player.Character:GetPivot().Position, harvest_range)

    local closest_bush = nil
    local closest = math.huge

    for _, part in next, parts do
        local is_bush = check_for_bush(part.Parent)

        if is_bush then
            local bush = part.Parent

            local dist = (bush:GetPivot().Position - local_player.Character:GetPivot().Position).Magnitude

            if closest_bush ~= bush and dist < closest then
                closest_bush = bush
                closest = dist
            end
        end
    end

    return closest_bush
end





-- buffer

task.spawn(function()
    while task.wait() do
        if autoharvest then
            local bush = get_nearest_bush()

            if bush then
                Packets.Pickup.send(bush:GetAttribute("EntityID"))
            end
        end
    end
end)

-- autoheal loop

local last_eat = tick()

task.spawn(function()
    while task.wait() do
        if tick() - last_eat > 1/health_cps then
            last_eat = tick()
            if autoheal then

                if local_player.Character:FindFirstChildOfClass("Humanoid").Health < health_threshold then
                    local ind = get_index(health_fruit)
                
                    if ind then
                        Packets.UseBagItem.send(ind)
                    end
                end

            end
        end
    end
end)

-- killaura loop

local last_attack = tick()

task.spawn(function()
    while task.wait(.05) do
        if ka then
            for _, player in next, players:GetPlayers() do
                if player ~= local_player and player.Character and player.Character.PrimaryPart then
                    local dist = (player.Character:GetPivot().Position - local_player.Character:GetPivot().Position).Magnitude

                    if dist < 25 and tick() - last_attack > 1/3 then
                        print("swing")
                        last_attack = tick()
                        Packets.SwingTool.send({player.Character.PrimaryPart:GetAttribute("EntityID")})
                    end
                end
            end
        end
    end
end)

local isRunning = false


AutoHarvestBox:AddToggle('Auto Harvest', {
    Text = 'Auto Harvest',
    Default = false,
    Tooltip = 'Toggle on/off Auto Harvest', 
    Callback = function(v)
        autoharvest = v
    end,
})

AutoHarvestBox:AddSlider('Collect Fruit Range', {
    Text = 'Collect Fruit Range',
    Default = 25,
    Min = 0,
    Max = 50,
    Rounding = 0,
    Compact = false,

    Callback = function(v)
        harvest_range = v
    end,
})




            
            tweenfarmbox:AddToggle('Auto Farm', {
                Text = 'Auto Farm',
                Default = false,
                Tooltip = 'Toggle on/off Auto Farm', 
                Callback = function(Value)
                    AutoFarm = Value
                    LastPlantFarm = tick()
                    TotalPlantFarm = tick()
                end
            })
            
            tweenfarmbox:AddSlider('Tween Speed', {
                Text = 'Tween Speed',
                Default = 12,
                Min = 1,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    TweenSpeed = Value
                end
            })
        
            
        
            
            local IsTweening = false
            local T = nil
            local T2 = nil
            local TweeningToPlantBox = nil
            local TweeningToBush = nil
        
            
            local getPlantBoxesInRange2 = LPH_NO_VIRTUALIZE(function(d, FRUIT_NAME)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Deployables") then
                    for i,v in pairs(workspace.Deployables:GetChildren()) do
                        if v:IsA("Model") and v.PrimaryPart ~= nil and tostring(v) == "Plant Box" and not v:FindFirstChild(FRUIT_NAME) then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if Distance <= maxDistance then
                                Closest = v
                                maxDistance = Distance
                            end
                        end
                    end
                end
                return Closest,maxDistance
            end)
            
            local getPlantBoxesInRange = LPH_NO_VIRTUALIZE(function(d, FRUIT_NAME)
                local Closest, maxDistance = nil, d
                local In_Dist = {}
                if workspace:FindFirstChild("Critters") then
                    for i,v in pairs(workspace.Deployables:GetChildren()) do
                        if v:IsA("Model") and v.PrimaryPart ~= nil and tostring(v) == "Plant Box" and not v:FindFirstChild(FRUIT_NAME) then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if Distance < maxDistance then
                                local faketbl = {}
                                faketbl.model = v
                                faketbl.distance = Distance
                                table.insert(In_Dist, faketbl)
                            end
                        end
                    end
                end
                return In_Dist
            end)
            
            local getClosestBerryBushes = LPH_NO_VIRTUALIZE(function(distance, berry)
                local closest = nil
                local maxdistance = distance
                for i,v in pairs(workspace:GetChildren()) do
                    if v:IsA("Model") and v.PrimaryPart then
                        if v.Name == SelectedFruit .. " Bush" or v.Name == SelectedFruit .. " Tree" or v.Name == SelectedFruit .. " Crop" or v.Name == SelectedFruit .. " Bushel" or (SelectedFruit == "Prickly Pear" and v.Name == "Pear Cacti") or v.Name == SelectedFruit .. " Patch Crop" then
                            local mag = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if mag < maxdistance then
                                closest = v
                                maxdistance = mag
                            end
                        end
                    end
                end
                return closest, maxdistance
            end)
        
            tweenfarmbox:AddButton({
                Text = 'Create Farm',
                Func = function()
                    local vvv = game:GetService("Players").LocalPlayer 
                    local RootPart = vvv.Character.HumanoidRootPart
                    local cframe = RootPart.CFrame
                    
                    local function place(name, rot, pos)
                        if not isvoid then
                            Packets.PlaceStructure.send({
                                buildingName = name,
                                yrot = rot,
                                vec = pos,
                                isMobile = false,
                            })
                        else
                            Packets.PlaceStructure.send(
                                pos,
                                name,
                                rot,
                                false
                            )
                        end
                    end
                    
                    local coordinates = {
                        Vector3.new(7, -3, -7),
                        Vector3.new(0, -3, -14),
                        Vector3.new(0, -3, -21),
                        Vector3.new(0, -3, -28),
                        Vector3.new(0, -3, -35),
                        Vector3.new(0, -3, -42),
                        Vector3.new(0, -3, -49),
                        Vector3.new(0, -3, 7),
                        Vector3.new(0, -3, 14),
                        Vector3.new(0, -3, 21),
                        Vector3.new(0, -3, 28),
                        Vector3.new(0, -3, 35),
                        Vector3.new(0, -3, 42),
                        Vector3.new(0, -3, 49),
                        -- Missing plant box here
                        Vector3.new(7, -3, -7),
                        Vector3.new(7, -3, -14),
                        Vector3.new(7, -3, -21),
                        Vector3.new(7, -3, -28),
                        Vector3.new(7, -3, -35),
                        Vector3.new(7, -3, -42),
                        Vector3.new(7, -3, -49),
                        Vector3.new(7, -3, 7),
                        Vector3.new(7, -3, 14),
                        Vector3.new(7, -3, 21),
                        Vector3.new(7, -3, 28),
                        Vector3.new(7, -3, 35),
                        Vector3.new(7, -3, 42),
                        Vector3.new(7, -3, 49),
                        Vector3.new(7, -3, 0),
                        Vector3.new(0, -3, -7),
                        Vector3.new(-7, -3, -7),
                        Vector3.new(-7, -3, -14),
                        Vector3.new(-7, -3, -21),
                        Vector3.new(-7, -3, -28),
                        Vector3.new(-7, -3, -35),
                        Vector3.new(-7, -3, -42),
                        Vector3.new(-7, -3, -49),
                        Vector3.new(-7, -3, 7),
                        Vector3.new(-7, -3, 14),
                        Vector3.new(-7, -3, 21),
                        Vector3.new(-7, -3, 28),
                        Vector3.new(-7, -3, 35),
                        Vector3.new(-7, -3, 42),
                        Vector3.new(-7, -3, 49),
                        Vector3.new(-7, -3, 0),
                        Vector3.new(14, -3, -7),
                        Vector3.new(14, -3, -14),
                        Vector3.new(14, -3, -21),
                        Vector3.new(14, -3, -28),
                        Vector3.new(14, -3, -35),
                        Vector3.new(14, -3, -42),
                        Vector3.new(14, -3, -49),
                        Vector3.new(14, -3, 7),
                        Vector3.new(14, -3, 14),
                        Vector3.new(14, -3, 21),
                        Vector3.new(14, -3, 28),
                        Vector3.new(14, -3, 35),
                        Vector3.new(14, -3, 42),
                        Vector3.new(14, -3, 49),
                        Vector3.new(14, -3, 0),
                        Vector3.new(-14, -3, -7),
                        Vector3.new(-14, -3, -14),
                        Vector3.new(-14, -3, -21),
                        Vector3.new(-14, -3, -28),
                        Vector3.new(-14, -3, -35),
                        Vector3.new(-14, -3, -42),
                        Vector3.new(-14, -3, -49),
                        Vector3.new(-14, -3, 7),
                        Vector3.new(-14, -3, 14),
                        Vector3.new(-14, -3, 21),
                        Vector3.new(-14, -3, 28),
                        Vector3.new(-14, -3, 35),
                        Vector3.new(-14, -3, 42),
                        Vector3.new(-14, -3, 49),
                        Vector3.new(-14, -3, 0),
                        Vector3.new(21, -3, -7),
                        Vector3.new(21, -3, -14),
                        Vector3.new(21, -3, -21),
                        Vector3.new(21, -3, -28),
                        Vector3.new(21, -3, -35),
                        Vector3.new(21, -3, -42),
                        Vector3.new(21, -3, -49),
                        Vector3.new(21, -3, 7),
                        Vector3.new(21, -3, 14),
                        Vector3.new(21, -3, 21),
                        Vector3.new(21, -3, 28),
                        Vector3.new(21, -3, 35),
                        Vector3.new(21, -3, 42),
                        Vector3.new(21, -3, 49),
                        Vector3.new(21, -3, 0),
                        Vector3.new(-21, -3, -7),
                        Vector3.new(-21, -3, -14),
                        Vector3.new(-21, -3, -21),
                        Vector3.new(-21, -3, -28),
                        Vector3.new(-21, -3, -35),
                        Vector3.new(-21, -3, -42),
                        Vector3.new(-21, -3, -49),
                        Vector3.new(-21, -3, 7),
                        Vector3.new(-21, -3, 14),
                        Vector3.new(-21, -3, 21),
                        Vector3.new(-21, -3, 28),
                        Vector3.new(-21, -3, 35),
                        Vector3.new(-21, -3, 42),
                        Vector3.new(-21, -3, 49),
                        Vector3.new(-21, -3, 0),
                        Vector3.new(28, -3, -7),
                        Vector3.new(28, -3, -14),
                        Vector3.new(28, -3, -21),
                        Vector3.new(28, -3, -28),
                        Vector3.new(28, -3, -35),
                        Vector3.new(28, -3, -42),
                        Vector3.new(28, -3, -49),
                        Vector3.new(28, -3, 7),
                        Vector3.new(28, -3, 14),
                        Vector3.new(28, -3, 21),
                        Vector3.new(28, -3, 28),
                        Vector3.new(28, -3, 35),
                        Vector3.new(28, -3, 42),
                        Vector3.new(28, -3, 49),
                        Vector3.new(28, -3, 0),
                        Vector3.new(-28, -3, -7),
                        Vector3.new(-28, -3, -14),
                        Vector3.new(-28, -3, -21),
                        Vector3.new(-28, -3, -28),
                        Vector3.new(-28, -3, -35),
                        Vector3.new(-28, -3, -42),
                        Vector3.new(-28, -3, -49),
                        Vector3.new(-28, -3, 7),
                        Vector3.new(-28, -3, 14),
                        Vector3.new(-28, -3, 21),
                        Vector3.new(-28, -3, 28),
                        Vector3.new(-28, -3, 35),
                        Vector3.new(-28, -3, 42),
                        Vector3.new(-28, -3, 49),
                        Vector3.new(-28, -3, 0),
                        Vector3.new(35, -3, -7),
                        Vector3.new(35, -3, -14),
                        Vector3.new(35, -3, -21),
                        Vector3.new(35, -3, -28),
                        Vector3.new(35, -3, -35),
                        Vector3.new(35, -3, -42),
                        Vector3.new(35, -3, -49),
                        Vector3.new(35, -3, 7),
                        Vector3.new(35, -3, 14),
                        Vector3.new(35, -3, 21),
                        Vector3.new(35, -3, 28),
                        Vector3.new(35, -3, 35),
                        Vector3.new(35, -3, 42),
                        Vector3.new(35, -3, 49),
                        Vector3.new(35, -3, 0),
                        Vector3.new(-35, -3, -7),
                        Vector3.new(-35, -3, -14),
                        Vector3.new(-35, -3, -21),
                        Vector3.new(-35, -3, -28),
                        Vector3.new(-35, -3, -35),
                        Vector3.new(-35, -3, -42),
                        Vector3.new(-35, -3, -49),
                        Vector3.new(-35, -3, 7),
                        Vector3.new(-35, -3, 14),
                        Vector3.new(-35, -3, 21),
                        Vector3.new(-35, -3, 28),
                        Vector3.new(-35, -3, 35),
                        Vector3.new(-35, -3, 42),
                        Vector3.new(-35, -3, 49),
                        Vector3.new(-35, -3, 0),
                        Vector3.new(42, -3, -7),
                        Vector3.new(42, -3, -14),
                        Vector3.new(42, -3, -21),
                        Vector3.new(42, -3, -28),
                        Vector3.new(42, -3, -35),
                        Vector3.new(42, -3, -42),
                        Vector3.new(42, -3, -49),
                        Vector3.new(42, -3, 7),
                        Vector3.new(42, -3, 14),
                        Vector3.new(42, -3, 21),
                        Vector3.new(42, -3, 28),
                        Vector3.new(42, -3, 35),
                        Vector3.new(42, -3, 42),
                        Vector3.new(42, -3, 49),
                        Vector3.new(42, -3, 0),
                        Vector3.new(-42, -3, -7),
                        Vector3.new(-42, -3, -14),
                        Vector3.new(-42, -3, -21),
                        Vector3.new(-42, -3, -28),
                        Vector3.new(-42, -3, -35),
                        Vector3.new(-42, -3, -42),
                        Vector3.new(-42, -3, -49),
                        Vector3.new(-42, -3, 7),
                        Vector3.new(-42, -3, 14),
                        Vector3.new(-42, -3, 21),
                        Vector3.new(-42, -3, 28),
                        Vector3.new(-42, -3, 35),
                        Vector3.new(-42, -3, 42),
                        Vector3.new(-42, -3, 49),
                        Vector3.new(-42, -3, 0),
                    }
                    
                    for _, position in ipairs(coordinates) do
                        place("Plant Box", 0, cframe * position)
                        task.wait(0.3)
                    end
                end,
                DoubleClick = false,
                Tooltip = 'Creates a farm'
            })
            
            -- Auto plant
            AutoHealBox:AddDropdown('Auto Heal Fruits', {
                Values = {'Bloodfruit', 'Bluefruit', 'Jelly', 'Berry', 'Lemon', 'Pumpkin', 'Orange', 'Apple','Strangefruit','Oddberry','Prickly Pear','Strawberry','Banana','Coconut'},
                Default = 1, -- number index of the value / string
                Multi = true, -- true / false, allows multiple choices to be selected
            
                Text = 'Fruits',
                Tooltip = 'fruits used to heal', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    FruitToEat = Value
                end
            })
        
            -- performance
            PerformanceBox:AddDropdown('Script Performance', {
                Values = {"Default", "Performant"},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Script Performance',
                Tooltip = 'Default = faster but laggy, Performance = slower but no lag', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    ScriptMode = tostring(Value)
                end
            })
            
            AutoHealBox:AddToggle('Auto Heal', {
                Text = 'Auto Heal',
                Default = false,
                Tooltip = 'Toggle on/off Auto Heal', 
                Callback = function(Value)
                    AutoHeal = Value
                end
            })
            
            AutoHealBox:AddSlider('Heal at health%', {
                Text = 'Heal at health%',
                Default = 75,
                Min = 0,
                Max = 100,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoHealAt = Value
                end
            })
        
            AutoHealBox:AddSlider('Heal Multiplier', {
                Text = 'Heal Multiplier',
                Default = 1,
                Min = 1,
                Max = 5,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HealLoop = Value
                end
            })
            AutoEatBox:AddDropdown('Auto Eat Fruit', {
                Values = {  'Bloodfruit', 'Bluefruit', 'Berry', 'Strangefruit', 'Orange', 'Lemon', 'Cooked Meat', 'Cooked Fish','Jelly', 'Sunfruit', 'Apple', 'Grain Mush','Oddberry','Strawberry','Banana','Prickly Pear'},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Eat Fruit',
                Tooltip = 'Fruit to auto eat', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    autoeatfood = Value
                end
            })
            AutoEatBox:AddSlider('Eat at Food%', {
                Text = 'Eat at Food%',
                Default = 0.7,
                Min = 0,
                Max = 1,
                Rounding = 1,
                Compact = false,
            
                Callback = function(Value)
                    autoeatpercentage = Value
                end
            })
            
            AutoEatBox:AddToggle('Auto Eat', {
                Text = 'Auto Eat',
                Default = false,
                Tooltip = 'Toggle on/off Auto Eat', 
                Callback = function(Value)
                    autoeat = Value
                end
            })
            -- waste eat
            WasteBox:AddDropdown('Drain Fruit', {
                Values = { 'Bloodfruit', 'Bluefruit', 'Berry', 'Strangefruit', 'Lemon', 'Cooked Meat', 'Cooked Fish','Jelly', 'Sunfruit', 'Apple', 'Grain Mush'},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Drain Fruit',
                Tooltip = 'Fruit to drain', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    wastefruit = Value
                end
            })
            WasteBox:AddSlider('Eat at Fruit%', {
                Text = 'Fruit # to drain at',
                Default = 1000,
                Min = 0,
                Max = 5000,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    wastefruitnumber = Value
                end
            })
            
            WasteBox:AddToggle('Auto Eat2', {
                Text = 'Drain Fruit',
                Default = false,
                Tooltip = 'Toggle on/off Drain Fruit', 
                Callback = function(Value)
                    WasteEat = Value
                end
            })
            -- walkspeed / local player shit
            LocalGroupBox:AddToggle('Walk Speed', {
                Text = 'Walk Speed',
                Default = false,
                Tooltip = 'Modifies your walkspeed', 
                Callback = function(Value)
                    WalkSpeedToggled = Value
                end
            })
            
            LocalGroupBox:AddSlider('Walk Speed Value', {
                Text = 'Walk Speed Value',
                Default = 16,
                Min = 16,
                Max = 25,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    WalkSpeedValue = Value
                end
            })
        
            LocalGroupBox:AddToggle('Jump Power', {
                Text = 'Jump Power',
                Default = false,
                Tooltip = 'Jump Power', 
                Callback = function(Value)
                    JumpPowerToggled = Value
                end
            })
            
            LocalGroupBox:AddSlider('Jump Power Value', {
                Text = 'Jump Power Value',
                Default = 7,
                Min = 1,
                Max = 150,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    JumpPowerValue = Value
                end
            })
        
            LocalGroupBox:AddToggle('Mountain Climber', {
                Text = 'Mountain Climber',
                Default = false,
                Tooltip = 'climbs mountains easily', 
                Callback = function(Value)
                    mountainclimber = Value
                end
            })
        
            LocalGroupBox:AddToggle('Infinite Jump', {
                Text = 'Infinite Jump',
                Default = false,
                Tooltip = 'infinite jump', 
                Callback = function(Value)
                    InfiniteJump = Value
                end
            })
        
            LocalGroupBox:AddToggle('Character Noclip', {
                Text = 'Character Noclip',
                Default = false,
                Tooltip = 'makes u noclip so u can walk through certain objects (ANTICHEAT)', 
                Callback = function(Value)
                    PlayerNoClip = Value
                end
            })
        
            LocalGroupBox:AddDivider()
            
            LocalGroupBox:AddToggle('Flight', {
                Text = 'Flight',
                Default = false,
                Tooltip = 'Hold space with noclip on and hopefully you get lucky and clip through', 
                Callback = function(Value)
                    FlyToggle = Value
                end
            })
        
            LocalGroupBox:AddSlider('Flight Speed', {
                Text = 'Flight Speed',
                Default = 1000,
                Min = 0,
                Max = 2500,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    FlySpeed = Value
                end
            })
            
            -- view player
            viewPlayerBox:AddToggle('Enable Spectate', {
                Text = 'Enable Spectate',
                Default = false,
                Tooltip = 'Enables Spectating Players', 
                Callback = function(Value)
                    SpectatePlayerToggle = Value
                end
            })
        
            viewPlayerBox:AddInput('Player Name', {
                Default = 'Player Name',
                Numeric = false,
                Finished = false,
            
                Text = 'Player Name',
                Tooltip = 'Player Name to Spectate',
            
                Placeholder = 'Player Name', 
        
                Callback = function(Value)
                    CurrentPlayerFindString = tostring(Value)
                end
            })
        
        
            -- kill auras
            KillAuraBox:AddToggle('Auto-Kill Critters', {
                Text = 'Auto-Kill Critters',
                Default = false,
                Tooltip = 'kills critters around u', 
                Callback = function(Value)
                    AutoKillCritters = Value
                end
            })
            
            KillAuraBox:AddSlider('Critters Range', {
                Text = 'Critters Range',
                Default = 12,
                Min = 0,
                Max = 50,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoKillCrittersRange = Value
                end
            })
            
            -- combat
            CombatBox:AddToggle('Kill Aura Players', {
                Text = 'Kill Aura Players',
                Default = false,
                Tooltip = 'kill auras', 
                Callback = function(Value)
                    KillAuraPlayers = Value
                end
            })
            
            CombatBox:AddSlider('Kill Aura Range', {
                Text = 'Kill Aura Range',
                Default = 12,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    KillAuraPlayersRange = Value
                end
            })
            
            CombatBox:AddToggle('Use Slash Animation', {
                Text = 'Use Slash Animation',
                Default = false,
                Tooltip = 'uses slash animation', 
                Callback = function(Value)
                    UseAnimation = Value
                end
            })
        
            CombatBox:AddDivider()
            
            CombatBox:AddToggle('Hitbox Expander', {
                Text = 'Hitbox Expander',
                Default = false,
                Tooltip = 'extends htiboxes', 
                Callback = function(Value)
                    HitboxExpander = Value
                end
            })
            
            
            CombatBox:AddSlider('Hitbox Range', {
                Text = 'Hitbox Range',
                Default = 12,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HitboxExpanderRange = Value
                end
            })
            
            CombatBox:AddToggle('Hitbox Expander Visible', {
                Text = 'Hitbox Expander Visible',
                Default = false,
                Tooltip = 'extends htiboxes Visible', 
                Callback = function(Value)
                    HitboxExpanderShown = Value
                end
            })
        
            CombatBox:AddToggle('Head Size', {
                Text = 'Head Size',
                Default = false,
                Tooltip = 'headsize', 
                Callback = function(Value)
                    HeadSizeToggle = Value
                end
            })
            
            
            CombatBox:AddSlider('Head Size Range', {
                Text = 'Head Size Range',
                Default = 6,
                Min = 0,
                Max = 6,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HeadSizeVariable = Value
                end
            })
            
        
            CombatBox:AddDivider()
        
            CombatBox:AddToggle('Spoof Projectile Hit', {
                Text = 'Spoof Projectile Hit',
                Default = false,
                Tooltip = 'spoofs the object u hit', 
                Callback = function(Value)
                    SpoofPartToggle = Value
                end
            })
            CombatBox:AddDropdown('Spoof Part', {
                Values = {"Head", "HumanoidRootPart"},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Spoof Part',
                Tooltip = 'spoofed part for spoofer', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    SpoofPart = Value
                end
            })
            CombatBox:AddDivider()
        
        
            
            CombatBox:AddToggle('Lock Player Toggle', {
                Text = 'Lock Player Toggle',
                Default = false,
                Tooltip = 'makes it so lock player works', 
                Callback = function(Value)
                    lockplayerallowed = Value
                end
            })
        
            CombatBox:AddSlider('Lock Range', {
                Text = 'Lock Range',
                Default = 10,
                Min = 10,
                Max = 30,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    lockrange = Value
                end
            })
        
            CombatBox:AddLabel('Auto Lock Nearest Player'):AddKeyPicker('KeyPicker', {
                Default = 'R', 
                SyncToggleState = false,
                Mode = 'Toggle',
                Text = 'Auto lockpick safes',
                NoUI = true, 
            
                -- Occurs when the keybind is clicked, Value is `true`/`false`
                Callback = function(Value)
                    lockplayer = Value
                end,
            
                -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
                ChangedCallback = function(New)
                    print('auto lock keybind changed to ', New)
                end
            })
        
        
        
            
            local findNearestPlayer = LPH_JIT_MAX(function()
                local nearestPlayer
                local nearestDistance = lockrange
                for _, otherPlayer in ipairs(Players:GetPlayers()) do
                    if otherPlayer ~= Player and otherPlayer.Character then
                        local distance = (otherPlayer.Character:FindFirstChild("HumanoidRootPart") and (otherPlayer.Character.HumanoidRootPart.Position - Player.Character.HumanoidRootPart.Position).Magnitude) or math.huge
                        if distance < nearestDistance then
                            nearestPlayer = otherPlayer
                            nearestDistance = distance
                        end
                    end
                end
                return nearestPlayer
            end)
            
            local faceNearestPlayer = LPH_JIT_MAX(function()
                local nearestPlayer = findNearestPlayer()
                if nearestPlayer then
                    local direction = (nearestPlayer.Character.HumanoidRootPart.Position - Player.Character.HumanoidRootPart.Position).unit
                    local horizontalDirection = Vector3.new(direction.X, 0, direction.Z).Unit
                    Player.Character.HumanoidRootPart.CFrame = CFrame.lookAt(Player.Character.HumanoidRootPart.Position,Player.Character.HumanoidRootPart.Position + horizontalDirection,Vector3.new(0, 1, 0))
                end
            end)
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait() do
                        if lockplayer and lockplayerallowed then
                            if not chatBarFocused then
                                faceNearestPlayer()
                            end
                        end
                        if Library.Unloaded then break end
                    end
                end)
            end)()
        
        
            CombatBox1:AddToggle('Auto-Bolt Nearby Player', {
                Text = 'Auto-Bolt Nearby Player',
                Default = false,
                Tooltip = 'if (voodoo bolt) it shoots nearest player', 
                Callback = function(Value)
                    VoodooBoltNearby = Value
                end
            })
        
            CombatBox1:AddToggle('Auto Voodoo Shield', {
                Text = 'Auto Voodoo Shield',
                Default = false,
                Tooltip = 'if (hp <= shield_hp) then use voodoo shield.', 
                Callback = function(Value)
                    AutoVoodooShield = Value
                end
            })
        
            CombatBox1:AddSlider('Shield At % Health', {
                Text = 'Shield At % Health',
                Default = 75,
                Min = 0,
                Max = 100,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoVoodooShieldHealth = Value
                end
            })
        
            CombatBox1:AddDivider()
        
            CombatBox1:AddToggle('Hut No-Clip', {
                Text = 'Hut No-Clip',
                Default = false,
                Tooltip = 'makes it so u can walk through huts', 
                Callback = function(Value)
                    HubNoClip = Value
                end
            })
        
            CombatBox1:AddToggle('Anti Dock', {
                Text = 'Anti Dock',
                Default = false,
                Tooltip = 'Anti Dock', 
                Callback = function(Value)
                    AntiDock = Value
                end
            })
            
            -- boats
            BoatModifier:AddToggle('Boat Speed', {
                Text = 'Boat Speed',
                Default = false,
                Tooltip = 'modifies the (raft/sail/boat) speed the user is on', 
                Callback = function(Value)
                    BoatSpeedToggle = Value
                end
            })
        
            BoatModifier:AddSlider('Boat Speed Strength', {
                Text = 'Boat Speed Strength',
                Default = 15,
                Min = 0,
                Max = 50,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    BoatSpeed = Value
                end
            })
        
            -- farming
            FarmingBox:AddToggle('Auto-Mine Resource', {
                Text = 'Auto Mine',
                Default = false,
                Tooltip = 'auto mine resources', 
                Callback = function(Value)
                    AutoMineResources = Value
                end
            })
            
            FarmingBox:AddSlider('Mine Range', {
                Text = 'Mine Range',
                Default = 20,
                Min = 0,
                Max = 20,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoMineResourcesRange = Value
                end
            })

            FarmingBox:AddToggle('Auto Drop Items', {
                Text = 'Auto Drop Items',
                Default = false,
                Tooltip = 'Automatically drop items', 
                Callback = function(Value)
                    AutoDrop = Value
                end
            })
            FarmingBox:AddInput('Item Name', {
                Default = 'Item Name',
                Numeric = false, -- true / false, only allows numbers
                Finished = false, -- true / false, only calls callback when you press enter
            
                Text = 'Item Name',
                Tooltip = 'Item to automatically drop', -- Information shown when you hover over the textbox
            
                Placeholder = 'Type item name', -- placeholder text when the box is empty
                -- MaxLength is also an option which is the max length of the text
            
                Callback = function(AutoDropItem)
                    ItemToDrop = AutoDropItem
                end
            })
            
            
            -- esp
            OreESPBox:AddToggle('Ore ESP', {
                Text = 'Ore ESP',
                Default = false,
                Tooltip = 'ore esp for ores', 
                Callback = function(Value)
                    OreESPToggle = Value
                end
            })
            
            OreESPBox:AddToggle('Show Ore Distance', {
                Text = 'Show Ore Distance',
                Default = false,
                Tooltip = 'show distance ore esp for ores', 
                Callback = function(Value)
                    ShowOreESPDistance = Value
                end
            })
            
            OreESPBox:AddToggle('Show Ore Health', {
                Text = 'Show Ore Health',
                Default = false,
                Tooltip = 'shows health', 
                Callback = function(Value)
                    ShowOreHealth = Value
                end
            })
            
            OreESPBox:AddDropdown('Shown Ores', {
                Values = {
                    "Coal Node",
                    "Iron Node",
                    "Gold Node",
                    "Adurite Rich Rock",
                    "Adurite Rock",
                    "Crystal Lode",
                    "Meteor Rock",
                    "Emerald Lode",
                    "Ancient Tree",
                    "Hateful God",
                    "Miserable God",
                    "Lonely God",
                    "Old God",
                    "Sleeping God",
                    "Furious God",
                },
                Default = 1,
                Multi = true,
            
                Text = 'Shown Ores',
                Tooltip = 'shows selected ores on esp', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    ShownOres = Value
                end
            })
            
            -- player esp
            PlayerESPBox:AddToggle('Player ESP', {
                Text = 'Player ESP',
                Default = false,
                Tooltip = 'shows player esp', 
                Callback = function(Value)
                    PlayerESPToggle = Value
                end
                }):AddColorPicker('Player ESP Color', {
                    Default = Color3.fromRGB(148, 50, 205), 
                    Title = 'Choose Player ESP Color', 
                    Transparency = nil,
            
                    Callback = function(Value)
                        PlayerESPColor = Value
                    end
                })
            
                PlayerESPBox:AddToggle('Show Health', {
                    Text = 'Show Health',
                    Default = false,
                    Tooltip = 'show health fr', 
                    Callback = function(Value)
                        HealthESP = Value
                    end
                })
                
                PlayerESPBox:AddToggle('Use Tribe Color', {
                    Text = 'Use Tribe Color',
                    Default = false,
                    Tooltip = 'showst ribe color instead', 
                    Callback = function(Value)
                        ShowTribeColor = Value
                    end
                })
            
                PlayerESPBox:AddDivider()
            
                PlayerESPBox:AddToggle('Show Armor', {
                    Text = 'Show Armor',
                    Default = false,
                    Tooltip = 'shows player esp', 
                    Callback = function(Value)
                        ShowArmor = Value
                    end
                }):AddColorPicker('Armor Color', {
                    Default = ArmorColor, 
                    Title = 'Armor Color', 
                    Transparency = nil,
            
                    Callback = function(Value)
                        ArmorColor = Value
                    end
                })
                
                PlayerESPBox:AddSlider('Armor ESP Size', {
                    Text = 'Armor ESP Size',
                    Default = 12,
                    Min = 0,
                    Max = 20,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        ArmorSize = Value
                    end
                })
            
                PlayerESPBox:AddDropdown('Armor Position', {
                    Values = {
                        "Left",
                        "Right",
                        "Down"
                    },
                    Default = 3,
                    Multi = false,
                
                    Text = 'Armor Position',
                    Tooltip = 'changes esp location', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        ArmorPosition = Value
                    end
                })
            
                -- sun autofarm thingy
                IslandAutoFarm:AddToggle('Sun AutoFarm', {
                    Text = 'Sun AutoFarm',
                    Default = false,
                    Tooltip = 'autofarms sun for u', 
                    Callback = function(Value)
                        SunIslandFarm = Value
                    end
                })
        
                IslandAutoFarm:AddToggle('Kill Ancient Tree', {
                    Text = 'Kill Ancient Tree',
                    Default = false,
                    Tooltip = 'adds ancient tree into the auto farm', 
                    Callback = function(Value)
                        KillAncientTree = Value
                    end
                })
                IslandAutoFarm:AddSlider('XP Tween Speed', {
                    Text = 'XP Farm Tween Speed',
                    Default = 8,
                    Min = 0,
                    Max = 12,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        xpfarmtween = Value
                    end
                })
            
            -- functions
            local getClosestCritter = LPH_NO_VIRTUALIZE(function(d)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Critters") then
                    for i,v in pairs(workspace.Critters:GetChildren()) do
                        if v:IsA("Model") and v.PrimaryPart ~= nil then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
        
            local AllowedForXP = {
                "Sun Tree",
                "Sun Shrub",
            }
        
            local Vector = {
                [1] = Vector3.new(-552, 310.2, -1204.6),
                [2] = Vector3.new(-565.07, 308.58, -1200.3),
                [3] = Vector3.new(-561.2, 309.09, -1188.4),
                [4] = Vector3.new(-548.5, 308.6, -1192.7),
            }
        
            local GetClosestCrystalLode = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, CrystalFarmDistance
                for _,v in pairs(workspace.Resources:GetChildren()) do
                    if tostring(v) == "Crystal Lode" and v.PrimaryPart ~= nil then
                        local Dist = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                        if Dist <= MaxDistance then
                            Closest = v
                            MaxDistance = Dist
                        end
                    end
                end
                return Closest, MaxDistance
            end)
        
            local GetClosestVectors = LPH_NO_VIRTUALIZE(function(Vectors)
                local Closest, MaxDistance = nil, 1000
                for i,v in pairs(Vectors) do
                    local Dist = (Player.Character.HumanoidRootPart.Position-v).Magnitude
                    if Dist <= MaxDistance then
                        MaxDistance = Dist
                        Closest = v
                    end
                end
                return Closest, MaxDistance
            end)
        
            local encodeData = LPH_NO_VIRTUALIZE(function(data)
                local success, errorcode = pcall(HttpService.JSONEncode, HttpService, data)
                if not success then
                    return false, "failed"
                end
                return errorcode
            end)
            
            local decodeData = LPH_NO_VIRTUALIZE(function(data)
                local success, errorcode = pcall(HttpService.JSONDecode, HttpService, data)
                if not success then
                    return false, "failed"
                end
                return errorcode
            end)
            
            local sortKeysAscending = LPH_NO_VIRTUALIZE(function(a, b)
                return tonumber(a) < tonumber(b)
            end)
        
            local GetClosestSunXP = LPH_NO_VIRTUALIZE(function()
                if KillAncientTree then
                    if not table.find(AllowedForXP, "Ancient Tree") then
                        table.insert(AllowedForXP, "Ancient Tree")
                    end
                else
                    if table.find(AllowedForXP, "Ancient Tree") then
                        table.remove(AllowedForXP, table.find(AllowedForXP, "Ancient Tree"))
                    end
                end
        
                local Closest, MaxDistance = nil, 400
                for _,v in next, workspace.Resources:GetChildren() do
                    if table.find(AllowedForXP, v.Name) and v.PrimaryPart then
                        local Distance = (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                        if Distance <= MaxDistance then
                            MaxDistance = Distance
                            Closest = v
                        end
                    end
                end
                if Closest.Name == "Ancient Tree" then
                    Closest, MaxDistance = GetClosestVectors(Vector)
                end
                return Closest, MaxDistance
            end)
            
            local getClosestPlayer = LPH_NO_VIRTUALIZE(function(d)
                local Closest, maxDistance = nil, d
                if Player and Player.Character then
                    for i,v in pairs(Players:GetPlayers()) do
                        if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and tribeCheck(Player.Character, v.Character) == false then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.Character.HumanoidRootPart.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
        
            local getClosestPlayerWithCircle = LPH_NO_VIRTUALIZE(function()
                local Closest, maxDistance = nil, VisualizerRadius
                if Player and Player.Character then
                    for i,v in pairs(Players:GetPlayers()) do
                        if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                            local ScreenPoint = workspace.CurrentCamera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
                            local vectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)-Vector2.new(ScreenPoint.X,ScreenPoint.Y)).Magnitude
                            if vectorDistance < maxDistance then
                                Closest = v.Character
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
            
            local getClosestResource = LPH_NO_VIRTUALIZE(function(d)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Resources") and Player.Character then
                    for i,v in pairs(workspace.Resources:GetChildren()) do
                        if v:IsA("Model") and (v.PrimaryPart ~= nil or v:FindFirstChild("Totem")) then
                            local p
                            if v.PrimaryPart ~= nil and v.PrimaryPart then
                                p = v.PrimaryPart
                            elseif v:FindFirstChild("Totem") then
                                p = v.Totem
                            end
                            local Distance = (Player.Character.HumanoidRootPart.Position-p.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
            
            local getClosestDrop = LPH_NO_VIRTUALIZE(function(d)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Items") then
                    for i,v in pairs(workspace.Items:GetChildren()) do
                        if v:IsA("BasePart") and v:FindFirstChild("Pickup") then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
        
            --[[
        
                GOLD AUTO FARM
        
            ]]
        
            local CFrames = {
                [1] = CFrame.new(927, -3, -1384, -0.748627365, 1.24680333e-12, 0.662991047, -5.95079921e-13, 1, -2.55251788e-12, -0.662991047, -2.30541736e-12, -0.748627365),
                [2] = CFrame.new(919.671631, -1.07742345, -1414.90417, 0.444287002, 4.17252225e-13, 0.895884514, -8.76578703e-13, 1, -3.10304422e-14, -0.895884514, -7.71526885e-13, 0.444287002),
                [3] = CFrame.new(941.970032, -2.2911973, -1426.06665, 0.886066914, 2.99214158e-13, -0.463557392, -8.6511312e-15, 1, 6.28937603e-13, 0.463557392, -5.53270483e-13, 0.886066914),
                [4] = CFrame.new(957.867004, -3.00000024, -1394.82922, -0.503059089, 1.51972524e-13, -0.864252031, 3.19310957e-13, 1, -1.00199483e-14, 0.864252031, -2.81005769e-13, -0.503059089),
            }
        
            local ToCook = {
                "Leaves",
                "Wood",
                "Log",
                "Coal",
            }
            
            local Cons = {}
            local Dropping = false
            local CurrentChest = nil
            local Float = nil
        
            
            local GetClosestIceChunk = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 100
                for i,v in pairs(workspace.Resources:GetChildren()) do
                    if tostring(v) == "Ice Chunk" and v:FindFirstChild("Health") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            local GetClosestGoldNode = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 100
                for i,v in pairs(workspace:GetChildren()) do
                    if tostring(v) == "Gold Node" and v:FindFirstChild("Health") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            local GetAllGoldNodes = LPH_NO_VIRTUALIZE(function()
                local Closest = {}
                for i,v in pairs(workspace:GetChildren()) do
                    if tostring(v) == "Gold Node" and v:FindFirstChild("Health") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < 15 then
                            table.insert(Closest, v.PrimaryPart)
                        end
                    end
                end
                return Closest
            end)
            
            local GetClosestCampFire = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 50
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if tostring(v) == "Campfire" and v:FindFirstChild("Interactable") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            local GetClosestChest = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 100
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if tostring(v) == "Chest" and v:FindFirstChild("Contents") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            
            local GetClosestCoinPress = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 50
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if tostring(v) == "Coin Press" and v:FindFirstChild("press") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            local GetCoins = LPH_NO_VIRTUALIZE(function()
                return workspace.Items:FindFirstChild("Coin2")
            end)
            
            local GetFullBag = LPH_NO_VIRTUALIZE(function(slider)
                if slider.Size.X.Scale >= 0.9 then
                    return true
                else
                    return false
                end
            end)
            
            local LookAtPart = LPH_NO_VIRTUALIZE(function(part)
                local humanoidRootPart = Player.Character.HumanoidRootPart
                local direction = (part.Position - humanoidRootPart.Position).Unit
                local lookVector = Vector3.new(direction.X, 0, direction.Z)
                humanoidRootPart.CFrame = CFrame.lookAt(humanoidRootPart.Position, humanoidRootPart.Position + lookVector)
            end)
            
            local IceToCFrame = LPH_NO_VIRTUALIZE(function(IcePosition)
                local closestCFrame = nil
                local closestDistance = math.huge
            
                for index, cframe in pairs(CFrames) do
                    local distance = (cframe.Position - IcePosition).Magnitude
                    if distance < closestDistance then
                        closestCFrame = cframe
                        closestDistance = distance
                    end
                end
                return closestCFrame, closestDistance
            end)
            
            --[[
        
                GOLD AUTO FARM MAIN SECTOR
        
            ]]
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(0.5) do
                        if BreakPoint then break end
                        local s, e = pcall(function()
                            if GoldFarm and Player.Character then
                                local playerGui = Player.PlayerGui
                                local mainGui = playerGui:FindFirstChild("MainGui")
                                local rightPanel = mainGui:FindFirstChild("RightPanel")
                                local inventoryList = rightPanel:FindFirstChild("Inventory"):FindFirstChild("List")
                                local statss = mainGui:FindFirstChild("Panels"):FindFirstChild("Stats")
                                local bag = statss:FindFirstChild("Bag"):FindFirstChild("Slider")
                                
                                local ClosestIce, Distance = GetClosestIceChunk()
                                local BrokenGoldNode, BrokenGoldPosition = GetClosestGoldNode()
                                if ClosestIce and BreakIceInstead then
                                    local IceToCFrameMethod, closestDistance = IceToCFrame(ClosestIce.PrimaryPart.Position)
                                    if IceToCFrameMethod then
                                        if BreakIceInstead and ClosestIce:FindFirstChild("Ice") then
                                            if MovementMethod == "Tween" then
                                                TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Distance/10), {CFrame = CFrame.new(Vector3.new(IceToCFrameMethod.Position.X,1.5,IceToCFrameMethod.Position.Z))}):Play()
                                            elseif MovementMethod == "MoveTo" then
                                                Player.Character.Humanoid:MoveTo(ClosestIce:FindFirstChild("Ice").Position)
                                            end
                                            Packets['SwingTool']['send']({GetEntityID(ClosestIce['Ice']['Parent'])})
                                        end
                                    end
                                end
                                if (bag and GetFullBag(bag) == false) then
                                    if BreakIceInstead == false then
                                        local GoldToCFrame, closestDistance = nil, nil
                                        if BrokenGoldNode then
                                            GoldToCFrame, closestDistance = IceToCFrame(BrokenGoldNode.PrimaryPart.Position)
                                        elseif ClosestIce then
                                            GoldToCFrame, closestDistance = IceToCFrame(ClosestIce.PrimaryPart.Position)
                                        end
                                        if GoldToCFrame then
                                            if MovementMethod == "Tween" then
                                                if BrokenGoldNode then
                                                    TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(BrokenGoldPosition/10), {CFrame = CFrame.new(GoldToCFrame.Position.X,1.5,GoldToCFrame.Position.Z)}):Play()
                                                elseif ClosestIce then
                                                    TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Distance/10), {CFrame = CFrame.new(GoldToCFrame.Position.X, 1.5, GoldToCFrame.Position.Z)}):Play()
                                                end
                                            elseif MovementMethod == "MoveTo" then
                                                if BrokenGoldNode then
                                                    Player.Character.Humanoid:MoveTo(BrokenGoldNode:FindFirstChild("Reference").Position)
                                                elseif ClosestIce then
                                                    Player.Character.Humanoid:MoveTo(ClosestIce:FindFirstChild("Reference").Position)
                                                end
                                            end
                                        end
                                        if ClosestIce then
                                            local AllGold = GetAllGoldNodes()
                                            table.insert(AllGold, workspace.Resources["Ice Chunk"].Ice)
                                            Packets['SwingTool']['send']({GetEntityID(ClosestIce['Ice']['Parent'])})
                                        end
                                    end
                                else
                                    Library:Notify("You have a full bag, attempting to drop and smelt gold!")
                                end
                                if AutoCookGold and ((bag and GetFullBag(bag)) or (not ClosestIce and not BrokenGoldNode)) then
                                    local ClosestCampFire, CampfirePosition = GetClosestCampFire()
                                    if ClosestCampFire and inventoryList:FindFirstChild('Raw Gold') then
                                        local campfireBoard = ClosestCampFire:FindFirstChild("Board")
                                        if campfireBoard then
                                            local Billboard = campfireBoard:FindFirstChild("Billboard")
                                            if Billboard then
                                                local TextLabel = Billboard:FindFirstChild("Backdrop"):FindFirstChild("TextLabel")
                                                if TextLabel and TextLabel.Text == "240" then
                                                    local hasItem = ""
                                                    for _, item in pairs(inventoryList:GetChildren()) do
                                                        if hasItem == "" and ToCook[item.Name] then
                                                            hasItem = item.Name
                                                        end
                                                    end
                                                    if hasItem ~= "" then
                                                        local itemID = ItemIDs["Leaves"] or ItemIDs["Logs"] -- Assuming ItemIDs is a table defined elsewhere
                                                        Packets.InteractStructure.send({
                                                            ["entityID"] = ClosestCampFire:GetAttribute("EntityID"),
                                                            ["itemID"] = itemID
                                                        })
                                                        hasItem = ""
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                                if inventoryList:FindFirstChild('Raw Gold') then
                                    local Chest, Pos = GetClosestChest()
                                    if Chest then
                                        if MovementMethod == "Tween" and Pos > 10 then
                                            TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Pos/10), {CFrame = CFrame.new(Vector3.new(Chest.PrimaryPart.CFrame.Position.X,1,Chest.PrimaryPart.CFrame.Position.Z),Vector3.new(0,0,0))+Vector3.new(4.5,0,4.5)}):Play()
                                        elseif MovementMethod == "MoveTo" then
                                            Player.Character.Humanoid:MoveTo(Chest:FindFirstChild("Reference").Position)
                                        end
                                        CurrentChest = Chest
                                        Dropping = true 
                                        if Pos <= 10 then
                                            Packets['DropBagItem']['send'](inventoryList:FindFirstChild('Raw Gold').LayoutOrder)
                                        end
                                        task.delay(2, function()
                                            Dropping = false
                                        end)
                                    end
                                end
                                if AutoPressCoins and inventoryList:FindFirstChild("Gold") then
                                    local ClosestPress = GetClosestCoinPress()
                                    if ClosestPress then
                                        Packets.Events.InteractStructure.send({
                                            ["entityID"] = ClosestPress:GetAttribute("EntityID"),
                                            ["itemID"] = ItemIDs["Gold"]
                                        })
                                    end
                                end
                                if AutoCollectCoins then
                                    local Coin = GetCoins()
                                    if Coin then
                                        Packets['Pickup']['send'](GetEntityID(Coin))
                                    end
                                end
                            end
                        end)
                        if not s then warn(e) end
                    end
                end)
            end)()
            
        --                                        Packets['usebagitem']['send'](GetEntityID(Coin))

            LPH_NO_VIRTUALIZE(function()
                Cons[1] = game:GetService("RunService").Stepped:Connect(function()
                    if GoldFarm then
                        if CurrentChest ~= nil then
                            LookAtPart(CurrentChest.PrimaryPart)
                        end
                        if Float ~= nil then
                            Float.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.new(0, -2.7 ,0)
                        else
                            Float = Instance.new('Part')
                            Float.Name = "No."
                            Float.Parent = Player.Character
                            Float.Transparency = 0.8
                            Float.Size = Vector3.new(2,0.1,2)
                            Float.Anchored = true
                        end
                        Player.Character.HumanoidRootPart.CFrame = CFrame.new(Player.Character.HumanoidRootPart.CFrame.Position.X, 1.5, Player.Character.HumanoidRootPart.CFrame.Position.Z)
                    end
                    if ColorShift then
                        Lighting.ColorShift_Bottom = ColorShiftColor
                        Lighting.ColorShift_Top = ColorShiftColor
                    end
                    if OutDoorAmbient then
                        Lighting.OutdoorAmbient = OutDoorAmbienceColor
                    end
                    if Ambience then
                        Lighting.Ambient = AmbienceColor
                    end
                    if FullBright then
                        Lighting.GlobalShadows = false
                    elseif not FullBright and Lighting.GlobalShadows == false then
                        Lighting.GlobalShadows = true
                    end
                    if NoFog then
                        Lighting.FogEnd = 9e9
                    else
                        Lighting.FogEnd = 2000
                    end
                    if SpectatePlayerToggle then
                        local playerToSpectate = nil
                        for i,v in pairs(Players:GetPlayers()) do
                            if string.find(tostring(v), CurrentPlayerFindString) or string.find(tostring(v.DisplayName), CurrentPlayerFindString) then
                                if v.Character and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChild("UpperTorso") and v.Character:FindFirstChild("HumanoidRootPart") then
                                    playerToSpectate = v.Character:FindFirstChildOfClass("Humanoid")
                                    break
                                end
                            end
                        end
                        workspace.CurrentCamera.CameraSubject = playerToSpectate
                    else
                        if workspace.CurrentCamera.CameraSubject ~= Player.Character.Humanoid then
                            workspace.CurrentCamera.CameraSubject = Player.Character.Humanoid
                        end
                    end
                end)
            end)()
                
            LPH_NO_VIRTUALIZE(function()
                Cons[2] = workspace.Items.ChildAdded:Connect(function(child)
                    if tostring(child) == "Raw Gold" and not Dropping and GoldFarm then
                        Packets['Pickup']['send'](GetEntityID(child))
                    end
                end)
                
                Cons[3] = workspace.Items.ChildAdded:Connect(function(child)
                    if tostring(child) == "Gold" and GoldFarm then
                        Packets['Pickup']['send'](GetEntityID(child))
                    end
                end)
                
                Cons[4] = workspace.Deployables.DescendantAdded:Connect(function(child)
                    if tostring(child) == "Gold" and GoldFarm then
                        Packets['Pickup']['send'](GetEntityID(child))
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if v:IsA("Model") and v:FindFirstChild("Door") then
                        if HubNoClip then
                            v.Door.CanCollide = false
                            v.Door.Transparency = 0.7
                        end
                    end
                end
                workspace.Deployables.ChildAdded:Connect(function(v)
                    if v:IsA("Model") and v:FindFirstChild("Door") then
                        if HubNoClip then
                            v.Door.CanCollide = false
                            v.Door.Transparency = 0.7
                        end
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while true do
                        local s,e = pcall(function()
                            if CrystalAutoFarm then
                                local ClosestLode, Dist = GetClosestCrystalLode()
                                if ClosestLode and Dist and Player.Character and Player.Character.HumanoidRootPart then
                                    local Tween = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Dist/CrystalTweenSpeed, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {CFrame = ClosestLode.PrimaryPart.CFrame})
                                    Tween:Play()
                                    Tween.Completed:Wait()
                                end
                            end
                        end)
                        if not s then warn(e) end
                        task.wait(1)
                    end
                end)
            end)()
        
            -- inf jump
            local infJumpDebounce = false
            Connections.infjump = UserInputService.JumpRequest:Connect(function()
                if not infJumpDebounce and InfiniteJump then
                    infJumpDebounce = true
                    Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait()
                    infJumpDebounce = false
                end
            end)
        
            local food1 = {
                "Bloodfruit",
                "Bluefruit",
                "Berry",
                "Strangefruit",
                "Lemon",
                "Cooked Meat",
                "Jelly",
                "Cooked Fish",
                "Cloudberry",
                "Apple",
                "Sunfruit",
                "Grain Mush"
            }
            
            -- hooks
            LPH_NO_VIRTUALIZE(function()
                local SpoofProjectileHit; SpoofProjectileHit = hookmetamethod(game, "__namecall", function(Self, ...)
                    if not checkcaller() and typeof(Self) == "Instance" and SpoofPartToggle then
                        if (tostring(Self) == "ProjectileImpact" and getnamecallmethod() == "FireServer") then
                            local Args = {...}
                            if (Args[1] and Args[1].Parent and Args[1].Parent[SpoofPart]) then
                                Args[1] = Args[1].Parent[SpoofPart]
                                return Self.FireServer(Self, table.unpack(Args))
                            end
                        end
                    end
                    return SpoofProjectileHit(Self, ...)
                end)
                local antiBanName; antiBanName = hookmetamethod(game, "__namecall", function(Self, ...)
                    if checkcaller() and typeof(Self) == "Instance" and scriptbanprotection then
                        if tostring(Self) == "AdminPanel" then
                            if (getnamecallmethod() == "fireServer" or getnamecallmethod() == "FireServer") then
                                Library.Notify(Library, "⚠️ A script tried to ban your account! [SCRIPT BAN PROTECTION]")
                                return 
                            end
                        end
                    end
                    return antiBanName(Self, ...)
                end)
                local antiBanIndex; antiBanIndex = hookmetamethod(game, "__index", function(Self,Key)
                    if checkcaller() and typeof(Self) == "Instance" and scriptbanprotection then
                        if tostring(Self) == "AdminPanel" then
                            if tostring(string.split(Key, "\0")[1]) == "FireServer" or tostring(string.split(Key, "\0")[1]) == "fireServer" then
                                Library:Notify("⚠️ A script tried to ban your account! [SCRIPT BAN PROTECTION]")
                                return
                            end
                        end
                    end
                    return antiBanIndex(Self,Key)
                end)
            end)()
        
            local FlyVelocity = nil
            LPH_NO_VIRTUALIZE(function()
                Connections.FlightLoop = RunService.RenderStepped:Connect(function()
                    if FlyToggle then
                        if FlyVelocity == nil then
                            FlyVelocity = Instance.new("BodyVelocity")
                            FlyVelocity.Velocity = Vector3.new(0,0,0)
                            FlyVelocity.P = math.huge
                            FlyVelocity.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
                        end
                        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                            setfflag("S2PhysicsSenderRate", "0.01")
                            sethiddenproperty(Player.Character.HumanoidRootPart, "NetworkIsSleeping", true)           
                            Player.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
                            FlyVelocity.Parent = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                            FlyVelocity.Velocity = Vector3.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector*100,FlySpeed,game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector*100)
                            Player.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
                            sethiddenproperty(Player.Character.HumanoidRootPart, "NetworkIsSleeping", false)  
                        else
                            setfflag("S2PhysicsSenderRate", "15")
                            FlyVelocity:Destroy()
                            FlyVelocity = nil
                        end
                    else
                        if FlyVelocity then
                            setfflag("S2PhysicsSenderRate", "15")
                            FlyVelocity:Destroy()
                            FlyVelocity = nil
                        end
                    end
                end)
            end)()
            
            local HarvestDebounce = false
            local PlantDebounce = false
            local MineDebounce = false
            local CollectDebounce = false
            local VoodooDebounce = false
            local Harvested = {}
            
            local ConnectedToWalkSpeed = nil
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(0.1) do
                        if BreakPoint then break end
                        pcall(function()
        
                        
                        if Player and Player.Character then
                            if WalkSpeedToggled then
                                Player.Character.Humanoid.WalkSpeed = WalkSpeedValue
                                if ConnectedToWalkSpeed == nil then
                                    ConnectedToWalkSpeed = Player.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                                        Player.Character.Humanoid.WalkSpeed = WalkSpeedValue
                                    end)
                                end
                            else
                                if ConnectedToWalkSpeed ~= nil then
                                    ConnectedToWalkSpeed:Disconnect()
                                    ConnectedToWalkSpeed = nil
                                end
                            end
        
                            if AntiDock then
                                local RayParams = RaycastParams.new()
                                RayParams.FilterDescendantsInstances = {Player.Character}
                                RayParams.FilterType = Enum.RaycastFilterType.Exclude
                                local Ray = workspace:Raycast(Player.Character.HumanoidRootPart.Position, Vector3.new(0, 4, 0), RayParams)
                                if Ray and Ray.Instance and tostring(Ray.Instance) == "StructureWood" then
                                    Player.Character.HumanoidRootPart.CFrame *= CFrame.new(0, 2, 0)
                                end
                            end
        
                            if HubNoClip then
                                for i,v in pairs(workspace.Deployables:GetChildren()) do
                                    if v:IsA("Model") and v:FindFirstChild("Door") and v.Door.CanCollide == true then
                                        if HubNoClip then
                                            v.Door.CanCollide = false
                                            v.Door.Transparency = 0.7
                                        end
                                    end
                                end
                            end
                --topbar
                            local Inventory = Player.PlayerGui:FindFirstChild("MainGui"):FindFirstChild("RightPanel"):FindFirstChild("Inventory"):FindFirstChild("List")
                
                            -- kill aura
                            if AutoKillCritters then
                                local crit = getClosestCritter(AutoKillCrittersRange)
                                if crit and crit.PrimaryPart then
                                    Packets['SwingTool']['send']({
                                        GetEntityID(crit),
                                    })
                                end
                            end
                            -- coin press
                            if coinpress then
                                for _, v in pairs(workspace.Deployables:GetChildren()) do
                                    if v.Name == "Coin Press" and (Player.Character.Head.Position - v.PrimaryPart.Position).magnitude < coinpressrange then
                                        Packets.InteractStructure.send({
                                            ["entityID"] = v:GetAttribute("EntityID"),
                                            ["itemID"] = ItemIDs["Gold"]
                                        })
                                    end
                                end
                            end
--campfireaura                            
                            -- essence pickup
                            if SunIslandFarm then
                                for i,v in pairs(workspace.Resources:GetChildren()) do
                                    if tostring(v) == "Essence" and (Player.Character.HumanoidRootPart.Position-v.Position).Magnitude < 25 then
                                        Packets['Pickup']['send'](GetEntityID(v))
                                    end
                                end
                            end
                            -- mountain climber
                            if mountainclimber then
                                Player.Character.Humanoid.MaxSlopeAngle = 300
                            else
                                Player.Character.Humanoid.MaxSlopeAngle = 46
                            end
        
                            if Inventory then
                                if WasteEat then 
                                    local drain = Inventory[wastefruit].QuantityImage.QuantityText.Text   
                                    if drain and tonumber(drain) >= tonumber(wastefruitnumber) then
                                        Packets['UseBagItem']['send'](Inventory:FindFirstChild(wastefruit).LayoutOrder)
                                        Packets['UseBagItem']['send'](Inventory:FindFirstChild(wastefruit).LayoutOrder)
                                    end
                                end
                            end
        
                            -- interactstruc
                            if KillAuraPlayers then
                                local closest_plr = getClosestPlayer(KillAuraPlayersRange)
                                if closest_plr and closest_plr.Character and closest_plr.Character.PrimaryPart then
                                    if UseAnimation then
                                        local a = ReplicatedStorage.Animations.Slash
                                        if a then 
                                            if not IsAnimationPlaying then
                                                IsAnimationPlaying = true
                                                local anim = Player.Character.Humanoid:LoadAnimation(a)
                                                anim:Play()
                                                local c; c = anim.Ended:Connect(function() IsAnimationPlaying = false c:Disconnect() end)
                                                local c2; c2 = anim.Stopped:Connect(function() IsAnimationPlaying = false c2:Disconnect() end)
                                            end
                                        end
                                    end
                                    Packets['SwingTool']['send']({
                                        GetEntityID(closest_plr.Character),
                                    })
                                end
                            end
            
                            if HitboxExpander then
                                for _,v in pairs(Players:GetPlayers()) do
                                    if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChildOfClass("Humanoid") then
                                        if HitboxExpanderShown then
                                            v.Character:FindFirstChild("HumanoidRootPart").Transparency = 0.7
                                        else
                                            if v.Character:FindFirstChild("HumanoidRootPart").Transparency ~= 1 then
                                                v.Character:FindFirstChild("HumanoidRootPart").Transparency = 1
                                            end
                                        end
                                        if v.Character.Humanoid.SeatPart == nil then
                                            v.Character:FindFirstChild("HumanoidRootPart").CanCollide = false
                                            v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(HitboxExpanderRange,HitboxExpanderRange,HitboxExpanderRange)
                                        else
                                            if v.Character:FindFirstChild("HumanoidRootPart").Size ~= Vector3.new(2, 2, 1) then
                                                v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(2, 2, 1)
                                            end
                                        end
                                    end
                                end
                            else
                                for _,v in pairs(Players:GetPlayers()) do
                                    if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                                        if v.Character:FindFirstChild("HumanoidRootPart").Transparency ~= 1 then
                                            v.Character:FindFirstChild("HumanoidRootPart").Transparency = 1
                                        end
                                        if v.Character:FindFirstChild("HumanoidRootPart").Size ~= Vector3.new(2, 2, 1) then
                                            v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(2, 2, 1)
                                        end
                                    end
                                end
                            end
        
                            if HeadSizeToggle then
                                for _,v in pairs(Players:GetPlayers()) do
                                    if v ~= Player and v.Character and v.Character:FindFirstChild("Head") then
                                        v.Character:FindFirstChild("Head").Size = Vector3.new(HeadSizeVariable,HeadSizeVariable,HeadSizeVariable)
                                    end
                                end
                            else
                                for _,v in pairs(Players:GetPlayers()) do
                                    if v ~= Player and v.Character and v.Character:FindFirstChild("Head") and v.Character.Head.Size ~= Vector3.new(2, 1, 1) then
                                        v.Character:FindFirstChild("Head").Size = Vector3.new(2, 1, 1)
                                    end
                                end
                            end
                
                            if VoodooBoltNearby then
                                local ClosestPlayer = getClosestPlayer(100)
                                if ClosestPlayer then
                                    if not VoodooDebounce then
                                        VoodooDebounce = true
                                        Packets['VoodooSpell']['send'](ClosestPlayer.Character.PrimaryPart.Position)
                                    end
                                end
                            end
                            if AutoVoodooShield then
                                if (Player.Character.Humanoid.Health/Player.Character.Humanoid.MaxHealth*100) <= AutoVoodooShieldHealth and not Player.Character:FindFirstChild("Shield") then
                                    Packets['VoodooSpell']['send'](Player.Character.PrimaryPart.Position)
                                end
                            end
                        else
                            HarvestDebounce = false
                            PlantDebounce = false
                            MineDebounce = false
                            VoodooDebounce = false
                            CollectDebounce = false
                        end -- end of char check
                    end)
                    end
                end)
            end)()
        
            
            LPH_NO_VIRTUALIZE(function()
                Connections.HealLoop = RunService.RenderStepped:Connect(function()
                    pcall(function()
                        local Inventory = Player.PlayerGui.MainGui.RightPanel.Inventory.List
                        if Inventory then
                            if AutoHeal then
                                if (Player.Character.Humanoid.Health / Player.Character.Humanoid.MaxHealth * 100) <= AutoHealAt then
                                    for i = 1, HealLoop do
                                        if type(FruitToEat) == "table" and getTableSize(FruitToEat) > 0 then
                                            for name, val in pairs(FruitToEat) do
                                                if val == true then
                                                    if Inventory:FindFirstChild(name) then
                                                        Packets['UseBagItem']['send'](Inventory:FindFirstChild(name).LayoutOrder)
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                            if AutoDrop then
                                if Inventory:FindFirstChild(ItemToDrop) then
                                    Packets['DropBagItem']['send'](Inventory:FindFirstChild(ItemToDrop).LayoutOrder)
                                end
                            end
                        end
                    end)
                end)
            end)()
        --coin press
            LPH_NO_VIRTUALIZE(function()
                Connections.NoClipLoopForCharacter = RunService.Stepped:Connect(function()
                    if PlayerNoClip then
                        if Player.Character then
                            for _,child in pairs(Player.Character:GetDescendants()) do
                                if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= Float then
                                    child.CanCollide = false
                                end
                            end
                        end
                    end
                    if BoatSpeedToggle then
                        if Player.Character and Player.Character.Humanoid and Player.Character.Humanoid.SeatPart then
                            if Player.Character.Humanoid.SeatPart:FindFirstChild("BodyVelocity") then
                                Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity = Vector3.new(Player.Character.HumanoidRootPart.CFrame.LookVector.X*BoatSpeed, Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity.Y, Player.Character.HumanoidRootPart.CFrame.LookVector.Z*BoatSpeed)
                            end
                        end
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                Connections.NoClipLoopForCharacter = RunService.Stepped:Connect(function()
                    if PlayerNoClip then
                        if Player.Character then
                            for _,child in pairs(Player.Character:GetDescendants()) do
                                if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= Float then
                                    child.CanCollide = false
                                end
                            end
                        end
                    end
                    if BoatSpeedToggle then
                        if Player.Character and Player.Character.Humanoid and Player.Character.Humanoid.SeatPart then
                            if Player.Character.Humanoid.SeatPart:FindFirstChild("BodyVelocity") then
                                Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity = Vector3.new(Player.Character.HumanoidRootPart.CFrame.LookVector.X*BoatSpeed, Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity.Y, Player.Character.HumanoidRootPart.CFrame.LookVector.Z*BoatSpeed)
                            end
                        end
                    end
                end)
            end)()
        
LPH_NO_VIRTUALIZE(function()
    task.spawn(function()
        while task.wait(0.5) do
            if BreakPoint then break end
            local s,e = pcall(function()
                if AutoMineResources then
                    local Params = RaycastParams.new()
                    Params.FilterDescendantsInstances = {Player.Character}
                    Params.FilterType = Enum.RaycastFilterType.Blacklist
                    if ScriptMode == "Performant" then
                        for i,v in pairs(workspace:GetPartBoundsInBox(Player.Character.HumanoidRootPart.CFrame, Vector3.new(AutoMineResourcesRange,AutoMineResourcesRange,AutoMineResourcesRange), Params)) do
                            if v.Parent and v.Parent:IsA("Model") and v.Parent:FindFirstChild("Health") and not v.Parent:FindFirstChildOfClass("Humanoid") then
                                local ToHit = {}
                                for i2,v2 in pairs(v.Parent:GetChildren()) do
                                    if v2:IsA("BasePart") or v2:IsA("MeshPart") then
                                        table.insert(ToHit, v2)
                                    end
                                end
                                Packets['SwingTool']['send']({
                                    GetEntityID(ToHit),
                                })
                            end
                        end
                    else
                        local closest_resource = getClosestResource(AutoMineResourcesRange)
                        if closest_resource then
                            Packets['SwingTool']['send']({
                                GetEntityID(closest_resource),
                            })
                        end
                    end
                end
                
                if specificpickup then
                    for i,v in pairs(workspace.Items:GetChildren()) do
                        for i2,v2 in pairs(pickupitem) do
                            if tostring(v) == tostring(i2) and (Player.Character.HumanoidRootPart.Position-v.Position).Magnitude < 25 then
                                Packets['Pickup']['send'](GetEntityID(v))
                            end
                        end
                    end
                    for i,v in pairs(workspace.Deployables:GetChildren()) do
                        if tostring(v) == "Chest" and v:FindFirstChild("Contents") then
                            for i2,v2 in pairs(pickupitem) do
                                if v.Contents:FindFirstChild(i2) and (Player.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude < 25 then
                                    Packets['Pickup']['send'](GetEntityID(v.Contents:FindFirstChild(i2)))
                                end
                            end
                        end
                    end
                end
                
                if consume then
                    for _, v in pairs(workspace.Items:GetChildren()) do
                        if table.find(food1, v.Name) and (Player.Character.HumanoidRootPart.Position - v.Position).Magnitude < 50 then
                            Packets['Consume']['send'](GetEntityID(v))
                        end
                    end
                end
                if AutoPickup then 
                    for i,v in pairs(workspace.Items:GetChildren()) do
                        if v:FindFirstChild("Pickup") and (Player.Character.HumanoidRootPart.Position - v.Position).Magnitude < 25 then
                            Packets['Pickup']['send'](GetEntityID(v))
                        end
                    end
                    local Params = RaycastParams.new()
                    Params.FilterDescendantsInstances = {Player.Character}
                    Params.FilterType = Enum.RaycastFilterType.Blacklist
                    for i,v in pairs(workspace:GetPartBoundsInBox(Player.Character.HumanoidRootPart.CFrame, Vector3.new(AuotPickupRange,AuotPickupRange,AuotPickupRange), Params)) do
                        if v:IsA("BasePart") and v:FindFirstChild("Pickup") and tostring(v.Parent) == "Items" then
                            Packets['Pickup']['send'](GetEntityID(v))
                        end
                    end
                end
            end)
            if not s then warn("y", s, e) end
        end
    end)
end)()

            
            local C
            local C2
            local CurrentBush = nil
        
            local speed = 20 -- Adjust the speed value as needed
--autoharvest
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(0.08) do
                        if BreakPoint then break end
                        if AutoFarm == true then
                            local s, e = pcall(function()
                                local BerryBush, Distance = getClosestBerryBushes(100, SelectedFruit) -- Set the distance to 100
                                local closest_PlantBoxes = getPlantBoxesInRange(100, SelectedFruit) -- Set the distance to 100
                                if not IsTweening then
                                    IsTweening = true
                                    if BerryBush ~= nil then
                                        CurrentBush = BerryBush
                                        local tweenDuration = Distance / speed -- Calculate tween duration based on distance and speed
                                        T = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(tweenDuration, Enum.EasingStyle.Linear), {CFrame = CFrame.new(BerryBush.PrimaryPart.CFrame.Position.X, BerryBush.PrimaryPart.CFrame.Position.Y + 4, BerryBush.PrimaryPart.CFrame.Position.Z)})
                                        T:Play()
                                        local C; C = T.Completed:Connect(function() 
                                            IsTweening = false
                                            T = nil
                                            C:Disconnect() 
                                        end)
                                    else
                                        if getTableSize(closest_PlantBoxes) > 0 then
                                            local Closest = closest_PlantBoxes[1]
                                            if Closest and Closest.model ~= nil and Closest.distance ~= nil and Closest.model.PrimaryPart ~= nil then
                                                if Closest.model then
                                                    TweeningToPlantBox = Closest.model
                                                    local tweenDuration = Closest.distance / speed -- Calculate tween duration based on distance and speed
                                                    T2 = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(tweenDuration, Enum.EasingStyle.Linear), {CFrame = CFrame.new(Closest.model.PrimaryPart.CFrame.Position.X, Closest.model.PrimaryPart.CFrame.Position.Y + 4, Closest.model.PrimaryPart.CFrame.Position.Z)})
                                                    T2:Play()
                                                    local C; C = T2.Completed:Connect(function() 
                                                        IsTweening = false
                                                        T2 = nil
                                                        C:Disconnect() 
                                                    end)
                                                end
                                            end
                                        end
                                    end
                                end
                                if IsTweening and getTableSize(closest_PlantBoxes) == 0 and BerryBush == nil then
                                    IsTweening = false
                                end
                                if TweeningToPlantBox ~= nil then
                                    if TweeningToPlantBox:FindFirstChild(SelectedFruit) then
                                        if T2 then 
                                            T2:Cancel()
                                            T2 = nil
                                        end
                                        TweeningToPlantBox = nil
                                    end
                                end
                                if CurrentBush ~= nil then
                                    if CurrentBush.Parent ~= workspace then
                                        if T then
                                            T:Cancel()
                                            T = nil
                                        end
                                        CurrentBush = nil
                                    end
                                end
                            end)
                            if not s then warn("AUTOFARMING",s,e) end
                        else
                            if T then
                                T:Cancel()
                                T = nil
                            end
                            if T2 then
                                T2:Cancel()
                                T2 = nil
                            end
                            if IsTweening then
                                IsTweening = false
                            end
                        end
                    end
                end)
            end)()
--speed            
        
            local TweeningForSun = false
            local FirstTween = nil
        
            function convert_time(seconds)
                local hours = math.floor(seconds / 3600)
                local minutes = math.floor((seconds % 3600) / 60)
                local remaining_seconds = seconds % 60
                return hours, minutes, remaining_seconds
            end
            
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(1) do
                        if BreakPoint then break end
                        if SunIslandFarm then
                            local s,e = pcall(function()
                                local ClosestSunFarm, ClosestDistance = GetClosestSunXP()
                                if ClosestSunFarm and Player.Character and Player.Character.HumanoidRootPart and not TweeningForSun then
                                    TweeningForSun = true
                                    local TweenToPart = typeof(ClosestSunFarm) == "Vector3" and CFrame.new(ClosestSunFarm) or ClosestSunFarm.PrimaryPart.CFrame
                                    FirstTween = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(ClosestDistance / xpfarmtween), {CFrame = TweenToPart + Vector3.new(1.5, 3, -1.5)})
                                    FirstTween:Play()
                                    local C; C = FirstTween.Completed:Connect(function()
                                        C:Disconnect()
                                        TweeningForSun = false
                                    end)
                                end
                            end)
                            if not s then warn(e) end
                        elseif TweeningForSun then
                            TweeningForSun = false
                            if FirstTween then FirstTween:Cancel() end
                            FirstTween = nil
                        end
            
                        local x,y = pcall(function()
                            local Inventory = Player.PlayerGui:FindFirstChild("MainGui") and Player.PlayerGui.MainGui.RightPanel.Inventory.List
                            if autoeat and Inventory then
                                local food = Player.PlayerGui.MainGui.Panels.Stats.Food.Slider.Size.X.Scale
                                if food <= autoeatpercentage then
                                    Packets.UseBagItem.send(Inventory:FindFirstChild(autoeatfood).LayoutOrder)
                                end
                            end
                            if CurrentGold == nil and GoldFarm then
                                if game.Players.LocalPlayer.PlayerGui.MainGui.LeftPanel.Shop.CoinsText then
                                    CurrentGold = tonumber(game.Players.LocalPlayer.PlayerGui.MainGui.LeftPanel.Shop.CoinsText.Text)
                                end
                            end
                            if CurrentFruit == nil and AutoPlant and Inventory and Inventory:FindFirstChild(CurrentFruit) then
                                CurrentFruit = tonumber(Inventory:FindFirstChild(CurrentFruit).QuantityImage.QuantityText.Text)
                            end
                            if (tick()-LastPlantFarm) >= LogTimePlant and PlantFarmWebhook ~= "" and CurrentFruit ~= nil and AutoPlant then
                                LastPlantFarm = tick()
                                local hours,minutes,seconds = convert_time(math.floor(tick()-TotalPlantFarm))
                                data = SendWebhook(
                                    "You gained " .. tostring(tonumber(Inventory:FindFirstChild(CurrentFruit).QuantityImage.QuantityText.Text)-tonumber(CurrentFruit)) .. " " .. tostring(CurrentFruit),
                                    "Farm Duration: " .. tostring(hours) .."h".." "..tostring(minutes).."m".." "..tostring(seconds).."s",
                                    "Fruit Farm"
                                )
                                request({Url=PlantFarmWebhook,Body=data,Method="POST",Headers={["content-type"]="application/json"}})
                            end
                            if (tick()-LastGoldFarm) >= LogTimeGold and GoldFarmWebhook ~= "" and CurrentGold ~= nil and GoldFarm then
                                LastGoldFarm = tick()
                                local hours,minutes,seconds = convert_time(math.floor(tick()-TotalGoldFarm))
                                data = SendWebhook(
                                    "You gained " .. tostring(tonumber(Player.PlayerGui.MainGui.Panels.Topbar.CoinsText.Text)-tonumber(CurrentGold)) .. " Coins",
                                    "Farm Duration: " .. tostring(hours) .."h".." "..tostring(minutes).."m".." "..tostring(seconds).."s",
                                    "Coin/Gold Farm"
                                )
                                request({Url=GoldFarmWebhook,Body=data,Method="POST",Headers={["content-type"]="application/json"}})
                            end
                            if (tick()-LastRebirthFarm) >= LogTimeMojo and MojoFarmWebhook ~= "" and CurrentMojos ~= nil and AutoRebirth then
                                LastRebirthFarm = tick()
                                local hours,minutes,seconds = convert_time(math.floor(tick()-TotalRebirthFarm))
                                data = SendWebhook(
                                    "You gained " .. tostring(tonumber(getrenv()._G.data.mojo)-tonumber(CurrentMojos)) .. " Mojos",
                                    "Farm Duration: " .. tostring(hours) .."h".." "..tostring(minutes).."m".." "..tostring(seconds).."s",
                                    "Rebirth/Mojo Farm"
                                )
                                request({Url=MojoFarmWebhook,Body=data,Method="POST",Headers={["content-type"]="application/json"}})
                            end
                        end)
                        if not x then warn(y) end
                    end
                end)
            end)()
            
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(1) do
                        if BreakPoint then break end
                        pcall(function()
                            if CampfireAura then 
                                for _, v in pairs(workspace.Deployables:GetChildren()) do
                                    if v.Name == "Campfire" and (Player.Character.Head.Position - v.PrimaryPart.Position).magnitude < campfireradius then
                                        if v:FindFirstChild("Board") and v.Board:FindFirstChildOfClass("BillboardGui") then
                                            if v.Board:FindFirstChild("Billboard"):FindFirstChild("Backdrop"):FindFirstChild("TextLabel").Text == "70" then
                                                for i2,v2 in pairs(CampfireMaterial) do
                                                    Packets.InteractStructure.send({
                                                        ["entityID"] = v:GetAttribute("EntityID"),
                                                        ["itemID"] = ItemIDs["CampfireMaterial"]
                                                    })
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end)
                    end
                end)
            end)()
            
            
        
                local hookAimbotfunc = function()
                task.spawn(function()
                    repeat task.wait(1) until FuncFoundForAimbot ~= nil
                    Library:Notify("✅ Hooked Aimbot function...")
                    local checkcaller = checkcaller
                    local hookAimbot
                    hookAimbot = hookfunction(FuncFoundForAimbot, function(...)
                        if not checkcaller() and BowAimbot then
                            local Args = {...}
                            if Args[3] and typeof(Args[3]) == "Vector3" then
                                local ClosestCharacterToVisualizer = getClosestPlayerWithCircle()
                                if ClosestCharacterToVisualizer and ClosestCharacterToVisualizer.HumanoidRootPart then
                                    Args[3] = ClosestCharacterToVisualizer.HumanoidRootPart.Position + Vector3.new(0,YOFFSET,0)
                                    return hookAimbot(table.unpack(Args))
                                end
                            end
                        end
                        return hookAimbot(...)
                    end)
                end)
            end
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(0.1) do
                    if BreakPoint then break end
                    local s,e = pcall(function()
                            
                            if AutoMineResources then
                                MineDebounce = true
                                local Params = OverlapParams.new()
                                Params.FilterDescendantsInstances = {Player.Character}
                                Params.FilterType = Enum.RaycastFilterType.Exclude
        
                                if ScriptMode == "Performant" then
                                    for i,v in pairs(workspace:GetPartBoundsInBox(Player.Character.HumanoidRootPart.CFrame, Vector3.new(AutoMineResourcesRange,AutoMineResourcesRange,AutoMineResourcesRange), Params)) do
                                        if v.Parent and v.Parent:IsA("Model") and v.Parent:FindFirstChild("Health") and not v.Parent:FindFirstChildOfClass("Humanoid") then
                                            local ToHit = {}
                                            for i2,v2 in pairs(v.Parent:GetChildren()) do
                                                if v2:IsA("BasePart") or v2:IsA("MeshPart") then
                                                    table.insert(ToHit, v2)
                                                end
                                            end
                                            Packets['SwingTool']['send']({
                                                GetEntityID(ToHit),
                                            })
                                        end
                                    end
                                else
                                    local closest_resource = getClosestResource(AutoMineResourcesRange)
                                    if closest_resource then
                                        Packets['SwingTool']['send']({
                                            GetEntityID(closest_resource),
                                        })
                                    end
                                end
                            end
        
                            
                            if AutoPlant then
                                task.wait()
                                local Params = OverlapParams.new()
                                Params.FilterDescendantsInstances = {Player.Character}
                                Params.FilterType = Enum.RaycastFilterType.Exclude
                                local RayParams = RaycastParams.new()
                                RayParams.FilterType = Enum.RaycastFilterType.Exclude
                                RayParams.FilterDescendantsInstances = {Player.Character}
                                if ScriptMode == "Performant" then
                                    local Ray = workspace:Raycast(Player.Character.HumanoidRootPart.Position, Vector3.new(0, -10, 0), RayParams)
                                    if Ray and Ray.Instance and Ray.Instance.Parent then
                                        if tostring(Ray.Instance.Parent) == "Plant Box" and not Ray.Instance.Parent:FindFirstChild(SelectedFruit) then
                                            Packets['InteractStructure']['send']({entityID = GetEntityID(Ray.Instance.Parent), itemID = ItemIDs[SelectedFruit]})
                                        end
                                    end
                                    for i,v in pairs(workspace:GetPartBoundsInBox(Player.Character.HumanoidRootPart.CFrame, Vector3.new(50,15,50), Params)) do
                                        if v.Parent then
                                            if (tostring(v.Parent) == "Plant Box" and not v.Parent:FindFirstChild(SelectedFruit)) then
                                                Packets['InteractStructure']['send']({entityID = GetEntityID(v.Parent), itemID = ItemIDs[SelectedFruit]})
                                            end
                                        end
                                    end
                                else
                                    local plant_box = getPlantBoxesInRange2(15, SelectedFruit)
                                    if plant_box then
                                        Packets['InteractStructure']['send']({entityID = GetEntityID(plant_box), itemID = ItemIDs[SelectedFruit]})
                                    end
                                end
                            end
                            
                            if UniversalAutoHarvest then
                                task.wait()
                                for _, v in pairs(workspace:GetChildren()) do
                                    if string.match(v.Name:lower(), "bush") or string.match(v.Name:lower(), "tree") or string.match(v.Name:lower(), "crop") then
                                        if (Player.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude < 35 then
                                            game.Packets['Pickup']['send'](GetEntityID(v))
                                        end
                                    end
                                end
                            end
                            
                        end)
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while true do
                        if BreakPoint then
                            break
                        end
                        if AutoLevelFarm then
                            if Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") and Player.Character:FindFirstChildOfClass("Humanoid").Health ~= 0 and (tick() - LastSpawned) >= 5 then
                                local success,errOccured = pcall(function()
                                    local currentLevel = ""
                                    local Level = Player.PlayerGui:FindFirstChild("MainGui"):FindFirstChild("Panels"):FindFirstChild("Topbar"):FindFirstChild("EssenceBar"):FindFirstChild("TextLabel").Text
                                    local MojoUI = Player.PlayerGui:FindFirstChild("MainGui"):FindFirstChild("Panels"):FindFirstChild("MojoConfirm"):FindFirstChild("LevelUpFrame"):FindFirstChild("ConfirmButton")
                                    local PlayButton = Player.PlayerGui:FindFirstChild("SpawnGui"):FindFirstChild("Customization"):FindFirstChild("PlayButton")
                                    local hasSpawned = getrenv()._G.data.hasSpawned
                    
                                    if (tick() - LastBird) > 10 then
                                        Library:Notify("No bird's found within 10s, respawning...")
                                        Player.Character.Humanoid.Health = 0
                                        LastBird = tick()
                                    end
                    
                                    if Level and MojoUI and PlayButton then
                                    -- [[ If user has not spawned yet (after rebirth) we force spawn them ]]
                                        if hasSpawned == false then
                                            if not SpawnDebounce then
                                                SpawnDebounce = true
                                                for i,v in pairs(getconnections(PlayButton.Activated)) do
                                                    if v.Function then
                                                        v.Function()
                                                    end
                                                end
                                                task.delay(2, function()
                                                    SpawnDebounce = false
                                                end)
                                            end
                                        else
                                            if Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") and Player.Character:FindFirstChildOfClass("Humanoid").Health ~= 0 then
                                                -- [[ We split the level string into a seperate string eg Level 100 -> 100 ]]
                                                if Level then
                                                    for i = 1, #Level do
                                                        if tonumber( Level:sub(i,i) ) then
                                                            currentLevel=currentLevel..Level:sub(i,i)
                                                        end
                                                    end
                                                end
                    
                                                -- [[ Main Autofarm Section ]]
                                                if tonumber(currentLevel) >= 100 and AutoRebirth then
                                                    if not MojoClaimDebounce then
                                                        MojoClaimDebounce = true
                                                        for _,v in pairs(getconnections(MojoUI.Activated)) do
                                                            if v.Function then
                                                                v.Function()
                                                            end
                                                        end
                                                        task.delay(2, function()
                                                            MojoClaimDebounce = false
                                                        end)
                                                    end
                                                    Library:Notify('Rebirthing...')
                                                end
        
                                                if tonumber(currentLevel) <= 100 then
                                                    local closestBird, birdDistance = GetAliveBird()
                                                    if closestBird ~= nil then
                                                        LastBird = tick()
                                                        EquipToolByString("Rock")
                                                        Player.Character.HumanoidRootPart.CFrame = closestBird.HumanoidRootPart.CFrame
                                                        if birdDistance <= 10 then
                                                            Packets['SwingTool']['send']({
                                                                closestBird.Hitbox,
                                                                closestBird.HumanoidRootPart,
                                                                closestBird.Beak
                                                            })
                                                        end
                                                    end
                                                end
        --GetEntityID
                                            elseif Player.Character:FindFirstChildOfClass("Humanoid").Health <= 0.5 then
                                                Library:Notify("Re-fixing Level Farm")
                                                LastSpawned = tick()
                                            end
                                        end
                                    end
                                end)
                            end
                        end
                        task.wait()
                    end
                end)
            end)()
        --GetEntityID
        LPH_NO_VIRTUALIZE(function()
            task.spawn(function()
                while true do
                    if BreakPoint then break end
                    pcall(function()
                        if AutoHarvest then
                            for _, v in pairs(workspace:GetChildren()) do
                                if v.Name == SelectedFruit .. " Bush" or v.Name == SelectedFruit .. " Tree" or v.Name == SelectedFruit .. " Crop" or v.Name == SelectedFruit .. " Bushel" or (SelectedFruit == "Prickly Pear" and v.Name == "Pear Cacti") or v.Name == SelectedFruit .. " Patch Crop" then
                                    if v.PrimaryPart and (Player.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude <= 25 then
                                        local entityID = GetEntityID(v) -- Move this line here
                                        Packets['Pickup']['send'](entityID)
                                    elseif v:FindFirstChild("Leaves") then
                                        if (Player.Character.HumanoidRootPart.Position - v.Leaves.Position).Magnitude <= 25 then
                                            local entityID = GetEntityID(v) -- Move this line here
                                            Packets['Pickup']['send'](entityID)
                                        end
                                    end
                                end
                            end
                        end
                        if AutoPlant then
                            local rand = getTableIndexArrayValue(SelectedFruit)
                            local plant_box,dist = getPlantBoxesInRange2(25, SelectedFruit)
                            print(plant_box,rand)
                            if plant_box then
                                Library:Notify("planting " .. tostring(plant_box) .. " " .. tostring(dist) .. " " .. tostring(rand), 1)
                                Packets['InteractStructure']['send']({
                                    entityID = GetEntityID(plant_box), -- Change 'v' to 'plant_box' here
                                    itemID = ItemIDs[SelectedFruit]
                                })
                            end
                        end
                    end)
                    task.wait(0.08)
                end
            end)
        end)()
        
        --craftitem
            LPH_NO_VIRTUALIZE(function()
                workspace.Items.ChildAdded:Connect(function(child)
                    if child.Name == "Essence" and SunIslandFarm then
                        Packets['Pickup']['send'](GetEntityID(child))
                    end
                end)
            end)()
        
        
            LPH_NO_VIRTUALIZE(function()
                pcall(function()
                    if Player.Character then
                        PlantDebounce = false
                        HarvestDebounce = false
                        MineDebounce = false
                        CollectDebounce = false
                        VoodooDebounce = false 
                        for _,v in pairs(getgc()) do
                            if type(v) == "function" and debug.getinfo(v).name == "CreateProjectile" and islclosure(v) then
                                FuncFoundForAimbot = v
                                Library:Notify("Found function for aimbot " .. tostring(v))
                                break
                            end
                        end
                        hookAimbotfunc()
                        local con; con = Player.Character.HumanoidRootPart.Touched:Connect(function(t)
                            if t and t.Parent then
                                if AutoHarvest then
                                    if (tostring(t.Parent):find("Bush") and tostring(t.Parent):find("Tree") and tostring(t.Parent):find("Crop")) then
                                        Packets['Pickup']['send'](GetEntityID(t.Parent))
                                    end
                                end
                            end
                        end)
                        local _; _ = Player.Character.Humanoid.Died:Connect(function() _:Disconnect() PlantDebounce = false HarvestDebounce = false con:Disconnect() end)
                    end
                    Player.CharacterAdded:Connect(function(char)
                        PlantDebounce = false
                        HarvestDebounce = false
                        MineDebounce = false
                        CollectDebounce = false
                        VoodooDebounce = false 
                        for _,v in pairs(getgc()) do
                            if type(v) == "function" and debug.getinfo(v).name == "CreateProjectile" and islclosure(v) then
                                FuncFoundForAimbot = v
                                Library:Notify("Found function for aimbot " .. tostring(v))
                                break
                            end
                        end
                        hookAimbotfunc()
                        task.delay(3, function()
                            PlantDebounce = false
                            HarvestDebounce = false
                            MineDebounce = false
                            CollectDebounce = false
                            VoodooDebounce = false
                        end)
                        local con; con = char:WaitForChild("HumanoidRootPart").Touched:Connect(function(t)
                            if t and t.Parent then
                                if AutoHarvest then
                                    if (tostring(t.Parent):find("Bush") and tostring(t.Parent):find("Tree") and tostring(t.Parent):find("Crop")) then
                                        Packets['Pickup']['send'](GetEntityID(t.Parent))
                                    end
                                end
                            end
                        end)
                        local _; _ = char:WaitForChild("Humanoid").Died:Connect(function() _:Disconnect() PlantDebounce = false HarvestDebounce = false con:Disconnect() end)
                    end)
                end)
            end)()
            
                local Ores = {}
            
                local function AddOreToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = Color3.fromRGB(23, 174, 212)
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
            
                    table.insert(Ores, totalModelData)
                    
                    Con1 = model.AncestryChanged:Connect(function(old,new)
                        if old == nil or new == nil then
                            Con1:Disconnect()
                        end
                    end)
                end
            
                LPH_NO_VIRTUALIZE(function()
                    Connections.MapComponents = RunService.Stepped:Connect(function()
                        for i,v in pairs(Ores) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if OreESPToggle and ShownOres[tostring(v.Model)] == true then
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:GetModelCFrame().Position + Vector3.new(0, 2, 0))
                                    if OnScreen then
                                        if ShowOreESPDistance then
                                            local Distance = (Player.Character.HumanoidRootPart.Position-v.Model:GetModelCFrame().Position).Magnitude
                
                                            if ShowOreHealth then
                                                v.Drawing.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m] " .. tostring(v.Model:FindFirstChild("Health").Value) .. " HP"
                                            else
                                                v.Drawing.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m]"
                                            end
                                        else
                                            if ShowOreHealth then
                                                v.Drawing.Text = v.Name .. " " .. tostring(v.Model:FindFirstChild("Health").Value) .. " HP"
                                            else
                                                v.Drawing.Text = v.Name
                                            end
                                        end
                                        v.Drawing.Visible = true
                                        if v.Model:FindFirstChild("Small Rock") then
                                            v.Drawing.Color = v.Model["Small Rock"].BrickColor.Color
                                        elseif v.Model:FindFirstChild("Totem") then
                                            v.Drawing.Color = v.Model.Totem.BrickColor.Color
                                        elseif v.Model:FindFirstChild("Feather Stone") then
                                            v.Drawing.Color = v.Model["Feather Stone"].BrickColor.Color
                                        else
                                            v.Drawing.Color = Color3.fromRGB(0, 162, 255)
                                        end
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(Ores, i)
                            end
                        end
                    end)
                end)()
        
                LPH_NO_VIRTUALIZE(function()
                    if workspace:WaitForChild("Resources", 5) then
                        for i,v in pairs(workspace.Resources:GetChildren()) do
                            if v:IsA("Model") then
                                AddOreToTable(v)
                            end
                        end
                        workspace.Resources.ChildAdded:Connect(function(child)
                            if child:IsA("Model") then
                                AddOreToTable(child)
                            end
                        end)
                        workspace.Resources.ChildRemoved:Connect(function(child)
                            for i,v in pairs(Ores) do
                                if v.Model == child then
                                    v.Model = nil
                                end
                            end
                        end)
                    end
                end)()
        
                -- treasure esp
                local TreasureESPTable = {}
            
                local function AddTreasureToESP(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = Color3.fromRGB(23, 174, 212)
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
            
                    table.insert(TreasureESPTable, totalModelData)
                    
                    Con1 = model.AncestryChanged:Connect(function(old,new)
                        if old == nil or new == nil then
                            Con1:Disconnect()
                        end
                    end)
                end
            
                LPH_NO_VIRTUALIZE(function()
                    Connections.TreasureLoop = RunService.Stepped:Connect(function()
                        for i,v in pairs(TreasureESPTable) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if TreasureChestESPToggle then
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:GetModelCFrame().Position + Vector3.new(0, 2, 0))
                                    if OnScreen then
                                        local Distance = (Player.Character.HumanoidRootPart.Position-v.Model:GetModelCFrame().Position).Magnitude
        
                                        v.Drawing.Visible = true
                                        v.Drawing.Color = TreasureChestColor
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                        v.Drawing.Text = tostring(v.Model) .. " " .. tostring(math.floor(Distance)) .. "m"
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(TreasureESPTable, i)
                            end
                        end
                    end)
                end)()
        
                -- heart esp
        
                --[[HeartsGB:AddToggle('Heart ESP', {
                    Text = 'Heart ESP',
                    Default = false,
                    Tooltip = 'puts esp on hearts', 
                    Callback = function(Value)
                        heartesptoggle = Value
                    end
                })
        
                local HeartESPTable = {}
            
                local function AddHeartToESP(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = Color3.fromRGB(23, 174, 212)
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
            
                    table.insert(HeartESPTable, totalModelData)
                    
                    Con1 = model.AncestryChanged:Connect(function(old,new)
                        if old == nil or new == nil then
                            Con1:Disconnect()
                        end
                    end)
                end
        
                LPH_NO_VIRTUALIZE(function()
                    Connections.ValentinesLoop = RunService.Stepped:Connect(function()
                        for i,v in pairs(HeartESPTable) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if heartesptoggle then
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:GetModelCFrame().Position + Vector3.new(0, 2, 0))
                                    if OnScreen then
                                        local Distance = (Player.Character.HumanoidRootPart.Position-v.Model:GetModelCFrame().Position).Magnitude
        
                                        v.Drawing.Visible = true
                                        v.Drawing.Color = Color3.fromRGB(252, 3, 69)
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                        v.Drawing.Text = tostring(v.Model) .. " " .. tostring(math.floor(Distance)) .. "m"
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(HeartESPTable, i)
                            end
                        end
                    end)
                end)()
        
                -- VALENTINE INIT
                LPH_NO_VIRTUALIZE(function()
                    for i,v in pairs(workspace.Hearts:GetChildren()) do
                        if v:IsA("Model") and tostring(v):find("Heart") then
                            AddHeartToESP(v)
                        end
                    end
                    workspace.Hearts.ChildAdded:Connect(function(child)
                        if child:IsA("Model") and tostring(child):find("Heart") then
                            AddHeartToESP(child)
                        end
                    end)
                    workspace.Hearts.ChildRemoved:Connect(function(child)
                        for i,v in pairs(HeartESPTable) do
                            if v.Model == child then
                                v.Model = nil
                            end
                        end
                    end)
                end)()]]
        
                --- HALLOWEEN INIT
                LPH_NO_VIRTUALIZE(function()
                    for i,v in pairs(workspace:GetChildren()) do
                        if v:IsA("Model") and tostring(v):find("Treasure") then
                            AddTreasureToESP(v)
                        end
                    end
                    workspace.ChildAdded:Connect(function(child)
                        if child:IsA("Model") and tostring(child):find("Treasure") then
                            AddTreasureToESP(child)
                        end
                    end)
                    workspace.ChildRemoved:Connect(function(child)
                        for i,v in pairs(TreasureESPTable) do
                            if v.Model == child then
                                v.Model = nil
                            end
                        end
                    end)
                end)()
            
                local PlayerESP = {}
            
                local function AddPlayerToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    for i,v in pairs(PlayerESP) do
                        if tostring(v.Name) == tostring(model) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = PlayerESPColor
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
                    
                    table.insert(PlayerESP, totalModelData)
                end
            
                LPH_NO_VIRTUALIZE(function()
                    Connections.mainloopforpalyeresp = RunService.Stepped:Connect(function()
                        for i,v in pairs(PlayerESP) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Vector3.new(0,3,0))
                                    if OnScreen and PlayerESPToggle then
                                        if HealthESP and v.Model:FindFirstChildOfClass("Humanoid") then
                                            local healthString = tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").Health)) .. "/" .. tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").MaxHealth))
                                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)) .. "m]" .. " [" .. healthString .. "]"                         
                                        else
                                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)) .. "m]"                         
                                        end
                                        if ShowTribeColor then
                                            v.Drawing.Color = v.Model:FindFirstChild("UpperTorso").Color
                                        else
                                            v.Drawing.Color = PlayerESPColor
                                        end
                                        v.Drawing.Visible = true
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(PlayerESP, i)
                            end
                        end
                    end)
                end)()
            --auto plant
                for i,v in pairs(Players:GetPlayers()) do
                    if v ~= Player then
                        if v.Character then
                            AddPlayerToTable(v.Character)
                        end
                        v.CharacterAdded:Connect(function(char)
                            AddPlayerToTable(char)
                        end)
                    end
                end
                Players.PlayerAdded:Connect(function(p)
                    p.CharacterAdded:Connect(function(char)
                        AddPlayerToTable(char)
                    end)
                end)
            
                Players.PlayerRemoving:Connect(function(p)
                    for i,v in pairs(PlayerESP) do
                        if tostring(v.Name) == tostring(p) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                end)
            
                -- armor esp fuck u
                local ArmorESP = {}
            
                local function AddPlayerArmorToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    for i,v in pairs(ArmorESP) do
                        if tostring(v.Name) == tostring(model) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(ArmorESP, i)
                        end
                    end
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 12
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = "null"
                    TextDrawing.Color = PlayerESPColor
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
                    
                    table.insert(ArmorESP, totalModelData)
                end
            
                LPH_NO_VIRTUALIZE(function()
                    Connections.mainloopforarmoresp = RunService.Stepped:Connect(function()
                        for i,v in pairs(ArmorESP) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                    local Offset = Vector3.new(0,0,0)
                                    if ArmorPosition == "Left" then
                                        Offset = Vector3.new(0,0,5)
                                    elseif ArmorPosition == "Right" then
                                        Offset = Vector3.new(0,0,-5)
                                    elseif ArmorPosition == "Down" then
                                        Offset = Vector3.new(0,-3.5,0)
                                    end
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Offset)
                                    if OnScreen and ShowArmor then
                                        local equipped = "\n"
                                        for i2,v2 in pairs(v.Model:GetChildren()) do
                                            if v2:IsA("Accessory") and table.find({"torso", "head", "leg", "legs"}, tostring(v2:FindFirstChildOfClass("BoolValue"))) then
                                                equipped = equipped .. tostring(v2) .. "\n"
                                            end
                                        end
                                        v.Drawing.Text = tostring(equipped) or ""
                                        v.Drawing.Color = ArmorColor
                                        v.Drawing.Size = ArmorSize
                                        v.Drawing.Visible = true
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(ArmorESP, i)
                            end
                        end
                    end)
                end)()
        
                LPH_NO_VIRTUALIZE(function()
                    for i,v in pairs(Players:GetPlayers()) do
                        if v ~= Player then
                            if v.Character then
                                AddPlayerArmorToTable(v.Character)
                            end
                            v.CharacterAdded:Connect(function(char)
                                AddPlayerArmorToTable(char)
                            end)
                        end
                    end
                    Players.PlayerAdded:Connect(function(p)
                        p.CharacterAdded:Connect(function(char)
                            AddPlayerArmorToTable(char)
                        end)
                    end)
                
                    Players.PlayerRemoving:Connect(function(p)
                        for i,v in pairs(ArmorESP) do
                            if tostring(v.Name) == tostring(p) then
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(ArmorESP, i)
                            end
                        end
                    end)
                end)()
        
                CraftBox:AddDropdown('Craft Armor Set', {
                    Values = { 'Leaf Set', 'Hide Set', 'Iron Set', 'Steel Set', 'Adurite Set', 'Crystal Set', 'Magnetite Set','Emerald Set', 'Pink Diamond Set', 'Void Set', 'God Set'},
                    Default = "Armor Set", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Set',
                    Tooltip = 'Set to choose to craft', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        sets = Value
                    end
                })
                CraftBox:AddButton({
                    Text = 'Craft Set',
                    DoubleClick = false,
                    Tooltip = 'Crafts a full set of armor',
                    Func = function()
                        if sets == "Leaf Set" then
                            Packets.CraftItem.send(ItemIDs["Leaf Shirt"])
                            Packets.CraftItem.send(ItemIDs["Leaf Pants"])
                        elseif sets == "Hide Set" then
                            Packets.CraftItem.send(ItemIDs["Hide Pants"])
                            Packets.CraftItem.send(ItemIDs["Hide Shirt"])
                        elseif sets == "Iron Set" then
                            Packets.CraftItem.send(ItemIDs["Iron Helmet"])
                            Packets.CraftItem.send(ItemIDs["Iron Greaves"])
                            Packets.CraftItem.send(ItemIDs["Iron Chestplate"])
                        elseif sets == "Steel Set" then
                            Packets.CraftItem.send(ItemIDs["Steel Helmet"])
                            Packets.CraftItem.send(ItemIDs["Steel Greaves"])
                            Packets.CraftItem.send(ItemIDs["Steel Chestplate"])
                        elseif sets == "Adurite Set" then
                            Packets.CraftItem.send(ItemIDs["Adurite Chestplate"])
                            Packets.CraftItem.send(ItemIDs["Adurite Helmet"])
                            Packets.CraftItem.send(ItemIDs["Adurite Greaves"])
                        elseif sets == "Crystal Set" then
                            Packets.CraftItem.send(ItemIDs["Crystal Crown"])
                            Packets.CraftItem.send(ItemIDs["Crystal Chestplate"])
                            Packets.CraftItem.send(ItemIDs["Crystal Greaves"])
                        elseif sets == "Magnetite Set" then
                            Packets.CraftItem.send(ItemIDs["Magnetite Mask"])
                            Packets.CraftItem.send(ItemIDs["Magnetite Chestplate"])
                            Packets.CraftItem.send(ItemIDs["Magnetite Greaves"])
                        elseif sets == "Emerald Set" then
                            Packets.CraftItem.send(ItemIDs["Emerald Helmet"])
                            Packets.CraftItem.send(ItemIDs["Emerald Greaves"])
                            Packets.CraftItem.send(ItemIDs["Emerald Chestplate"])
                        elseif sets == "Pink Diamond Set" then
                            Packets.CraftItem.send(ItemIDs["Pink Diamond Hood"])
                            Packets.CraftItem.send(ItemIDs["Pink Diamond Greaves"])
                            Packets.CraftItem.send(ItemIDs["Pink Diamond Chestplate"])
                        elseif sets == "Void Set" then
                            Packets.CraftItem.send(ItemIDs["Void Chestplate"])
                            Packets.CraftItem.send(ItemIDs["Void Shroud"])
                            Packets.CraftItem.send(ItemIDs["Void Greaves"])
                        elseif sets == "God Set" then
                            Packets.CraftItem.send(ItemIDs["God Halo"])
                            Packets.CraftItem.send(ItemIDs["God Chestplate"])
                            Packets.CraftItem.send(ItemIDs["God Legs"])
                        end
                    end
                })

                --swingtool

                --leaf bag
            CraftBox2:AddDropdown('Craft Tools (Pick and Axe)', {
                Values = { 'Wood Tools', 'Stone Tools', 'Iron Tools', 'Steel Tools', 'Adurite Tools', 'Crystal Tools', 'Magnetite Tools','Emerald Tools', 'Pink Diamond Tools', 'Void Tools', 'God Tools'},
                Default = "Tools", -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Tools',
                Tooltip = 'Tools to choose to craft', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    Tools = Value
                end
            })
            CraftBox2:AddButton({
                Text = 'Craft Tools',
                DoubleClick = false,
                Tooltip = 'Crafts a full set of tools',
                Func = function()
                    if Tools == "Wood Tools" then
                        Packets.CraftItem.send(ItemIDs["Wood Axe"])                
                        Packets.CraftItem.send(ItemIDs["Wood Pick"])
                    elseif Tools == "Stone Tools" then
                        Packets.CraftItem.send(ItemIDs["Stone Pick"])                
                        Packets.CraftItem.send(ItemIDs["Stone Axe"])                
                    elseif Tools == "Iron Tools" then
                        Packets.CraftItem.send(ItemIDs["Iron Axe"])                
                        Packets.CraftItem.send(ItemIDs["Iron Pick"])                
                    elseif Tools == "Steel Tools" then
                        Packets.CraftItem.send(ItemIDs["Steel Pick"])                
                        Packets.CraftItem.send(ItemIDs["Steel Axe"])                
                    elseif Tools == "Adurite Tools" then
                        Packets.CraftItem.send(ItemIDs["Adurite Pick"])                
                        Packets.CraftItem.send(ItemIDs["Adurite Axe"])                
                    elseif Tools == "Crystal Tools" then
                        Packets.CraftItem.send(ItemIDs["Crystal Pick"])
                        Packets.CraftItem.send(ItemIDs["Crystal Axe"])
                    elseif Tools == "Magnetite Tools" then
                        Packets.CraftItem.send(ItemIDs["Magnetite Pick"])
                        Packets.CraftItem.send(ItemIDs["Magnetite Axe"])
                    elseif Tools == "Emerald Tools" then
                        Packets.CraftItem.send(ItemIDs["Emerald Pick"])
                        Packets.CraftItem.send(ItemIDs["Emerald Axe"])
                    elseif Tools == "Pink Diamond Tools" then
                        Packets.CraftItem.send(ItemIDs["Pink Diamond Pick"])
                        Packets.CraftItem.send(ItemIDs["Pink Diamond Axe"])
                    elseif Tools == "Void Tools" then
                        Packets.CraftItem.send(ItemIDs["Void Pick"])
                        Packets.CraftItem.send(ItemIDs["Void Axe"])
                    elseif Tools == "God Tools" then
                        Packets.CraftItem.send(ItemIDs["God Pick"])
                        Packets.CraftItem.send(ItemIDs["God Axe"])
                    end
                end
            })


            CraftBox3:AddDropdown('Craft Weapons', {
                Values = { 'Club', 'Mace', 'Battle Axe', 'War Hammer', 'Crystal Stick', 'Emerald Blade', 'Peeper Pob Hammer','God Rock'},
                Default = "Tool Here", -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Weapon',
                Tooltip = 'Weapons to choose to craft', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    Weapon = Value
                end
            })
            CraftBox3:AddButton({
                Text = 'Craft Weapon',
                DoubleClick = false,
                Tooltip = 'Crafts Weapon',
                Func = function()
                Packets['CraftItem']['send'](ItemIDs[Weapon])
            end})
    
            local CraftEnabled = false -- Variable to toggle crafting
            local WeaponToCraft = "Tool Here" -- Default weapon to craft
            
            CraftBox3:AddDropdown('Loop Craft Weapons', {
                Values = { 'Club', 'Mace', 'Battle Axe', 'War Hammer', 'Crystal Stick', 'Emerald Blade', 'Peeper Pob Hammer', 'God Rock'},
                Default = "Tool Here", -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
                Text = 'Loop Craft Weapons',
                Tooltip = 'Weapons to choose to craft', -- Information shown when you hover over the dropdown
                Callback = function(Value)
                    WeaponToCraft = Value
                end
            })
            
            CraftBox3:AddToggle('Loop Craft Weapons', {
                Text = 'Loop Craft',
                Default = false,
                Tooltip = 'spam crafts', 
                Callback = function(Value)
                    CraftEnabled = Value
                    if CraftEnabled then
                        if WeaponToCraft ~= "Tool Here" then
                            local itemID = ItemIDs[WeaponToCraft]
                            if itemID then
                                while CraftEnabled do
                                    Packets.CraftItem.send(itemID)
                                    wait(0.5) -- Adjust the delay between crafts as needed
                                end
                            else
                                print("Invalid weapon selected.")
                            end
                        else
                            print("Please select a weapon to craft.")
                        end
                    else
                        print("Crafting is currently disabled.")
                    end
                end
            })

            CraftBox4:AddDropdown('Craft Bags', {
                Values = { 'Leaf Bag', 'Hide Bag', 'Iron Bag', 'Steel Bag', 'Adurite Bag', 'Crystal Bag', 'Magnetite Bag','Emerald Bag','Pink Diamond Bag','Void Bag','Candy Bag','Easter Bag','God Bag'},
                Default = "Bag Here", -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
                
                Text = 'Bags',
                Tooltip = 'Bags to choose to craft', -- Information shown when you hover over the dropdown
                
                Callback = function(Value)
                    Bag = Value
                end
                })
                --Ez Structures
                CraftBox4:AddButton({
                Text = 'Craft Bag',
                DoubleClick = false,
                Tooltip = 'Crafts Bag',
                Func = function()
                    Packets.CraftItem.send(ItemIDs["Leaf Bag"])
                    Packets.CraftItem.send(ItemIDs["Hide Bag"])
                    Packets.CraftItem.send(ItemIDs["Iron Bag"])
                    Packets.CraftItem.send(ItemIDs["Steel Bag"])
                    Packets.CraftItem.send(ItemIDs["Adurite Bag"])
                    Packets.CraftItem.send(ItemIDs["Crystal Bag"])
                    Packets.CraftItem.send(ItemIDs["Magnetite Bag"])
                    Packets.CraftItem.send(ItemIDs["Emerald Bag"])
                    Packets.CraftItem.send(ItemIDs["Pink Diamond Bag"])
                    Packets.CraftItem.send(ItemIDs["Void Bag"])
                    Packets.CraftItem.send(ItemIDs["God Bag"])
        
                end})
        
        
                local CraftEnabled = false -- Variable to toggle crafting
                local BagToCraft = "Bag Here" -- Default bag to craft
                
                CraftBox4:AddDropdown('Loop Craft Bags', {
                    Values = { 'Leaf Bag', 'Hide Bag', 'Iron Bag', 'Steel Bag', 'Adurite Bag', 'Crystal Bag', 'Magnetite Bag', 'Emerald Bag', 'Pink Diamond Bag', 'Void Bag', 'Candy Bag', 'Easter Bag', 'God Bag'},
                    Default = "Bag Here", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                    Text = 'Loop Craft Bags',
                    Tooltip = 'Bags to choose to craft', -- Information shown when you hover over the dropdown
                    Callback = function(Value)
                        BagToCraft = Value
                    end
                })
                
                CraftBox4:AddToggle('Loop Craft Bags', {
                    Text = 'Loop Craft',
                    Default = false,
                    Tooltip = 'spam crafts', 
                    Callback = function(Value)
                        CraftEnabled = Value
                        if CraftEnabled then
                            if BagToCraft ~= "Bag Here" then
                                local itemID = ItemIDs[BagToCraft]
                                if itemID then
                                    while CraftEnabled do
                                        Packets.CraftItem.send(itemID)
                                        wait(0.5) -- Adjust the delay between crafts as needed
                                    end
                                else
                                    print("Invalid bag selected.")
                                end
                            else
                                print("Please select a bag to craft.")
                            end
                        else
                            print("Crafting is currently disabled.")
                        end
                    end
                })
                
            -- auto heal
                TeleportBox:AddButton({
                    Text = "Teleport to Void",
                    DoubleClick = false,
                    Tooltip = "teleports u to the void",
                    Func = function() 
                        TeleportService:Teleport(11879754496, Player)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Void Lower Player Server",
                    DoubleClick = false,
                    Tooltip = "teleports to a lower player void server",
                    Func = function() 
                        -- Lower Player Server Void
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11879754496 
            local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
            function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
            end
            
            local Server, Next; repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place,Server.id,Player)
                    end
                })
            
                TeleportBox:AddButton({
                    Text = "Void Higher Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a higher player void server",
                    Func = function() 
                    -- Higher Player Void 
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11879754496 
            local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
            
            function ListServers(cursor)
                local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                return Http:JSONDecode(Raw)
            end
            
            local Server, Next;
            repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place, Server.id, Player)
                    end
                })
            
                TeleportBox:AddButton({
                    Text = "Overworld Higher Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a higher player overworld server",
                    Func = function() 
                    -- highest server script overworld
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11729688377
            local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
            
            function ListServers(cursor)
                local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                return Http:JSONDecode(Raw)
            end
            
            local Server, Next;
            repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place, Server.id, Player)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Overworld Lower Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a lower player overworld server",
                    Func = function() 
                    -- Lower Player Server Overworld
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11729688377
            local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
            function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
            end
            
            local Server, Next; repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place,Server.id,Player)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Server Hop",
                    DoubleClick = false,
                    Tooltip = "Server hops to another server",
                    Func = function() 
                        local Player = game.Players.LocalPlayer    
                        local Http = game:GetService("HttpService")
                        local TPS = game:GetService("TeleportService")
                        local Api = "https://games.roblox.com/v1/games/"
                        
                        local _place,_id = game.PlaceId, game.JobId
                        local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
                        function ListServers(cursor)
                        local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                        return Http:JSONDecode(Raw)
                        end
                        
                        local Next; repeat
                        local Servers = ListServers(Next)
                        for i,v in next, Servers.data do
                            if v.playing < v.maxPlayers and v.id ~= _id then
                                local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
                                if s then break end
                            end
                        end
                        
                        Next = Servers.nextPageCursor
                        until not Next
                    end
                })
        
                TeleportBox:AddDivider()
        
                TeleportBox:AddButton({
                    Text = "Teleport to Old God",
                    DoubleClick = false,
                    Tooltip = "teleports u to the old god island",
                    Func = function() 
                        for i = 1,40 do
                            wait(0.01)
                            Player.Character.HumanoidRootPart.CFrame = CFrame.new(223.0359344482422, -144.40762329101562, 1086.427978515625)
                        end
                    end
                })
                            TeleportBox:AddButton({
                    Text = "Teleport to Volcano",
                    DoubleClick = false,
                    Tooltip = "teleports u to volcano",
                    Func = function() 
                        for i = 1,40 do
                            wait(0.01)
                            Player.Character.HumanoidRootPart.CFrame = CFrame.new(-1067.1888427734375, -199.7120819091797, -420.5445556640625)
                            end
                    end
                })



                local Packets = require(game:GetService("ReplicatedStorage").Modules.Packets)
                local itemIDS = require(game:GetService("ReplicatedStorage").Modules.ItemIDS)
                
                local campfireAuraEnabled = false
                local chosenItem = "Log"
                local maxCampDistance = 25
                local campAmount = 5
                local minCampHealth = 50
                
                function GetClosestCampfireWithHealth(val)
                    local campfire, dist = nil, maxCampDistance
                    local plr = game.Players.LocalPlayer
                
                    for _, stru in next, workspace.Deployables:GetChildren() do
                        if stru.Name == "Campfire" then
                            local dist2 = (stru:GetPivot().Position - plr.Character:GetPivot().Position).Magnitude
                
                            if dist2 < dist and tonumber(stru:FindFirstChild("Board"):FindFirstChild("Billboard"):FindFirstChild("Backdrop"):FindFirstChild("TextLabel").Text) <= val then
                                dist = dist2
                                campfire = stru
                            end
                        end
                    end
                
                    return campfire
                end
                
                spawn(function()
                    while task.wait() do
                        if not campfireAuraEnabled then
                            task.wait(1)
                            continue
                        end
                        local campfire = GetClosestCampfireWithHealth(minCampHealth)
                --campfire
                        if campfire then
                            for i = 1, campAmount do
                                Packets.InteractStructure.send({
                                    ["entityID"] = campfire:GetAttribute("EntityID"),
                                    ["itemID"] = itemIDS[chosenItem]
                                })
                                task.wait(0.3)
                            end
                            task.wait(0.1)
                        end
                    end
                end)
                --screengui
                
                CampFireBox:AddToggle('Campfire Aura', {
                    Text = 'fuel campfire1',
                    Default = false,
                    Tooltip = 'Toggle to make your campfires automatically fill up',
                    Callback = function(enabled)
                        campfireAuraEnabled = enabled
                    end
                })
                
                CampFireBox:AddSlider('Campfire Health', {
                    Text = 'health for regen1',
                    Default = minCampHealth,
                    Min = 1,
                    Max = 250,
                    Rounding = 1,
                    Compact = false,
                    Callback = function(Value)
                        minCampHealth = Value
                    end
                })                
                CampFireBox:AddDropdown('Campfire Resource', {
                    Values = { 'Log', 'Leaves', 'Wood' },
                    Default = 1,
                    Multi = false,
                    Text = 'Resource1',
                    Tooltip = 'Select a resource for the campfire aura to use that :)',
                    Callback = function(Value)
                        chosenItem = Value
                    end
                })
                
                CampFireBox:AddSlider('Campfire Distance', {
                    Text = 'distance1',
                    Default = 25,
                    Min = 0,
                    Max = 35,
                    Rounding = 1,
                    Compact = false,
                    Callback = function(Value)
                        maxCampDistance = Value
                    end
                })
                
                CampFireBox:AddSlider('Campfire Amount', {
                    Text = 'amount1',
                    Default = 5,
                    Min = 1,
                    Max = 15,
                    Rounding = 1,
                    Compact = false,
                    Callback = function(Value)
                        campAmount = Value
                    end
                })
             
        
    --humanoid gold farm







                ModBox:AddToggle('Mod Notifier', {
                    Text = 'Mod Notifier',
                    Default = true,
                    Tooltip = 'Toggle on/off Mod Notififer', 
                    Callback = function(Value)
                        ModNotify = Value
                    end
                })
                AntiBan:AddToggle('Script Ban Protection', {
                    Text = 'Script Ban Protection',
                    Default = true,
                    Tooltip = 'Protects your account from being banned from other script(s).', 
                    Callback = function(Value)
                        scriptbanprotection = Value
                    end
                })
                local Blacklisted_Roles = {"Admin", "Owner", "Owners", "Tester"}
                local GroupId = 9132225
                Players.PlayerAdded:Connect(function(Plr)
                    if ModNotify then
                        if table.find(Blacklisted_Roles, Plr:GetRoleInGroup(GroupId)) then
                            Library:Notify("An Admin has JOINED your game " .. tostring(Plr), 10)
                        end
                    end
                end)
                Players.PlayerRemoving:Connect(function(Plr)
                    if ModNotify then     
                        if table.find(Blacklisted_Roles, Plr:GetRoleInGroup(GroupId)) then
                            Library:Notify("An Admin has LEFT your game " .. tostring(Plr), 10)
                        end
                    end
                end)
                for i,v in pairs(Players:GetPlayers()) do
                    if ModNotify then
                        if table.find(Blacklisted_Roles, v:GetRoleInGroup(GroupId)) then
                            Library:Notify("An Admin is in your game " .. tostring(v), 10)
                        end
                    end
                end
                HutBox:AddDropdown('Type of Hut', {
                    Values = {"Big Ol' Hut", "God Hut", "Trade Hut"},
                    Default = "Big Ol' Hut", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Type of Hut',
                    Tooltip = 'Hut used to trap', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        hut = tostring(Value)
                    end
                })
                
                local findNearestPlayer = LPH_NO_VIRTUALIZE(function(radius)
                    if Player.Character.HumanoidRootPart then
                        local nearestPlayer, nearestDistance = nil, radius
                        
                        for _, player in ipairs(Players:GetPlayers()) do
                            if player ~= Player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                local playerRootPart = player.Character.HumanoidRootPart
                                local distance = (Player.Character.HumanoidRootPart.Position - playerRootPart.Position).magnitude
                                if distance < nearestDistance then
                                    nearestPlayer = player
                                    nearestDistance = distance
                                end
                            end
                        end
                        
                        return nearestPlayer
                    end
                    
                    return nil
                end)
        
                HutBox:AddLabel('Keybind'):AddKeyPicker('KeyPicker', {
                    -- SyncToggleState only works with toggles.
                    -- It allows you to make a keybind which has its state synced with its parent toggle
                
                    -- Example: Keybind which you use to toggle flyhack, etc.
                    -- Changing the toggle disables the keybind state and toggling the keybind switches the toggle state
                
                    Default = 'H', -- String as the name of the keybind (MB1, MB2 for mouse buttons)
                    SyncToggleState = false,
                
                
                    -- You can define custom Modes but I have never had a use for it.
                    Mode = 'Toggle', -- Modes: Always, Toggle, Hold
                
                    Text = 'Auto Trap Player', -- Text to display in the keybind menu
                    NoUI = true, -- Set to true if you want to hide from the Keybind menu,
                
                    -- Occurs when the keybind is clicked, Value is `true`/`false`
                    Callback = function(Value)
                        if not chatBarFocused then
        
                        
                        local LocalPlayer = game:GetService("Players").LocalPlayer
                        local function place(name,rot,pos)
	                        if not isvoid then
		                     Packets.PlaceStructure.send({
			                      buildingName=name,
			                      yrot=rot,
			                      vec=pos,
			                      isMobile=false,
		                      })
	                     else
		                       Packets.PlaceStructure.send(
			                       pos,
			                       name,
		                           	rot,
		            	            false
		                        )
	                        end
                        end
                        
                        local coordinates = {
                            Vector3.new(5,-3,-9),
                        }
                        
                        local radius = 55
                        local nearestPlayer = findNearestPlayer(radius)
                        if nearestPlayer then
                            for _, position in ipairs(coordinates) do
                                local playerRootPart = nearestPlayer.Character.HumanoidRootPart
                                Remote(
                                    playerRootPart.CFrame * position,
                                    hut,
                                    0,
                                    false
                                )
                                task.wait(0.1)
                            end
                        else
                            print("No players found within the radius")
                        end
                    end
                    end
                })
                local function place(name, rot, pos)
                    if not isvoid then
                        Packets.PlaceStructure.send({
                            buildingName = name,
                            yrot = rot,
                            vec = pos,
                            isMobile = false,
                        })
                    else
                        Packets.PlaceStructure.send(
                            pos,
                            name,
                            rot,
                            false
                        )
                    end
                end
                --Auto Pickup
                SphereBox:AddDropdown('15x15 Structure', {
                    Values = { 'Campfire', 'Stable', 'Hut', 'Torch', 'Chest', 'Grinder','Lookout','Ice Gate','Wood Gate','Wood Wall','Sign','Wood Fence','Plant Box','Ladder', Big_Ol_Hut, 'Dock','Reinforced Chest','Table','Chair','Tower','Hovel','Coin Press','Trade Hut','Stone Gate','Stone Wall','Big Chair','Big Table','Bridge','Iron Turret','Iron Wall','Iron Gate','Void Torch','Void Gate','Crystal Gate','Crystal Wall','Magnetite Wall','Magnetite Gate','Emerald Gate','Emerald Wall','Infinity Chest','God Hut' },
                    Default = "", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Structures',
                    Tooltip = 'Structures used to place', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        sphere = Value
                    end
                })
                
                SphereBox:AddButton({
                    Text = "Place",
                    DoubleClick = false,
                    Tooltip = "Place Structures",
                    Func = function() 
                        local player2 = game:GetService("Players").LocalPlayer
                        local RootPart = player2.Character.HumanoidRootPart
                        local cframe = RootPart.CFrame
                        
                        local coordinates = {
                            CFrame.new(7, -3, -7),
                            CFrame.new(0, -3, -14),
                            CFrame.new(0, -3, -21),
                            CFrame.new(0, -3, -28),
                            CFrame.new(0, -3, -35),
                            CFrame.new(0, -3, -42),
                            CFrame.new(0, -3, -49),
                            CFrame.new(0, -3, 7),
                            CFrame.new(0, -3, 14),
                            CFrame.new(0, -3, 21),
                            CFrame.new(0, -3, 28),
                            CFrame.new(0, -3, 35),
                            CFrame.new(0, -3, 42),
                            CFrame.new(0, -3, 49),
                            -- Missing plant box here
                            CFrame.new(7, -3, -7),
                            CFrame.new(7, -3, -14),
                            CFrame.new(7, -3, -21),
                            CFrame.new(7, -3, -28),
                            CFrame.new(7, -3, -35),
                            CFrame.new(7, -3, -42),
                            CFrame.new(7, -3, -49),
                            CFrame.new(7, -3, 7),
                            CFrame.new(7, -3, 14),
                            CFrame.new(7, -3, 21),
                            CFrame.new(7, -3, 28),
                            CFrame.new(7, -3, 35),
                            CFrame.new(7, -3, 42),
                            CFrame.new(7, -3, 49),
                            CFrame.new(7, -3, 0),
                            CFrame.new(0, -3, -7),
                            CFrame.new(-7, -3, -7),
                            CFrame.new(-7, -3, -14),
                            CFrame.new(-7, -3, -21),
                            CFrame.new(-7, -3, -28),
                            CFrame.new(-7, -3, -35),
                            CFrame.new(-7, -3, -42),
                            CFrame.new(-7, -3, -49),
                            CFrame.new(-7, -3, 7),
                            CFrame.new(-7, -3, 14),
                            CFrame.new(-7, -3, 21),
                            CFrame.new(-7, -3, 28),
                            CFrame.new(-7, -3, 35),
                            CFrame.new(-7, -3, 42),
                            CFrame.new(-7, -3, 49),
                            CFrame.new(-7, -3, 0),
                            CFrame.new(14, -3, -7),
                            CFrame.new(14, -3, -14),
                            CFrame.new(14, -3, -21),
                            CFrame.new(14, -3, -28),
                            CFrame.new(14, -3, -35),
                            CFrame.new(14, -3, -42),
                            CFrame.new(14, -3, -49),
                            CFrame.new(14, -3, 7),
                            CFrame.new(14, -3, 14),
                            CFrame.new(14, -3, 21),
                            CFrame.new(14, -3, 28),
                            CFrame.new(14, -3, 35),
                            CFrame.new(14, -3, 42),
                            CFrame.new(14, -3, 49),
                            CFrame.new(14, -3, 0),
                            CFrame.new(-14, -3, -7),
                            CFrame.new(-14, -3, -14),
                            CFrame.new(-14, -3, -21),
                            CFrame.new(-14, -3, -28),
                            CFrame.new(-14, -3, -35),
                            CFrame.new(-14, -3, -42),
                            CFrame.new(-14, -3, -49),
                            CFrame.new(-14, -3, 7),
                            CFrame.new(-14, -3, 14),
                            CFrame.new(-14, -3, 21),
                            CFrame.new(-14, -3, 28),
                            CFrame.new(-14, -3, 35),
                            CFrame.new(-14, -3, 42),
                            CFrame.new(-14, -3, 49),
                            CFrame.new(-14, -3, 0),
                            CFrame.new(21, -3, -7),
                            CFrame.new(21, -3, -14),
                            CFrame.new(21, -3, -21),
                            CFrame.new(21, -3, -28),
                            CFrame.new(21, -3, -35),
                            CFrame.new(21, -3, -42),
                            CFrame.new(21, -3, -49),
                            CFrame.new(21, -3, 7),
                            CFrame.new(21, -3, 14),
                            CFrame.new(21, -3, 21),
                            CFrame.new(21, -3, 28),
                            CFrame.new(21, -3, 35),
                            CFrame.new(21, -3, 42),
                            CFrame.new(21, -3, 49),
                            CFrame.new(21, -3, 0),
                            CFrame.new(-21, -3, -7),
                            CFrame.new(-21, -3, -14),
                            CFrame.new(-21, -3, -21),
                            CFrame.new(-21, -3, -28),
                            CFrame.new(-21, -3, -35),
                            CFrame.new(-21, -3, -42),
                            CFrame.new(-21, -3, -49),
                            CFrame.new(-21, -3, 7),
                            CFrame.new(-21, -3, 14),
                            CFrame.new(-21, -3, 21),
                            CFrame.new(-21, -3, 28),
                            CFrame.new(-21, -3, 35),
                            CFrame.new(-21, -3, 42),
                            CFrame.new(-21, -3, 49),
                            CFrame.new(-21, -3, 0),
                            CFrame.new(28, -3, -7),
                            CFrame.new(28, -3, -14),
                            CFrame.new(28, -3, -21),
                            CFrame.new(28, -3, -28),
                            CFrame.new(28, -3, -35),
                            CFrame.new(28, -3, -42),
                            CFrame.new(28, -3, -49),
                            CFrame.new(28, -3, 7),
                            CFrame.new(28, -3, 14),
                            CFrame.new(28, -3, 21),
                            CFrame.new(28, -3, 28),
                            CFrame.new(28, -3, 35),
                            CFrame.new(28, -3, 42),
                            CFrame.new(28, -3, 49),
                            CFrame.new(28, -3, 0),
                            CFrame.new(-28, -3, -7),
                            CFrame.new(-28, -3, -14),
                            CFrame.new(-28, -3, -21),
                            CFrame.new(-28, -3, -28),
                            CFrame.new(-28, -3, -35),
                            CFrame.new(-28, -3, -42),
                            CFrame.new(-28, -3, -49),
                            CFrame.new(-28, -3, 7),
                            CFrame.new(-28, -3, 14),
                            CFrame.new(-28, -3, 21),
                            CFrame.new(-28, -3, 28),
                            CFrame.new(-28, -3, 35),
                            CFrame.new(-28, -3, 42),
                            CFrame.new(-28, -3, 49),
                            CFrame.new(-28, -3, 0),
                            CFrame.new(35, -3, -7),
                            CFrame.new(35, -3, -14),
                            CFrame.new(35, -3, -21),
                            CFrame.new(35, -3, -28),
                            CFrame.new(35, -3, -35),
                            CFrame.new(35, -3, -42),
                            CFrame.new(35, -3, -49),
                            CFrame.new(35, -3, 7),
                            CFrame.new(35, -3, 14),
                            CFrame.new(35, -3, 21),
                            CFrame.new(35, -3, 28),
                            CFrame.new(35, -3, 35),
                            CFrame.new(35, -3, 42),
                            CFrame.new(35, -3, 49),
                            CFrame.new(35, -3, 0),
                            CFrame.new(-35, -3, -7),
                            CFrame.new(-35, -3, -14),
                            CFrame.new(-35, -3, -21),
                            CFrame.new(-35, -3, -28),
                            CFrame.new(-35, -3, -35),
                            CFrame.new(-35, -3, -42),
                            CFrame.new(-35, -3, -49),
                            CFrame.new(-35, -3, 7),
                            CFrame.new(-35, -3, 14),
                            CFrame.new(-35, -3, 21),
                            CFrame.new(-35, -3, 28),
                            CFrame.new(-35, -3, 35),
                            CFrame.new(-35, -3, 42),
                            CFrame.new(-35, -3, 49),
                            CFrame.new(-35, -3, 0),
                            CFrame.new(42, -3, -7),
                            CFrame.new(42, -3, -14),
                            CFrame.new(42, -3, -21),
                            CFrame.new(42, -3, -28),
                            CFrame.new(42, -3, -35),
                            CFrame.new(42, -3, -42),
                            CFrame.new(42, -3, -49),
                            CFrame.new(42, -3, 7),
                            CFrame.new(42, -3, 14),
                            CFrame.new(42, -3, 21),
                            CFrame.new(42, -3, 28),
                            CFrame.new(42, -3, 35),
                            CFrame.new(42, -3, 42),
                            CFrame.new(42, -3, 49),
                            CFrame.new(42, -3, 0),
                            CFrame.new(-42, -3, -7),
                            CFrame.new(-42, -3, -14),
                            CFrame.new(-42, -3, -21),
                            CFrame.new(-42, -3, -28),
                            CFrame.new(-42, -3, -35),
                            CFrame.new(-42, -3, -42),
                            CFrame.new(-42, -3, -49),
                            CFrame.new(-42, -3, 7),
                            CFrame.new(-42, -3, 14),
                            CFrame.new(-42, -3, 21),
                            CFrame.new(-42, -3, 28),
                            CFrame.new(-42, -3, 35),
                            CFrame.new(-42, -3, 42),
                            CFrame.new(-42, -3, 49),
                            CFrame.new(-42, -3, 0),
                        }
                
                        for _, position in ipairs(coordinates) do
                            place(sphere, 0, cframe * position) -- Assuming `sphere` is defined outside this scope
                            wait(0.3)
                        end
                    end
                })
                
                --buildingname                
                EzBox:AddDropdown('Ez Structure', {
                    Values = { 'Campfire', 'Stable', 'Hut', 'Torch', 'Chest', 'Grinder','Lookout','Ice Gate','Wood Gate','Wood Wall','Sign','Wood Fence','Plant Box','Ladder', 'Big_Ol_Hut', 'Dock','Reinforced Chest','Table','Chair','Tower','Hovel','Coin Press','Trade Hut','Stone Gate','Stone Wall','Big Chair','Big Table','Bridge','Iron Turret','Iron Wall','Iron Gate','Void Torch','Void Gate','Crystal Gate','Crystal Wall','Magnetite Wall','Magnetite Gate','Emerald Gate','Emerald Wall','Infinity Chest','God Hut' },
                    Default = "", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                    Text = 'Structures',
                    Tooltip = 'Structures used to type Ez', -- Information shown when you hover over the dropdown
                    Callback = function(Value)
                        Ez = Value
                    end
                })
                
                EzBox:AddButton({
                    Text = "Place",
                    DoubleClick = false,
                    Tooltip = "Place Structures",
                    Func = function() 
                        local player3 = game:GetService("Players").LocalPlayer
                        local RootPart = player3.Character.HumanoidRootPart
                        local cframe = RootPart.CFrame
                        
                        local function place(name,rot,pos)
	if not isvoid then
		Packets.PlaceStructure.send({
			buildingName=name,
			yrot=rot,
			vec=pos,
			isMobile=false,
		})
	else
		Packets.PlaceStructure.send(
			pos,
			name,
			rot,
			false
		)
	end
end
                        
                        local coordinates = {
                            Vector3.new(-35, -3, 0),
                            Vector3.new(-35, -3, 7), 
                            Vector3.new(-35, -3, -7), 
                            Vector3.new(-35, -3, 14), 
                            Vector3.new(-35, -3, -14), 
                            Vector3.new(-35, -3, 21), 
                            Vector3.new(-35, -3, -21), 
                            Vector3.new(-35, -3, 28),
                            Vector3.new(-35, -3, -28), 
                            Vector3.new(-28, -3, -28), 
                            Vector3.new(-21, -3, -28),
                            Vector3.new(-14, -3, -28), 
                            Vector3.new(-7, -3, -28), 
                            Vector3.new(-28, -3, 0), 
                            Vector3.new(-21, -3, 0), 
                            Vector3.new(-14, -3, 0), 
                            Vector3.new(-7, -3, 0), 
                            Vector3.new(-28, -3, 28), 
                            Vector3.new(-21, -3, 28), 
                            Vector3.new(-14, -3, 28), 
                            Vector3.new(-7, -3, 28), 
                            Vector3.new(7, -3, -10), 
                            Vector3.new(14, -3, -10), 
                            Vector3.new(21, -3, -10), 
                            Vector3.new(28, -3, -10), 
                            Vector3.new(28, -3, -3), 
                            Vector3.new(21, -3, 4), 
                            Vector3.new(14, -3, 10), 
                            Vector3.new(7, -3, 17), 
                            Vector3.new(7, -3, 24), 
                            Vector3.new(14, -3, 24), 
                            Vector3.new(21, -3, 24), 
                            Vector3.new(28, -3, 24), 
                        }
                        
                        for _, position in ipairs(coordinates) do
                            Remote(
                                cframe*position,
                                Ez,
                                0,
                                false
                            )
                            wait(0.3)
                        end
                    end
                })
                
        
                PenisBox:AddDropdown('Penis Structure', {
                    Values = { 'Campfire', 'Stable', 'Hut', 'Torch', 'Chest', 'Grinder','Lookout','Ice Gate','Wood Gate','Wood Wall','Sign','Wood Fence','Plant Box','Ladder', 'Big_Ol_Hut', 'Dock','Reinforced Chest','Table','Chair','Tower','Hovel','Coin Press','Trade Hut','Stone Gate','Stone Wall','Big Chair','Big Table','Bridge','Iron Turret','Iron Wall','Iron Gate','Void Torch','Void Gate','Crystal Gate','Crystal Wall','Magnetite Wall','Magnetite Gate','Emerald Gate','Emerald Wall','Infinity Chest','God Hut' },
                    Default = "", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                    Text = 'Structures',
                    Tooltip = 'Structures used to make a penis', -- Information shown when you hover over the dropdown
                    Callback = function(Value)
                        penis = Value
                    end
                })
                
                PenisBox:AddButton({
                    Text = "Place",
                    DoubleClick = false,
                    Tooltip = "Place Structures",
                    Func = function() 
                        local player4 = game:GetService("Players").LocalPlayer
                        local RootPart = player4.Character.HumanoidRootPart
                        local cframe = RootPart.CFrame
                        
                        local function place(name,rot,pos)
	if not isvoid then
		Packets.PlaceStructure.send({
			buildingName=name,
			yrot=rot,
			vec=pos,
			isMobile=false,
		})
	else
		Packets.PlaceStructure.send(
			pos,
			name,
			rot,
			false
		)
	end
end
                        
                        local coordinates = {
                            Vector3.new(3, -3,  0), 
                            Vector3.new(10, -3,  0),
                            Vector3.new(17, -3,  0), 
                            Vector3.new(24, -3,  0), 
                            Vector3.new(31, -3,  0), 
                            Vector3.new(3, -3,  7), 
                            Vector3.new(3, -3,  14), 
                            Vector3.new(3, -3,  21),
                            Vector3.new(3, -3,  28), 
                            Vector3.new(10, -3,  28), 
                            Vector3.new(17, -3,  28), 
                            Vector3.new(24, -3,  28), 
                            Vector3.new(31, -3,  28), 
                            Vector3.new(31, -3,  7), 
                            Vector3.new(31, -3,  14), 
                            Vector3.new(31, -3,  21), 
                            Vector3.new(-3, -3,  0), 
                            Vector3.new(-10, -3,  0), 
                            Vector3.new(-17, -3,  0), 
                            Vector3.new(-24, -3,  0), 
                            Vector3.new(-31, -3,  0), 
                            Vector3.new(-3, -3,  7), 
                            Vector3.new(-3, -3,  14), 
                            Vector3.new(-3, -3,  21), 
                            Vector3.new(-3, -3,  28), 
                            Vector3.new(-10, -3,  28), 
                            Vector3.new(-17, -3,  28), 
                            Vector3.new(-24, -3,  28), 
                            Vector3.new(-31, -3,  28), 
                            Vector3.new(-31, -3,  7), 
                            Vector3.new(-31, -3,  14), 
                            Vector3.new(-31, -3,  21), 
                            Vector3.new(7, -3,  -7), 
                            Vector3.new(7, -3,  -14), 
                            Vector3.new(7, -3,  -21), 
                            Vector3.new(7, -3,  -28), 
                            Vector3.new(7, -3,  -35),
                            Vector3.new(7, -3,  -42), 
                            Vector3.new(7, -3,  -49), 
                            Vector3.new(0, -3,  -49), 
                            Vector3.new(-7, -3,  -49), 
                            Vector3.new(-14, -3,  -49), 
                            Vector3.new(-7, -3,  -7), 
                            Vector3.new(-7, -3,  -14), 
                            Vector3.new(-7, -3,  -21), 
                            Vector3.new(-7, -3,  -28), 
                            Vector3.new(-7, -3,  -35), 
                            Vector3.new(-7, -3,  -42), 
                            Vector3.new(-7, -3,  -49), 
                            Vector3.new(0, -3,  -35), 
                        }
                        
                        for _, position in ipairs(coordinates) do
                            Remote(
                                cframe*position,
                                penis,
                                0,
                                false
                            )
                            wait(0.3)
                        end
                    end
                })
                
                LBox:AddDropdown('L Structure', {
                    Values = { 'Campfire', 'Stable', 'Hut', 'Torch', 'Chest', 'Grinder','Lookout','Ice Gate','Wood Gate','Wood Wall','Sign','Wood Fence','Plant Box','Ladder', 'Big_Ol_Hut', 'Dock','Reinforced Chest','Table','Chair','Tower','Hovel','Coin Press','Trade Hut','Stone Gate','Stone Wall','Big Chair','Big Table','Bridge','Iron Turret','Iron Wall','Iron Gate','Void Torch','Void Gate','Crystal Gate','Crystal Wall','Magnetite Wall','Magnetite Gate','Emerald Gate','Emerald Wall','Infinity Chest','God Hut' },
                    Default = "", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                    Text = 'Structures',
                    Tooltip = 'Structures used to make an L', -- Information shown when you hover over the dropdown
                    Callback = function(Value)
                        L15 = Value
                    end
                })
                
                LBox:AddButton({
                    Text = "Place",
                    DoubleClick = false,
                    Tooltip = "Place Structures",
                    Func = function() 
                        local player4 = game:GetService("Players").LocalPlayer
                        local RootPart = player4.Character.HumanoidRootPart
                        local cframe = RootPart.CFrame
                        
                        local function place(name,rot,pos)
	if not isvoid then
		Packets.PlaceStructure.send({
			buildingName=name,
			yrot=rot,
			vec=pos,
			isMobile=false,
		})
	else
		Packets.PlaceStructure.send(
			pos,
			name,
			rot,
			false
		)
	end
end
                        
                        local coordinates = {
                            Vector3.new(-6, -3, -7), 
                            Vector3.new(-6, -3, -14), 
                            Vector3.new(-6, -3, -21), 
                            Vector3.new(-6, -3, -28), 
                            Vector3.new(-6, -3, -35), 
                            Vector3.new(1, -3, -7), 
                            Vector3.new(8, -3, -7), 
                        }
                        
                        for _, position in ipairs(coordinates) do
                            Remote(
                                cframe*position,
                                L15,
                                0,
                                false
                            )
                            wait(0.3)
                        end
                    end
                })
                
                StraightBox:AddToggle('Place Straight', {
                    Text = 'Straight Placement',
                    Default = false,
                    Tooltip = 'Face the direction where the structures place straight', 
                    Callback = function(Value)
                        lookstraight = Value
                    end
                })
        
                local faceDirection = LPH_NO_VIRTUALIZE(function(directionVector)
                    local horizontalDirection = Vector3.new(directionVector.X, 0, directionVector.Z).Unit
                    Player.Character.HumanoidRootPart.CFrame = CFrame.lookAt(Player.Character.HumanoidRootPart.Position,
                    Player.Character.HumanoidRootPart.Position + horizontalDirection,
                                                                        Vector3.new(0, 1, 0))
                end)
                
                local isFacingWest = false
        
                UserInputService.InputBegan:Connect(function(input, isProcessed)
                    if isProcessed then
                        return
                    end
                
                    if lookstraight then
                        isFacingWest = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input, isProcessed)
                    if lookstraight then
                        isFacingWest = false
                    end
                end)
        
                local CSignal = nil
                LPH_NO_VIRTUALIZE(function()
                    Connections.awiuehfia =  RunService.RenderStepped:Connect(function()
                        if lookstraight then
                            faceDirection(Vector3.new(-1, 0, 0)) -- Face West (left)
                        end
                        if JumpPowerToggled then
                            Player.Character.Humanoid.UseJumpPower = false
                            Player.Character.Humanoid.JumpHeight = JumpPowerValue
                        else
                            if Player.Character.Humanoid.UseJumpPower == false then
                                Player.Character.Humanoid.UseJumpPower = true
                            end
                        end
                        if BowAimbot then
                            if not ShowVisualizer then
                                Visualizer.Visible = false
                            end
                            if Visualizer and ShowVisualizer then
                                Visualizer.Position = Vector2.new(UserInputService:GetMouseLocation().X,UserInputService:GetMouseLocation().Y)
                                Visualizer.Visible = true
                                Visualizer.NumSides = VisualizerSides
                                Visualizer.Color = VisualizerColor
                                Visualizer.Transparency = VisualizerTransparency
                                Visualizer.Radius = VisualizerRadius
                                Visualizer.Filled = VisualizerFilled
                                Visualizer.Thickness = VisualizerThickness
                            end
                        else
                            if Visualizer then
                                Visualizer.Visible = false
                            end
                        end
                    end)
                end)()
        
                -- VALENTINES 1
        
        
        
                -- HALLOWEEN 2
        
                --[[AutoCollectPumpkins:AddToggle('Auto Collect Pumpkins [QUEST]', {
                    Text = 'Auto Collect Pumpkins [QUEST]',
                    Default = false,
                    Tooltip = 'COLLECTS PUMPKINS [PLEASE USE A AXE]', 
                    Callback = function(Value)
                        Library:Notify("Please equip a axe to use collect pumpkin.")
                        autocollectpumpkins = Value
                    end
                })
        
                AutoCollectPumpkins:AddToggle('Auto Break Pumpkin Patch [QUEST]', {
                    Text = 'Auto Break Pumpkin Patch',
                    Default = false,
                    Tooltip = 'breaks pumpkin patches [QUEST]', 
                    Callback = function(Value)
                        Library:Notify("Please equip a axe to use collect pumpkin.")
                        autobreakpumpkinpatches = Value
                    end
                })
        
                task.spawn(function()
                    while true do
                        if BreakPoint then break end
                        pcall(function()
                            if autocollectpumpkins then
                                local closestPumpkin, dist = getClosestPumpkin()
                                if closestPumpkin and dist and Player.Character then
                                    Player.Character.HumanoidRootPart.CFrame = closestPumpkin.CFrame
                                    Packets['SwingTool']['send']({
                                        closestPumpkin
                                    })
                                end
                            end
                        end)
                        task.wait()
                    end
                end)
        
                task.spawn(function()
                    while true do
                        if BreakPoint then break end
                        pcall(function()
                            if autobreakpumpkinpatches then
                                local closestPumpkin, dist = getClosestPumpkinPatch()
                                if closestPumpkin and dist then
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = closestPumpkin.CFrame
                                    game.Packets['SwingTool']['send']({
                                        closestPumpkin
                                    })
                                end
                            end
                        end)
                        task.wait()
                    end
                end)]]
        --coin press aura
                goldAutofarmBox:AddSlider('Coin Press Range', {
                    Text = 'Coin Press Range',
                    Default = 15, 
                    Min = 0,
                    Max = 50,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        coinpressrange = Value
                    end
                })
                goldAutofarmBox:AddToggle('Coin Press Aura', {
                    Text = 'Coin Press Aura',
                    Default = false,
                    Tooltip = 'Toggle on/off Coin Press Aura', 
                    Callback = function(Value)
                        coinpress = Value
                    end
                })
                PickupBox:AddDropdown('Items', {
                    Values = { 'Gold','Raw Gold','Coin2','Magnetite','Raw Magnetite','Raw Iron', 'Crystal Chunk', 'Emerald', 'Pink Diamond', 'Void Shard', 'Essence', 'Log','Leaves','Wood','Iron','Berry','Bloodfruit','Stone','Egg'},
                    Default = 1, -- number index of the value / string
                    Multi = true, -- true / false, allows multiple choices to be selected
                
                    Text = 'Items',
                    Tooltip = 'Items to pickup', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        pickupitem = Value
                    end
                })
                PickupBox:AddToggle('Pick up items', {
                    Text = 'Pickup Items',
                    Default = false,
                    Tooltip = 'Toggle on/off item pickup', 
                    Callback = function(Value)
                        specificpickup = Value
                    end
                })
                -- xray function
                local x = LPH_NO_VIRTUALIZE(function(v)
                    if v then
                        for _, i in pairs(workspace:GetDescendants()) do
                            if i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass('Humanoid') and not i.Parent.Parent:FindFirstChildOfClass('Humanoid') then
                                i.LocalTransparencyModifier = 0.5
                            end
                        end
                    else
                        for _, i in pairs(workspace:GetDescendants()) do
                            if i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass('Humanoid') and not i.Parent.Parent:FindFirstChildOfClass('Humanoid') then
                                i.LocalTransparencyModifier = 0
                            end
                        end
                    end
                end)
                
                xrayBox:AddToggle('X-Ray', {
                    Text = 'Toggle X-Ray',
                    Default = false,
                    Tooltip = 'See through structures', 
                    Callback = function(Value)
                        x(Value)
                    end
                })
                
                equipBox:AddDropdown('Equip Armor Set', {
                    Values = { 'God Set', 'Void Set', 'Pink Diamond Set', 'Emerald Set', 'Magnetite Set', 'Crystal Set', 'Adurite Set', 'Steel Set', 'Iron Set','Hide Set', 'Leaf Set'},
                    Default = "Armor Set", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Set',
                    Tooltip = 'Set to choose to equip', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        sets1 = Value
                    end
                })
                equipBox:AddLabel('Keybind'):AddKeyPicker('KeyPicker', {
                    Default = 'G', 
                    SyncToggleState = false,
                    Mode = 'Toggle',
                
                    Text = 'Equip Armor Keybind', 
                    NoUI = true, 
                
                    Callback = function(Value)
                        if not chatBarFocused then
                            if sets1 == "God Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["God Halo"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["God Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["God Legs"].LayoutOrder)
                            elseif sets1 == "Void Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Void Shroud"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Void Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Void Greaves"].LayoutOrder)
                            elseif sets1 == "Pink Diamond Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Pink Diamond Hood"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Pink Diamond Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Pink Diamond Greaves"].LayoutOrder)
                            elseif sets1 == "Emerald Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Emerald Helmet"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Emerald Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Emerald Greaves"].LayoutOrder)
                            elseif sets1 == "Magnetite Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Magnetite Mask"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Magnetite Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Magnetite Greaves"].LayoutOrder)
                            elseif sets1 == "Crystal Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Crystal Crown"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Crystal Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Crystal Greaves"].LayoutOrder)
                            elseif sets1 == "Adurite Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Adurite Helmet"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Adurite Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Adurite Greaves"].LayoutOrder)
                            elseif sets1 == "Steel Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Steel Helmet"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Steel Greaves"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Steel Chestplate"].LayoutOrder)
                            elseif sets1 == "Iron Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Iron Helmet"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Iron Greaves"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Iron Chestplate"].LayoutOrder)
                            elseif sets1 == "Hide Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Hide Shirt"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Hide Pants"].LayoutOrder)
                            elseif sets1 == "Leaf Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Leaf Shirt"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Leaf Pants"].LayoutOrder)
                            end
                        end
                    end
                })
                consumeBox:AddToggle('Consume Dropped Food', {
                    Text = 'Eat',
                    Default = false,
                    Tooltip = 'Eat any dropped fruit/food on the ground', 
                    Callback = function(Value)
                        consume = Value
                    end
                })
        
                -- booga macros
                IsFixing = false
        
                local checkforfile = LPH_NO_VIRTUALIZE(function(MacroName)
                    if isfolder("Exceros Hub/Booga Macro") then
                        if isfile("Exceros Hub/Booga Macro/"..MacroName..".txt") then
                            return true
                        else
                            writefile("Exceros Hub/Booga Macro/"..MacroName..".txt", "{}")
                            return false
                        end
                    end
                end)
                
                local Macro_Folder_For_Encode = {}
        
                task.spawn(function()
                    if isfolder("Exceros Hub") then
                        if not isfolder("Exceros Hub/Booga Macro") then
                            makefolder("Exceros Hub/Booga Macro")
                        end
                    end
                end)
        
                -- booga macros stuff
                MacrosBox:AddInput('Macro Name', {
                    Default = 'Macro Name',
                    Numeric = false,
                    Finished = true,
                
                    Text = 'Macro Name',
                    Tooltip = 'Sets the macro you want it to become when you record it.',
                
                    Placeholder = 'Macro Name', 
        
                    Callback = function(Value)
                        MacroName = tostring(Value)
                    end
                })
                MacrosBox:AddButton({
                    Text = "Record Macro",
                    DoubleClick = false,
                    Tooltip = "record macro",
                    Func = function()
                        if #MacroName == 0 then
                            Library:Notify("❌ Please input a macro name that is not nil", 5)
                            return
                        end
                        if not Recording and not IsFixing then
                            Recording = true
                            checkforfile(MacroName)
                            if isfolder("Exceros Hub/Booga Macro") then
                                local RecordTime = tick()
                                task.spawn(function()
                                    while task.wait(1) do
                                        local Position = Player.Character.HumanoidRootPart.CFrame.Position
                                        Macro_Folder_For_Encode[tostring(getTableSize(Macro_Folder_For_Encode)+1)] = {Position.X,Position.Y,Position.Z,(tick()-RecordTime)}
                                        if (getTableSize(Macro_Folder_For_Encode)+1) == 2 and ShowMacroFrames then
                                            local trackerPart = Instance.new("Part")
                                            trackerPart.Color = Color3.fromRGB(0,255,0)
                                            trackerPart.Anchored = true
                                            trackerPart.CanCollide = false
                                            trackerPart.Size = Vector3.new(1,1,1)
                                            trackerPart.Position = Position
                                            trackerPart.Parent = MacroPositionFolder
                                        elseif (getTableSize(Macro_Folder_For_Encode)+1) ~= 2 and ShowMacroFrames then
                                            local trackerPart = Instance.new("Part")
                                            trackerPart.Color = Color3.fromRGB(255,0,0)
                                            trackerPart.Anchored = true
                                            trackerPart.CanCollide = false
                                            trackerPart.Size = Vector3.new(1,1,1)
                                            trackerPart.Position = Position
                                            trackerPart.Parent = MacroPositionFolder
                                        end
                                        Library:Notify("✅ Macro Frame Recorded " .. tostring(Position) .. " With a Index of " .. tostring(getTableSize(Macro_Folder_For_Encode)+1), 5)
                                        if Recording == false then 
                                            Library:Notify("✅ Macro " .. MacroName .. " Successfully Recorded!", 5) 
                                            writefile("Exceros Hub/Booga Macro/"..MacroName..".txt", encodeData(Macro_Folder_For_Encode))
                                            IsFixing = true
                                            task.delay(3, function()
                                                table.clear(Macro_Folder_For_Encode)
                                                IsFixing = false
                                                Library:Notify("✅[DEV] Table Fixed", 5)
                                            end)
                                            break 
                                        end
                                    end
                                end)
                            else
                                Library:Notify("❌ Failed to Locate Booga Macro Folder", 5)
                            end
                        else
                            Library:Notify("✅ Ended Recording Session", 5)
                            Recording = false
                        end
                    end,
                })
                MacrosBox:AddToggle('Show Macro Positions', {
                    Text = 'Show Macro Positions',
                    Default = false,
                    Tooltip = 'Shows Macro Positions', 
                    Callback = function(Value)
                        ShowMacroFrames = Value
                    end
                })
        
                MacrosBox:AddDivider()
                
                MacrosBox:AddDropdown('Macros Available', {
                    Values = {},
                    Default = 1,
                    Multi = false, 
                
                    Text = 'Macros Available',
                    Tooltip = 'macros you have in your workspace files', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        MacroSelected = tostring(Value)
                    end
                })
        
                task.spawn(LPH_NO_VIRTUALIZE(function()
                    if isfolder("Exceros Hub/Booga Macro") then
                        local ListFiles = listfiles("Exceros Hub/Booga Macro")
                        local FilesFound = {}
                        local FinalFound = {}
                        for index,file in pairs(ListFiles) do
                            table.insert(FilesFound, tostring(file):split("\\")[2])
                        end
                        for i,v in pairs(FilesFound) do 
                            if isfile("Exceros Hub/Booga Macro/"..v) then 
                                Library:Notify("✅ Macro File " .. tostring(v) .. " was found successfully!", 5)
                                table.insert(FinalFound, v)
                            else
                                Library:Notify("❌ Macro File " .. tostring(v) .. " was returned isfile false.", 5)
                            end 
                        end
                        Options["Macros Available"]:SetValues(FinalFound)
                        Options["Macros Available"]:SetValues(nil)
                    else
                        Library:Notify("❌ Failed to get booga macro folder", 5)
                    end
                end))
        
                MacrosBox:AddButton({
                    Text = "Refresh Macros",
                    DoubleClick = false,
                    Tooltip = "Refresh Macros",
                    Func = function()
                        if isfolder("Exceros Hub/Booga Macro") then
                            local ListFiles = listfiles("Exceros Hub/Booga Macro")
                            local FilesFound = {}
                            local FinalFound = {}
                            for index,file in pairs(ListFiles) do
                                table.insert(FilesFound, tostring(file):split("\\")[2])
                            end
                            for i,v in pairs(FilesFound) do 
                                if isfile("Exceros Hub/Booga Macro/"..v) then 
                                    Library:Notify("✅ Macro File " .. tostring(v) .. " was found successfully!", 5)
                                    table.insert(FinalFound, v)
                                else
                                    Library:Notify("❌ Macro File " .. tostring(v) .. " was returned isfile false.", 5)
                                end 
                            end
                            Options["Macros Available"]:SetValues(FinalFound)
                            Options["Macros Available"]:SetValues(nil)
                        else
                            Library:Notify("❌ Refresh Failed | Couldn't find Booga Macro Folder", 5)
                        end
        
                    end,
                })
        
        
                    local function PlayMacroFunction() -- instead of using Func we hav eto use this so we can call it back
                        if MacroSelected ~= "" and MacroSelected ~= nil and #MacroSelected ~= 0 then
                            if not Recording then
                                if isfile("Exceros Hub/Booga Macro/"..MacroSelected) then
                                    local DecodedData = decodeData(readfile("Exceros Hub/Booga Macro/"..MacroSelected))
                                    if DecodedData then
                                        if getTableSize(DecodedData) == 0 then
                                            Library:Notify("❌ Macro " .. MacroSelected .. ".txt has no data in it!", 5)
                                            return
                                        end
                                        local sortedKeys = {}
                                        for k, _ in pairs(DecodedData) do
                                            table.insert(sortedKeys, k)
                                        end
                                        table.sort(sortedKeys, sortKeysAscending)
                                        local reorderedTable = {}
                                        for _, k in ipairs(sortedKeys) do
                                            reorderedTable[tonumber(k)] = DecodedData[k]
                                        end
                                        local PlayTime = os.time()
        
                                        for i,v in pairs(reorderedTable) do
                                            local X,Y,Z = 0,0,0
                                            local Time = 0
                                            for i2,v2 in pairs(v) do
                                                if (i2==1) then
                                                    X = v2
                                                elseif (i2==2) then
                                                    Y = v2
                                                elseif (i2==3) then
                                                    Z = v2
                                                elseif (i2==4) then
                                                    Time = v2
                                                end
                                            end
                                            local totalVector = Vector3.new(X,Y,Z)
                                            local vectorDistance = (Player.Character.HumanoidRootPart.Position-totalVector).Magnitude
                                            print(i,totalVector,vectorDistance,Time)
                            
                                            repeat task.wait() 
                                            until (os.time()-PlayTime) >= Time
                            
                                            local TweenMade = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(vectorDistance/MacroSpeed), {CFrame = CFrame.new(totalVector)})
                                            TweenMade:Play()
                                            TweenMade.Completed:Wait()
                                            if vectorDistance <= 3 then
                                                Library:Notify("✅ Completed Tween " .. tostring(i) .. " " .. tostring(os.time()-PlayTime) .. " " .. tostring(Time), 5)
                                            else
                                                PlayTime = Time - 1
                                            end
        
                                            if i >= getTableSize(reorderedTable) then
                                                if LoopPlayMacro then
                                                    Library:Notify("✅ Completed Macro, replaying...", 5)
                                                    PlayMacroFunction()
                                                end
                                            end
                                        end
        
                                    else
                                        Library:Notify("❌ Failed to decode" .. MacroSelected .. " data.", 5)
                                    end
                                else
                                    Library:Notify("❌ Couldn't find macro template " .. MacroSelected .. " in Booga Macro folder.", 5)
                                end
                            end
                        else
                            Library:Notify("❌ Please input a macro name to record.", 5)
                        end
                    end
        
                MacrosBox:AddButton({
                    Text = "Play Selected Macro",
                    DoubleClick = false,
                    Tooltip = "Play Macro Selected",
                    Func = function()
                        PlayMacroFunction()
                    end,
                })
        
                MacrosBox:AddSlider('Macro Tween Speed', {
                    Text = 'Macro Tween Speed',
                    Default = 12,
                    Min = 0,
                    Max = 15,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        MacroSpeed = Value
                    end
                })
        
                MacrosBox:AddToggle('Loop Play Macro', {
                    Text = 'Loop Play Macro',
                    Default = false,
                    Tooltip = 'Plays the macro over and over', 
                    Callback = function(Value)
                        LoopPlayMacro = Value
                    end
                })
        
                MacrosBox:AddButton({
                    Text = "Destroy Macro Positions",
                    DoubleClick = false,
                    Tooltip = "Destroy Macro Positions ( the visualize parts )",
                    Func = function()
                        for _,part in pairs(MacroPositionFolder:GetChildren()) do
                            part:Destroy() 
                        end
                    end,
                })
                


            -- library shit
            Library.KeybindFrame.Visible = false; -- todo: add a function for this
            
            Library:OnUnload(function()
                pcall(function()
                    for i,v in pairs(Connections) do v:Disconnect() end
                    for i2,v2 in pairs(Ores) do if v2.Drawing then v2.Drawing:Remove() table.remove(Ores, i2) end end
                    for i3,v3 in pairs(PlayerESP) do if v3.Drawing then v3.Drawing:Remove() table.remove(PlayerESP, i3) end end
                    for i4,v4 in pairs(ArmorESP) do if v4.Drawing then v4.Drawing:Remove() table.remove(ArmorESP, i4) end end
                    for i5,v5 in pairs(Cons) do v5:Disconnect() end
                    for i6,v6 in pairs(HeartESPTables) do if v6.Drawing then v6.Drawing:Remove() table.remove(HeartESPTables, i6) end end
                    for i7,v7 in pairs(TreasureESPTable) do if v7.Drawing then v7.Drawing:Remove() table.remove(TreasureESPTable, i7) end end
                    if Float then Float:Destroy() end
                    if Visualizer then Visualizer:Remove() Visualizer = nil end
                    if MacroPositionFolder then MacroPositionFolder:Destroy() end
                end)
                BreakPoint = true
                Library.Unloaded = true
            end)
            
            local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
            
            MenuGroup:AddButton('Unload', function() Library:Unload() end)
            MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
            
            Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu
            
            ThemeManager:SetLibrary(Library)
            SaveManager:SetLibrary(Library)
            SaveManager:IgnoreThemeSettings()
            SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
            ThemeManager:SetFolder('Exceros Hub')
            SaveManager:SetFolder('Exceros Hub/Booga Booga Reborn')
            SaveManager:BuildConfigSection(Tabs['UI Settings'])
            ThemeManager:ApplyToTab(Tabs['UI Settings'])
            SaveManager:LoadAutoloadConfig()
        
            local ExtraSettings = Tabs['UI Settings']:AddRightGroupbox('Keybind Menu')
            ExtraSettings:AddToggle('Keybind Menu', {
                Text = 'Keybind Menu',
                Default = false,
                Tooltip = 'Keybind Menu', 
                Callback = function(Value)
                    Library.KeybindFrame.Visible = Value
                end
            })
        
            -- Auto Toggle for Everything
            local TogglesTest = getgenv().Toggles
            for i,v in pairs(TogglesTest) do
                if type(v) == "table" then
                    if v.TextLabel and not string.find(v.TextLabel.Text, "Pumpkin") then
                        v:AddKeyPicker('KeyPicker', {
                            Default = '',
                            SyncToggleState = true,
                            Mode = 'Toggle',
                            Text = tostring(i),
                            NoUI = true, 
                        })
                    end
                end
            end
        end
    end
end

                



--box
